[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "",
    "text": "Bienvenido",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#de-qué-trata-este-curso",
    "href": "index.html#de-qué-trata-este-curso",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿De qué trata este curso?",
    "text": "¿De qué trata este curso?\nEste curso completo me llevará desde los fundamentos básicos de la programación hasta la construcción de aplicaciones prácticas utilizando los frameworks Django y la biblioteca de React.\nA través de una combinación de teoría y ejercicios prácticos, me sumergiré en los conceptos esenciales del desarrollo web y avanzaré hacia la creación de proyectos del mundo real.\nDesde la configuración del entorno de desarrollo hasta la construcción de una aplicación web de pila completa, este curso me proporcionará una comprensión sólida y experiencia práctica con Django y React.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#para-quién-es-este-curso",
    "href": "index.html#para-quién-es-este-curso",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿Para quién es este curso?",
    "text": "¿Para quién es este curso?\nEste curso está diseñado para principiantes y aquellos con poca o ninguna experiencia en programación.\nYa sea que sea un estudiante curioso, un profesional que busca cambiar de carrera o simplemente alguien que quiere aprender desarrollo web, este curso es para usted. Desde adolescentes hasta adultos, todos son bienvenidos a participar y explorar el emocionante mundo del desarrollo web con Django y React.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#cómo-contribuir",
    "href": "index.html#cómo-contribuir",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿Cómo contribuir?",
    "text": "¿Cómo contribuir?\nValoramos su contribución a este bootcamp. Si encuentra algún error, desea sugerir mejoras o agregar contenido adicional, me encantaría saber de usted.\nPuede contribuir a través del repositorio en linea, donde puede compartir sus comentarios y sugerencias.\nJuntos, podemos mejorar continuamente este recurso educativo para beneficiar a la comunidad de estudiantes y entusiastas de la programación.\nEste ebook ha sido creado con el objetivo de proporcionar acceso gratuito y universal al conocimiento.\nEstará disponible en línea para cualquier persona, sin importar su ubicación o circunstancias, para acceder y aprender a su propio ritmo.\nPuede descargarlo en formato PDF, Epub o verlo en línea en cualquier momento y lugar.\nEsperamos que disfrute este emocionante viaje de aprendizaje y descubrimiento en el mundo del desarrollo web con Django, FastAPI y React!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_intr.html#introducción-general-a-la-programación",
    "href": "unidades/unidad1/1_intr.html#introducción-general-a-la-programación",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Introducción General a la Programación",
    "text": "Introducción General a la Programación\nSi más preámbulos, empecemos con la introducción general a la programación.\nEs el proceso de diseñar e implementar un programa de computadora, es decir, un conjunto de instrucciones que le dicen a una computadora qué hacer.\nEs una habilidad muy valiosa en el mundo actual, ya que la mayoría de las tareas que realizamos a diario involucran el uso de computadoras y software.\nNos permite automatizar tareas, resolver problemas de manera eficiente y crear aplicaciones y sistemas que nos ayudan en nuestra vida diaria.\nEn este módulo aprenderemos los fundamentos de la programación utilizando Python, un lenguaje de programación de alto nivel, interpretado y orientado a objetos.\nAntes de introducirnos en el aprendizaje del lenguaje de programación, es importante conocer que debemos desarrollar la lógica de la prograamción, es decir, la habilidad de pensar de manera lógica y estructurada para resolver problemas de manera eficiente.\nAnalicemos el siguiente problema para entender la importancia de la lógica de programación:\n\nProblema: Supongamos que queremos escribir un programa que imprima los números del 1 al 10.\n\n¿Cómo resolverías este problema?\nUna posible solución sería escribir un programa que imprima los números del 1 al 10 de manera secuencial.\nprint(1)\nprint(2)\nprint(3)\nprint(4)\nprint(5)\nprint(6)\nprint(7)\nprint(8)\nprint(9)\nprint(10)\nEn el ejemplo anterior, hemos resuelto el problema de imprimir los números del 1 al 10 de manera secuencial. Sin embargo, esta solución no es escalable, ya que si quisiéramos imprimir los números del 1 al 1000, tendríamos que escribir 1000 instrucciones de impresión.\nUna solución más eficiente sería utilizar un bucle para imprimir los números del 1 al 10 de manera automática.\nfor i in range(1, 11):\n    print(i)\nEn el ejemplo anterior, hemos utilizado un bucle for para imprimir los números del 1 al 10 de manera automática. Esta solución es más eficiente y escalable, ya que podemos cambiar el rango del bucle para imprimir los números del 1 al 1000 sin tener que modificar el código.\n\nProblema: Supongamos que queremos escribir un programa que imprima un saludo personalizado.\n\n¿Cómo resolverías este problema?\nUna posible solución sería escribir un programa que solicite al usuario su nombre y luego imprima un saludo personalizado.\nname = input(\"Ingrese su nombre: \")\nprint(\"Hola, \" + name + \"!\")\nEn el ejemplo anterior, hemos resuelto el problema de imprimir un saludo personalizado solicitando al usuario su nombre. Esta solución es interactiva y personalizada, ya que el saludo se adapta al nombre del usuario.\nEn resumen, la lógica de programación es la habilidad de pensar de manera lógica y estructurada para resolver problemas de manera eficiente. Es fundamental para desarrollar programas y sistemas que nos ayuden en nuestra vida diaria.\nA continuación te ofresco algunas páginas que puedes revisar por tu cuenta y que te permitirán practicar el desarrollo de la lógica de programación:\n\nCodeSignal\nLeetCode\nHackerRank\nCodecademy\nedX\nCoursera\nUdemy",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_intr.html#instalación-de-python",
    "href": "unidades/unidad1/1_intr.html#instalación-de-python",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Instalación de Python",
    "text": "Instalación de Python\n\n\n\n\nPython\n\n\n\nPara instalar Python en tu computadora, sigue los siguientes pasos:\n\nVe al sitio web oficial de Python en https://www.python.org/.\nHaz clic en el botón de descarga de Python.\nSelecciona la versión de Python que deseas instalar (recomendamos la versión más reciente).\nDescarga el instalador de Python para tu sistema operativo (Windows, macOS o Linux).\nEjecuta el instalador de Python y sigue las instrucciones en pantalla para completar la instalación.\n\nUna vez que hayas instalado Python en tu computadora, puedes verificar que la instalación se haya realizado correctamente abriendo una terminal y ejecutando el siguiente comando:\npython --version\nSi la instalación se realizó correctamente, verás la versión de Python instalada en tu computadora.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_intr.html#uso-de-repl-pep-8-y-zen-de-python",
    "href": "unidades/unidad1/1_intr.html#uso-de-repl-pep-8-y-zen-de-python",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Uso de REPL, PEP 8 y Zen de Python",
    "text": "Uso de REPL, PEP 8 y Zen de Python\nEn esta sección, aprenderemos acerca de REPL, PEP 8 y Zen de Python.\n\nREPL\nREPL (Read-Eval-Print Loop) es un entorno interactivo que permite escribir y ejecutar código de Python de manera interactiva. Es una excelente herramienta para probar y experimentar con el lenguaje de programación.\nPara abrir el REPL de Python, abre una terminal y ejecuta el siguiente comando:\npython\nUna vez que hayas abierto el REPL de Python, puedes escribir y ejecutar código de Python de manera interactiva. Por ejemplo, puedes escribir una expresión matemática y ver el resultado:\n&gt;&gt;&gt; 2 + 2\n&gt;&gt;&gt; 4\n&gt;&gt;&gt; 3 * 4\n&gt;&gt;&gt; 12\n&gt;&gt;&gt; 10 / 2\n&gt;&gt;&gt; 5.0\n&gt;&gt;&gt; 2 ** 3\n&gt;&gt;&gt; 8\n&gt;&gt;&gt; \"Hola, Mundo!\"\n&gt;&gt;&gt; 'Hola, Mundo!'\n&gt;&gt;&gt; \"Hola, \" + \"Mundo!\"\n&gt;&gt;&gt; 'Hola, ' * 3\n&gt;&gt;&gt; 'Hola, Hola, Hola, '\n&gt;&gt;&gt; print(\"Hola, Mundo!\")\n&gt;&gt;&gt; Hola, Mundo!\nEn el ejemplo anterior, hemos utilizado el REPL de Python para ejecutar expresiones matemáticas y cadenas de texto. Es una excelente manera de probar y experimentar con el lenguaje de programación.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_intr.html#entornos-de-desarrollo",
    "href": "unidades/unidad1/1_intr.html#entornos-de-desarrollo",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Entornos de Desarrollo",
    "text": "Entornos de Desarrollo\nUn entorno de desarrollo es un conjunto de herramientas que nos permiten escribir, depurar y ejecutar código de manera eficiente. Es fundamental para desarrollar programas y sistemas de manera efectiva.\nExisten varios entornos de desarrollo que podemos utilizar para programar en Python. Algunos de los más populares son:\n\nIDLE: Es el entorno de desarrollo integrado (IDE) oficial de Python. Viene incluido con la instalación de Python y es una excelente opción para programar en Python.\nPyCharm: Es un IDE de Python desarrollado por JetBrains. Es una excelente opción para programar en Python, ya que ofrece muchas características y herramientas útiles.\nVisual Studio Code: Es un editor de código desarrollado por Microsoft. Es una excelente opción para programar en Python, ya que ofrece muchas extensiones y herramientas útiles.\nJupyter Notebook: Es una aplicación web que nos permite crear y compartir documentos interactivos que contienen código de Python, visualizaciones y texto explicativo.\n\nEn este bootcam utilizaremos Visual Studio Code como editor de código para programar en Python. Sin embargo, te recomiendo que explores otros entornos de desarrollo y elijas el que mejor se adapte a tus necesidades y preferencias.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Acerca de mi",
    "section": "",
    "text": "¡Hola! Soy Diego Saavedra, un experto en desarrollo avanzado de software e investigación. Mi amplia experiencia abarca diversas tecnologías, incluyendo Python (Django, Flask, Fast API) y JavaScript (Express, Next, React, Nestjs), así como también tengo conocimientos sólidos en bases de datos, arquitecturas de software y liderazgo ágil.\nMi pasión por la innovación, el desarrollo y la educación me ha llevado a destacarme como un profesional versátil e invaluable. Estoy constantemente listo para enfrentar desafíos técnicos y liderar proyectos de vanguardia.\nMi formación académica incluye el ser estudiante de Doctorado centrado en la inteligencia artificial, estoy enfocando mi investigación en la detección de TDA+H y Asperger mediante Visión Artificial a traves de algoritmos de Inteligencia Artificial. Además, poseo una Maestría en Ciencias de la Computación, con un enfoque en el Deep Learning (Convolutional Neural Network) y la Atención.\nCon esta sólida base académica y experiencia profesional, estoy preparado para aportar soluciones innovadoras y liderar equipos hacia el éxito en cualquier proyecto tecnológico que se me presente.\nAdemás, tengo experiencia en el desarrollo móvil utilizando Flutter y en la implementación de soluciones backend utilizando servicios Backend as a Service (BaaS) como Firebase y Supabase.\nEn el ámbito de la educación, he sido docente de programación en institutos y universidades, actualmente soy parte del Departamento de Ciencias de la Computación en la Universidad de las Fuerzas Armadas ESPE, donde he impartido asignaturas de desarrollo de Software Web con tecnologías como JavaScript, Java y C# asi como sus respectivos frameworks.\nMi experiencia en el desarrollo de software y la investigación me ha permitido adquirir habilidades de liderazgo, trabajo en equipo y comunicación efectiva. Estoy seguro de que mi experiencia y habilidades serán de gran valor para cualquier proyecto tecnológico que se me presente.\nEn este curso aprenderás a desarrollar aplicaciones web con Python y Django, una de las tecnologías más populares y poderosas para el desarrollo de aplicaciones web. A lo largo del curso, aprenderás a crear aplicaciones web desde cero, utilizando Django y Python, y a implementar funcionalidades avanzadas como integración con APIs externas y mucho más.\nTambien veremos tecnologías como Git, Github, Docker, Python, Django, Django Rest Framework, Html5, Css3, JavaScript, Nodejs, Npm y React.\n\n\n¡Estoy emocionado de compartir contigo mi conocimiento y experiencia en el desarrollo de aplicaciones web con Python y Django!"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Licencia",
    "section": "",
    "text": "Uso Permitido\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de [Nombre de la Compañía]. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio."
  },
  {
    "objectID": "license.html#atribución",
    "href": "license.html#atribución",
    "title": "Licencia",
    "section": "Atribución",
    "text": "Atribución\nSi compartes los ejemplos, los fragmentos de código o el contenido de este curso en línea, te pedimos que proporciones la atribución adecuada a [Nombre de la Compañía]."
  },
  {
    "objectID": "license.html#cambios-en-la-licencia",
    "href": "license.html#cambios-en-la-licencia",
    "title": "Licencia",
    "section": "Cambios en la Licencia",
    "text": "Cambios en la Licencia\n[Nombre de la Compañía] se reserva el derecho de modificar los términos de esta licencia en cualquier momento. Cualquier cambio se reflejará en esta página.\nGracias por respetar nuestros derechos de autor y por tu comprensión."
  },
  {
    "objectID": "index.html#de-qué-trata-este-bootcamp",
    "href": "index.html#de-qué-trata-este-bootcamp",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿De qué trata este Bootcamp?",
    "text": "¿De qué trata este Bootcamp?\nEste bootcamp está diseñado para enseñarle a desarrollar aplicaciones web modernas utilizando Django, Flask y React.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#para-quién-es-este-bootcamp",
    "href": "index.html#para-quién-es-este-bootcamp",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿Para quién es este bootcamp?",
    "text": "¿Para quién es este bootcamp?\nEste bootcamp es para cualquier persona interesada en aprender a desarrollar aplicaciones web modernas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#qué-aprenderás",
    "href": "index.html#qué-aprenderás",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿Qué aprenderás?",
    "text": "¿Qué aprenderás?\nAprenderás algunos lenguajes de programación como Python, JavaScript y TypeScript, así como algunos de los frameworks y bibliotecas más populares como Django, FastAPI y React.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#introducción-general-a-la-programación",
    "href": "unidades/unidad1/1_introduccion.html#introducción-general-a-la-programación",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Introducción General a la Programación",
    "text": "Introducción General a la Programación\nSi más preámbulos, empecemos con la introducción general a la programación.\nEs el proceso de diseñar e implementar un programa de computadora, es decir, un conjunto de instrucciones que le dicen a una computadora qué hacer.\nEs una habilidad muy valiosa en el mundo actual, ya que la mayoría de las tareas que realizamos a diario involucran el uso de computadoras y software.\nNos permite automatizar tareas, resolver problemas de manera eficiente y crear aplicaciones y sistemas que nos ayudan en nuestra vida diaria.\nEn este módulo aprenderemos los fundamentos de la programación utilizando Python, un lenguaje de programación de alto nivel, interpretado y orientado a objetos.\nAntes de introducirnos en el aprendizaje del lenguaje de programación, es importante conocer que debemos desarrollar la lógica de la prograamción, es decir, la habilidad de pensar de manera lógica y estructurada para resolver problemas de manera eficiente.\nAnalicemos el siguiente problema para entender la importancia de la lógica de programación:\n\nProblema: Supongamos que queremos escribir un programa que imprima los números del 1 al 10.\n\n¿Cómo resolverías este problema?\nUna posible solución sería escribir un programa que imprima los números del 1 al 10 de manera secuencial.\nprint(1)\nprint(2)\nprint(3)\nprint(4)\nprint(5)\nprint(6)\nprint(7)\nprint(8)\nprint(9)\nprint(10)\nEn el ejemplo anterior, hemos resuelto el problema de imprimir los números del 1 al 10 de manera secuencial. Sin embargo, esta solución no es escalable, ya que si quisiéramos imprimir los números del 1 al 1000, tendríamos que escribir 1000 instrucciones de impresión.\nUna solución más eficiente sería utilizar un bucle para imprimir los números del 1 al 10 de manera automática.\nfor i in range(1, 11):\n    print(i)\nEn el ejemplo anterior, hemos utilizado un bucle for para imprimir los números del 1 al 10 de manera automática. Esta solución es más eficiente y escalable, ya que podemos cambiar el rango del bucle para imprimir los números del 1 al 1000 sin tener que modificar el código.\n\nProblema: Supongamos que queremos escribir un programa que imprima un saludo personalizado.\n\n¿Cómo resolverías este problema?\nUna posible solución sería escribir un programa que solicite al usuario su nombre y luego imprima un saludo personalizado.\nname = input(\"Ingrese su nombre: \")\nprint(\"Hola, \" + name + \"!\")\nEn el ejemplo anterior, hemos resuelto el problema de imprimir un saludo personalizado solicitando al usuario su nombre. Esta solución es interactiva y personalizada, ya que el saludo se adapta al nombre del usuario.\nEn resumen, la lógica de programación es la habilidad de pensar de manera lógica y estructurada para resolver problemas de manera eficiente. Es fundamental para desarrollar programas y sistemas que nos ayuden en nuestra vida diaria.\nA continuación te ofresco algunas páginas que puedes revisar por tu cuenta y que te permitirán practicar el desarrollo de la lógica de programación:\n\nHackerRank\nLeetCode\nRetod de Programación\nGeeks for Geeks",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#instalación-de-python",
    "href": "unidades/unidad1/1_introduccion.html#instalación-de-python",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Instalación de Python",
    "text": "Instalación de Python\n\n\n\n\nPython\n\n\n\nPara instalar Python en tu computadora, sigue los siguientes pasos:\n\nVe al sitio web oficial de Python en https://www.python.org/.\n\n\n\n\n\nPython\n\n\n\n\nHaz clic en el botón de descarga de Python.\n\n\n\n\n\nPython\n\n\n\n\nSelecciona la versión de Python que deseas instalar (recomendamos la versión más reciente).\nDescarga el instalador de Python para tu sistema operativo (Windows, macOS o Linux).\n\n\n\n\n\nPython\n\n\n\n\nEjecuta el instalador de Python y sigue las instrucciones en pantalla para completar la instalación.\n\n\n\n\n\nPython\n\n\n\nUna vez que hayas instalado Python en tu computadora, puedes verificar que la instalación se haya realizado correctamente abriendo una terminal y ejecutando el siguiente comando:\n\n\n\n\nPython\n\n\n\npython --version\nSi la instalación se realizó correctamente, verás la versión de Python instalada en tu computadora.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#uso-de-repl-pep-8-y-zen-de-python",
    "href": "unidades/unidad1/1_introduccion.html#uso-de-repl-pep-8-y-zen-de-python",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Uso de REPL, PEP 8 y Zen de Python",
    "text": "Uso de REPL, PEP 8 y Zen de Python\nEn esta sección, aprenderemos acerca de REPL, PEP 8 y Zen de Python.\n\nREPL\nREPL (Read-Eval-Print Loop) es un entorno interactivo que permite escribir y ejecutar código de Python de manera interactiva. Es una excelente herramienta para probar y experimentar con el lenguaje de programación.\nPara abrir el REPL de Python, abre una terminal y ejecuta el siguiente comando:\npython\nUna vez que hayas abierto el REPL de Python, puedes escribir y ejecutar código de Python de manera interactiva. Por ejemplo, puedes escribir una expresión matemática y ver el resultado:\n&gt;&gt;&gt; 2 + 2\n&gt;&gt;&gt; 4\n&gt;&gt;&gt; 3 * 4\n&gt;&gt;&gt; 12\n&gt;&gt;&gt; 10 / 2\n&gt;&gt;&gt; 5.0\n&gt;&gt;&gt; 2 ** 3\n&gt;&gt;&gt; 8\n&gt;&gt;&gt; \"Hola, Mundo!\"\n&gt;&gt;&gt; 'Hola, Mundo!'\n&gt;&gt;&gt; \"Hola, \" + \"Mundo!\"\n&gt;&gt;&gt; 'Hola, ' * 3\n&gt;&gt;&gt; 'Hola, Hola, Hola, '\n&gt;&gt;&gt; print(\"Hola, Mundo!\")\n&gt;&gt;&gt; Hola, Mundo!",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#entornos-de-desarrollo",
    "href": "unidades/unidad1/1_introduccion.html#entornos-de-desarrollo",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Entornos de Desarrollo",
    "text": "Entornos de Desarrollo\nUn entorno de desarrollo es un conjunto de herramientas que nos permiten escribir, depurar y ejecutar código de manera eficiente. Es fundamental para desarrollar programas y sistemas de manera efectiva.\nExisten varios entornos de desarrollo que podemos utilizar para programar en Python. Algunos de los más populares son:\n\nIDLE: Es el entorno de desarrollo integrado (IDE) oficial de Python. Viene incluido con la instalación de Python y es una excelente opción para programar en Python.\n\n\n\n\n\nIDLE\n\n\n\n\nPyCharm: Es un IDE de Python desarrollado por JetBrains. Es una excelente opción para programar en Python, ya que ofrece muchas características y herramientas útiles.\n\n\n\n\n\nPyCharm\n\n\n\n\nVisual Studio Code: Es un editor de código desarrollado por Microsoft. Es una excelente opción para programar en Python, ya que ofrece muchas extensiones y herramientas útiles.\n\n\n\n\n\nVisual Studio Code\n\n\n\n\nJupyter Notebook: Es una aplicación web que nos permite crear y compartir documentos interactivos que contienen código de Python, visualizaciones y texto explicativo.\n\n\n\n\n\nJupyter Notebook\n\n\n\nEn este bootcam utilizaremos Visual Studio Code como editor de código para programar en Python. Sin embargo, te recomiendo que explores otros entornos de desarrollo y elijas el que mejor se adapte a tus necesidades y preferencias.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html",
    "title": "Introducción a la Programación con Python",
    "section": "",
    "text": "¿Qué es la programación?\nLa programación es el proceso de diseñar e implementar un programa de computadora. Un programa es un conjunto de instrucciones que le dice a la computadora qué hacer. Estas instrucciones pueden ser escritas en diferentes lenguajes de programación, como Python, Java, C++, entre otros.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-es-python",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-es-python",
    "title": "Introducción a la Programación con Python",
    "section": "¿Qué es Python?",
    "text": "¿Qué es Python?\nPython es un lenguaje de programación de alto nivel, interpretado y orientado a objetos. Fue creado por Guido van Rossum en 1991 y es uno de los lenguajes de programación más populares en la actualidad. Python es conocido por su sintaxis simple y legible, lo que lo hace ideal para principiantes en programación.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#por-qué-aprender-python",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#por-qué-aprender-python",
    "title": "Introducción a la Programación con Python",
    "section": "¿Por qué aprender Python?",
    "text": "¿Por qué aprender Python?\nPython es un lenguaje de programación versátil que se puede utilizar para una amplia variedad de aplicaciones, como desarrollo web, análisis de datos, inteligencia artificial, entre otros. Además, Python es fácil de aprender y de usar, lo que lo convierte en una excelente opción para aquellos que quieren iniciarse en la programación.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-aprenderemos-en-este-bootcamp",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-aprenderemos-en-este-bootcamp",
    "title": "Introducción a la Programación con Python",
    "section": "¿Qué aprenderemos en este bootcamp?",
    "text": "¿Qué aprenderemos en este bootcamp?\nEn este bootcamp aprenderemos los conceptos básicos de programación con Python, incluyendo variables, tipos de datos, operadores, estructuras de control, funciones, entre otros. Al final del bootcamp, tendrás los conocimientos necesarios para crear tus propios programas en Python y continuar tu aprendizaje en programación.\n¡Vamos a empezar!",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#identación-en-python",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#identación-en-python",
    "title": "Introducción a la Programación con Python",
    "section": "Identación en Python",
    "text": "Identación en Python\nPython utiliza la identación para definir bloques de código. La identación es el espacio en blanco al principio de una línea de código y se utiliza para indicar que una línea de código pertenece a un bloque de código. Por ejemplo, en el siguiente código, la línea print(“Hola, mundo!”) está identada con cuatro espacios, lo que indica que pertenece al bloque de código del if.\nif True:\n    print(\"Hola, mundo!\")\nEn el código anterior, la línea print(“Hola, mundo!”) se ejecutará si la condición del if es verdadera. Si la línea no estuviera identada, no se ejecutaría dentro del bloque de código del if.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#comentarios-en-python",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#comentarios-en-python",
    "title": "Introducción a la Programación con Python",
    "section": "Comentarios en python",
    "text": "Comentarios en python\nLos comentarios son líneas de texto que se utilizan para explicar el código y hacerlo más legible. En Python, los comentarios se crean utilizando el símbolo #. Todo lo que sigue al símbolo # en una línea se considera un comentario y no se ejecuta como código.\n# Este es un comentarios\nprint(\"Hola, mundo!\") # Este es otro comentarios\nEn el código anterior, la línea print(“Hola, mundo!”) se ejecutará, pero los comentarios no se ejecutarán.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#variables-y-variables-múltiples",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#variables-y-variables-múltiples",
    "title": "Introducción a la Programación con Python",
    "section": "Variables y Variables Múltiples",
    "text": "Variables y Variables Múltiples\nUna variable es un contenedor que se utiliza para almacenar datos en un programa. En Python, una variable se crea asignando un valor a un nombre de variable. Por ejemplo, en el siguiente código, la variable nombre se crea y se le asigna el valor “Juan”.\nnombre = \"Juan\"\nprint(nombre)\nEn el código anterior, la variable nombre se imprime en la consola y se muestra el valor “Juan”.\nEn Python, también se pueden crear múltiples variables en una sola línea. Por ejemplo, en el siguiente código, se crean tres variables a, b y c y se les asignan los valores 1, 2 y 3 respectivamente.\na, b, c = 1, 2, 3\nprint(a, b, c)\nEn el código anterior, las variables a, b y c se imprimen en la consola y se muestran los valores 1, 2 y 3 respectivamente.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#concatenación-de-cadenas",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#concatenación-de-cadenas",
    "title": "Introducción a la Programación con Python",
    "section": "Concatenación de Cadenas",
    "text": "Concatenación de Cadenas\nLa concatenación de cadenas es la unión de dos o más cadenas en una sola cadena. En Python, se puede concatenar cadenas utilizando el operador +. Por ejemplo, en el siguiente código, se concatenan las cadenas “Hola” y “mundo” en una sola cadena.\nsaludo = \"Hola\" + \"mundo\"\nprint(saludo)\nEn el código anterior, la variable saludo se imprime en la consola y se muestra la cadena “Hola mundo”.\nAlgunos ejemplos adicionales de concatenación de cadenas son:\nnombre = \"Juan\"\napellido = \"Pérez\"\nnombre_completo = nombre + \" \" + apellido\nprint(nombre_completo)\nEn el código anterior, la variable nombre_completo se imprime en la consola y se muestra la cadena “Juan Pérez”.\nedad = 30\nmensaje = \"Tengo \" + str(edad) + \" años\"\nprint(mensaje)\nEn el código anterior, la variable mensaje se imprime en la consola y se muestra la cadena “Tengo 30 años”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#instrucciones",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#instrucciones",
    "title": "Introducción a la Programación con Python",
    "section": "instrucciones",
    "text": "instrucciones\n\nCrea una variable llamada nombre y asígnale tu nombre.\nCrea una variable llamada edad y asígnale tu edad.\nCrea una variable llamada ciudad y asígnale tu ciudad de origen.\nImprime en la consola un mensaje que contenga tu nombre, edad y ciudad de origen utilizando la concatenación de cadenas.\nCrea una variable llamada mensaje y asígnale el siguiente mensaje: “Hola, mi nombre es [nombre], tengo [edad] años y soy de [ciudad].”\nImprime en la consola el mensaje utilizando la variable mensaje.\n\n\n\n🔍 Pistas\n\n\nPara concatenar cadenas en Python, utiliza el operador +.\n\nPara convertir un número entero en una cadena, utiliza la función str().",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-es-la-programación",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-es-la-programación",
    "title": "Introducción a la Programación con Python",
    "section": "¿Qué es la programación?",
    "text": "¿Qué es la programación?\nLa programación es el proceso de diseñar e implementar un programa de computadora. Un programa es un conjunto de instrucciones que le dice a la computadora qué hacer. Estas instrucciones pueden ser escritas en diferentes lenguajes de programación, como Python, Java, C++, entre otros.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#consejos-para-mejorar-la-lógica-de-programación.",
    "href": "unidades/unidad1/1_introduccion.html#consejos-para-mejorar-la-lógica-de-programación.",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "5 Consejos para mejorar la lógica de programación.",
    "text": "5 Consejos para mejorar la lógica de programación.\n\nPractica regularmente: La práctica es fundamental para mejorar la lógica de programación. Dedica tiempo a resolver problemas de programación y desafíos lógicos de manera regular.\nDescompón el problema: Divide los problemas complejos en problemas más pequeños y manejables. Esto te ayudará a abordar el problema de manera más efectiva y eficiente.\nUtiliza pseudocódigo: Antes de escribir código, utiliza pseudocódigo para planificar y diseñar tu solución. Esto te ayudará a visualizar el problema y encontrar una solución más clara.\nComenta tu código: Utiliza comentarios para explicar tu código y hacerlo más legible. Esto te ayudará a entender tu código y a identificar posibles errores.\nColabora con otros: Trabaja en equipo con otros programadores para resolver problemas de programación. La colaboración te permitirá aprender de otros y mejorar tus habilidades de programación.\n\n¡Espero que estos consejos te sean útiles para mejorar tu lógica de programación!",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#conclusiones",
    "href": "unidades/unidad1/1_introduccion.html#conclusiones",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Conclusiones",
    "text": "Conclusiones\nEn este módulo hemos aprendido acerca de la introducción general a la programación, la instalación de Python, el uso de REPL, PEP 8 y Zen de Python, y los entornos de desarrollo que podemos utilizar para programar en Python.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#string-y-números.",
    "href": "unidades/unidad1/3_tipos_de_datos.html#string-y-números.",
    "title": "Tipos de Datos",
    "section": "String y Números.",
    "text": "String y Números.\nLos String y los Números son dos de los tipos de datos más comunes en Python. Los String son secuencias de caracteres, como letras, números y símbolos, que se utilizan para representar texto. Los Números, por otro lado, son valores numéricos, como enteros y decimales, que se utilizan para realizar cálculos matemáticos.\n\nString\nLos String en Python se crean utilizando comillas simples ’ ’ o comillas dobles ” “. Por ejemplo:\nnombre = \"Juan\"\napellido = 'Pérez'\nEn el código anterior, se crean dos variables, nombre y apellido, que contienen los String “Juan” y “Pérez” respectivamente.\n\n\nNúmeros\nLos Números en Python pueden ser enteros o decimales. Los enteros son números enteros, como 1, 2, 3, mientras que los decimales son números con decimales, como 1.5, 2.75, 3.14. Por ejemplo:\nentero = 10\ndecimal = 3.14\nEn el código anterior, se crean dos variables, entero y decimal, que contienen los números 10 y 3.14 respectivamente.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#listas-y-tuplas.",
    "href": "unidades/unidad1/3_tipos_de_datos.html#listas-y-tuplas.",
    "title": "Tipos de Datos",
    "section": "Listas y Tuplas.",
    "text": "Listas y Tuplas.\nLas listas y las tuplas son dos tipos de datos en Python que se utilizan para almacenar colecciones de elementos. Las listas son colecciones ordenadas y modificables de elementos, mientras que las tuplas son colecciones ordenadas e inmutables de elementos.\n\nListas\nLas listas en Python se crean utilizando corchetes [ ] y pueden contener cualquier tipo de datos, como números, String, listas, tuplas, diccionarios, etc. Por ejemplo:\nnumeros = [1, 2, 3, 4, 5]\nnombres = [\"Juan\", \"María\", \"Pedro\"]\nEn el código anterior, se crean dos listas, numeros y nombres, que contienen los números 1, 2, 3, 4, 5 y los nombres “Juan”, “María”, “Pedro” respectivamente.\n\n\nTuplas\nLas tuplas en Python se crean utilizando paréntesis ( ) y pueden contener cualquier tipo de datos, como números, String, listas, tuplas, diccionarios, etc. Por ejemplo:\ncoordenadas = (10, 20)\ncolores = (\"rojo\", \"verde\", \"azul\")\nEn el código anterior, se crean dos tuplas, coordenadas y colores, que contienen las coordenadas (10, 20) y los colores “rojo”, “verde”, “azul” respectivamente.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#diccionarios-y-booleanos.",
    "href": "unidades/unidad1/3_tipos_de_datos.html#diccionarios-y-booleanos.",
    "title": "Tipos de Datos",
    "section": "Diccionarios y Booleanos.",
    "text": "Diccionarios y Booleanos.\nLos diccionarios y los booleanos son dos tipos de datos en Python que se utilizan para almacenar información y tomar decisiones.\n\nDiccionarios\nLos diccionarios en Python se crean utilizando llaves { } y contienen pares de claves y valores. Por ejemplo:\npersona = {\"nombre\": \"Juan\", \"edad\": 30, \"ciudad\": \"Bogotá\"}\nEn el código anterior, se crea un diccionario persona que contiene las claves “nombre”, “edad” y “ciudad” con los valores “Juan”, 30 y “Bogotá” respectivamente.\n\n\nBooleanos\nLos booleanos en Python son valores lógicos que pueden ser True o False. Se utilizan para tomar decisiones en un programa. Por ejemplo:\nes_mayor_de_edad = True\nes_estudiante = False\nEn el código anterior, se crean dos variables booleanas, es_mayor_de_edad y es_estudiante, que contienen los valores True y False respectivamente.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#range",
    "href": "unidades/unidad1/3_tipos_de_datos.html#range",
    "title": "Tipos de Datos",
    "section": "Range",
    "text": "Range\nEl tipo de datos range en Python se utiliza para generar una secuencia de números. Se crea utilizando la función range() y puede contener hasta tres argumentos: start, stop y step. Por ejemplo:\nnumeros = range(1, 10, 2)\nEn el código anterior, se crea un objeto range llamado numeros que contiene los números 1, 3, 5, 7, 9.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#instrucciones",
    "href": "unidades/unidad1/3_tipos_de_datos.html#instrucciones",
    "title": "Tipos de Datos",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nCrea una lista llamada numeros que contenga los números del 1 al 10.\nCrea una tupla llamada colores que contenga los colores “rojo”, “verde” y “azul”.\nCrea un diccionario llamado persona que contenga las claves “nombre”, “edad” y “ciudad” con los valores “Juan”, 30 y “Bogotá” respectivamente.\nCrea una variable booleana llamada es_mayor_de_edad y asígnale el valor True.\nImprime en la consola las variables numeros, colores, persona y es_mayor_de_edad.\n¿Qué tipo de datos es la variable numeros? ¿Y la variable colores? ¿Y la variable persona? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable numeros[0]? ¿Y la variable colores[1]? ¿Y la variable persona[“nombre”]? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable numeros[0:5]? ¿Y la variable colores[1:]? ¿Y la variable persona.keys()? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable range(1, 10, 2)? ¿Y la variable range(10)? ¿Y la variable range(1, 10)? ¿Y la variable range(1, 10, 1)?\n¿Qué tipo de datos es la variable range(1, 10, 2)[0]? ¿Y la variable range(10)[0]? ¿Y la variable range(1, 10)[0]? ¿Y la variable range(1, 10, 1)[0]?\n\n\n\nPosibles soluciones\n\n\nLa variable numeros es una lista.\nLa variable colores es una tupla.\nLa variable persona es un diccionario.\nLa variable es_mayor_de_edad es un booleano.\nLa variable numeros[0] es un número.\nLa variable colores[1] es un String.\nLa variable persona[“nombre”] es un String.\nLa variable numeros[0:5] es una lista.\nLa variable range(1, 10, 2) es un objeto range.\nLa variable range(1, 10, 2)[0] es un número.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html",
    "href": "unidades/unidad1/4_control_de_flujo.html",
    "title": "Control de Flujo",
    "section": "",
    "text": "If y Condicionales\nPara entender el concepto de If y Condicionales en Python, primero debemos comprender qué es una condición. Una condición es una expresión que se evalúa como verdadera o falsa. En Python, las condiciones se utilizan para tomar decisiones en un programa.\nLa estructura básica de un If en Python es la siguiente:\nEn el código anterior, si la condición es verdadera, se ejecutará el bloque de código dentro del If. Si la condición es falsa, el bloque de código no se ejecutará.\nPor ejemplo:\nEn el código anterior, si la variable edad es mayor o igual a 18, se imprimirá en la consola el mensaje “Eres mayor de edad”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#if-elif-y-else",
    "href": "unidades/unidad1/4_control_de_flujo.html#if-elif-y-else",
    "title": "Control de Flujo",
    "section": "If, elif y else",
    "text": "If, elif y else\nAdemás del If, Python también proporciona las palabras clave elif y else para tomar decisiones más complejas en un programa. La estructura básica de un If, elif y else en Python es la siguiente:\nif condicion1:\n    # Bloque de código si la condicion1 es verdadera\nelif condicion2:\n    # Bloque de código si la condicion2 es verdadera\nelse:\n    # Bloque de código si ninguna de las condiciones anteriores es verdadera\nEn el código anterior, si la condicion1 es verdadera, se ejecutará el bloque de código dentro del If. Si la condicion1 es falsa y la condicion2 es verdadera, se ejecutará el bloque de código dentro del elif. Si ninguna de las condiciones anteriores es verdadera, se ejecutará el bloque de código dentro del else.\nPor ejemplo:\nedad = 18\n\nif edad &lt; 18:\n    print(\"Eres menor de edad\")\nelif edad == 18:\n    print(\"Tienes 18 años\")\nelse:\n    print(\"Eres mayor de edad\")\nEn el código anterior, si la variable edad es menor que 18, se imprimirá en la consola el mensaje “Eres menor de edad”. Si la variable edad es igual a 18, se imprimirá en la consola el mensaje “Tienes 18 años”. Si ninguna de las condiciones anteriores es verdadera, se imprimirá en la consola el mensaje “Eres mayor de edad”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#and-y-or",
    "href": "unidades/unidad1/4_control_de_flujo.html#and-y-or",
    "title": "Control de Flujo",
    "section": "And y Or",
    "text": "And y Or\nPara entender el concepto de And y Or en Python, primero debemos comprender cómo funcionan los operadores lógicos. Los operadores lógicos se utilizan para combinar o modificar condiciones en una expresión lógica.\nEn Python, los operadores lógicos más comunes son and y or. El operador and devuelve True si ambas condiciones son verdaderas. El operador or devuelve True si al menos una de las condiciones es verdadera.\nPor ejemplo:\nedad = 18\n\nif edad &gt;= 18 and edad &lt;= 30:\n    print(\"Tienes entre 18 y 30 años\")\nEn el código anterior, si la variable edad es mayor o igual a 18 y menor o igual a 30, se imprimirá en la consola el mensaje “Tienes entre 18 y 30 años”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#while-loop",
    "href": "unidades/unidad1/4_control_de_flujo.html#while-loop",
    "title": "Control de Flujo",
    "section": "While loop",
    "text": "While loop\nPara entender el concepto de While loop en Python, primero debemos comprender qué es un bucle. Un bucle es una estructura de control que se utiliza para repetir una secuencia de instrucciones varias veces. En Python, el bucle while se utiliza para repetir un bloque de código mientras una condición sea verdadera.\nLa estructura básica de un While loop en Python es la siguiente:\nwhile condicion:\n    # Bloque de código que se repetirá mientras la condición sea verdadera\nEn el código anterior, si la condición es verdadera, se ejecutará el bloque de código dentro del While loop. El bloque de código se repetirá hasta que la condición sea falsa.\nPor ejemplo:\ncontador = 0\n\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\nEn el código anterior, se crea una variable contador con el valor 0. Luego, se ejecuta un While loop que imprime el valor del contador y luego incrementa el contador en 1 en cada iteración. El bucle se repetirá hasta que el contador sea mayor o igual a 5.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#while-break-y-continue",
    "href": "unidades/unidad1/4_control_de_flujo.html#while-break-y-continue",
    "title": "Control de Flujo",
    "section": "While, break y continue",
    "text": "While, break y continue\nPara entender el concepto de While, break y continue en Python, primero debemos comprender cómo funcionan las palabras clave break y continue en un bucle while.\nLa palabra clave break se utiliza para salir de un bucle while antes de que la condición sea falsa. La palabra clave continue se utiliza para saltar a la siguiente iteración del bucle while sin ejecutar el resto del bloque de código.\nPor ejemplo:\ncontador = 0\n\nwhile contador &lt; 5:\n    if contador == 3:\n        break\n    print(contador)\n    contador += 1\nEn el código anterior, se crea una variable contador con el valor 0. Luego, se ejecuta un While loop que imprime el valor del contador y luego incrementa el contador en 1 en cada iteración. Si el contador es igual a 3, se ejecuta la palabra clave break y se sale del bucle.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#for-loop",
    "href": "unidades/unidad1/4_control_de_flujo.html#for-loop",
    "title": "Control de Flujo",
    "section": "For loop",
    "text": "For loop\nPara entender el concepto de For loop en Python, primero debemos comprender cómo funciona un bucle for. Un bucle for se utiliza para iterar sobre una secuencia de elementos, como una lista, una tupla, un diccionario, etc.\nLa estructura básica de un For loop en Python es la siguiente:\nfor elemento in secuencia:\n    # Bloque de código que se repetirá para cada elemento en la secuencia\nEn el código anterior, el bucle for recorre cada elemento en la secuencia y ejecuta el bloque de código para cada elemento.\nPor ejemplo:\nnumeros = [1, 2, 3, 4, 5]\n\nfor numero in numeros:\n    print(numero)\nEn el código anterior, se crea una lista numeros con los números del 1 al 5. Luego, se ejecuta un For loop que imprime cada número en la lista.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#if-y-condicionales",
    "href": "unidades/unidad1/4_control_de_flujo.html#if-y-condicionales",
    "title": "Control de Flujo",
    "section": "If y Condicionales",
    "text": "If y Condicionales\nPara entender el concepto de If y Condicionales en Python, primero debemos comprender qué es una condición. Una condición es una expresión que se evalúa como verdadera o falsa. En Python, las condiciones se utilizan para tomar decisiones en un programa.\nLa estructura básica de un If en Python es la siguiente:\nif condicion:\n    # Bloque de código si la condición es verdadera\nEn el código anterior, si la condición es verdadera, se ejecutará el bloque de código dentro del If. Si la condición es falsa, el bloque de código no se ejecutará.\nPor ejemplo:\nedad = 18\n\nif edad &gt;= 18:\n    print(\"Eres mayor de edad\")\nEn el código anterior, si la variable edad es mayor o igual a 18, se imprimirá en la consola el mensaje “Eres mayor de edad”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#instrucciones",
    "href": "unidades/unidad1/4_control_de_flujo.html#instrucciones",
    "title": "Control de Flujo",
    "section": "instrucciones",
    "text": "instrucciones\n\nCrea una lista llamada numeros que contenga los números del 1 al 10.\nCrea una tupla llamada colores que contenga los colores “rojo”, “verde” y “azul”.\nCrea un diccionario llamado persona que contenga las claves “nombre”, “edad” y “ciudad” con los valores “Diego”, 36 y “Quito” respectivamente.\nCrea una variable booleana llamada es_mayor_de_edad y asígnale el valor True.\nImprime en la consola las variables numeros, colores, persona y es_mayor_de_edad.\n¿Qué tipo de datos es la variable numeros? ¿Y la variable colores? ¿Y la variable persona? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable numeros[0]? ¿Y la variable colores[1]? ¿Y la variable persona[“nombre”]? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable numeros[0:5]? ¿Y la variable colores[1:]? ¿Y la variable persona.keys()? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable range(1, 10, 2)? ¿Y la variable range(10)? ¿Y la variable range(1, 10)? ¿Y la variable range(1, 10, 1)?\n¿Qué tipo de datos es la variable range(1, 10, 2)[0]? ¿Y la variable range(10)[0]? ¿Y la variable range(1, 10)[0]? ¿Y la variable range(1, 10, 1)[0]?\n\n\n\nPosibles soluciones\n\n\nLa variable numeros es una lista.\nLa variable colores es una tupla.\nLa variable persona es un diccionario.\nLa variable es_mayor_de_edad es un booleano.\nLa variable numeros[0] es un número.\nLa variable colores[1] es un String.\nLa variable persona[“nombre”] es un String.\nLa variable numeros[0:5] es una lista.\nLa variable range(1, 10, 2) es un objeto range.\nLa variable range(1, 10, 2)[0] es un número.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#introducción-a-funciones",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#introducción-a-funciones",
    "title": "Funciones y recursividad.",
    "section": "Introducción a Funciones",
    "text": "Introducción a Funciones\nPara entender de mejor forma cómo funcionan las funciones en Python, vamos a crear una función que reciba dos números como parámetros y devuelva la suma de los mismos. Por ejemplo:\ndef sumar(a, b):\n    return a + b\nEn el código anterior, se define una función llamada sumar que recibe dos parámetros a y b y devuelve la suma de los mismos. Para llamar a la función sumar y obtener el resultado, se puede hacer de la siguiente manera:\nresultado = sumar(5, 3)\nprint(resultado)\nEn el código anterior, se llama a la función sumar con los números 5 y 3 como parámetros y se imprime en la consola el resultado 8.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#parámetros-y-argumentos",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#parámetros-y-argumentos",
    "title": "Funciones y recursividad.",
    "section": "Parámetros y Argumentos",
    "text": "Parámetros y Argumentos\nEn Python, los parámetros son las variables que se definen en la declaración de la función, mientras que los argumentos son los valores que se pasan a la función cuando se llama. Por ejemplo:\ndef saludar(nombre):\n    print(\"Hola, \" + nombre + \"!\")\nEn el código anterior, la función saludar tiene un parámetro llamado nombre. Para llamar a la función saludar con un argumento, se puede hacer de la siguiente manera:\nsaludar(\"Juan\")\nEn el código anterior, se llama a la función saludar con el argumento “Juan” y se imprime en la consola el mensaje “Hola, Juan!”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#retorno-de-valores",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#retorno-de-valores",
    "title": "Funciones y recursividad.",
    "section": "Retorno de valores",
    "text": "Retorno de valores\nEn Python, las funciones pueden devolver valores utilizando la palabra clave return seguida del valor que se desea devolver. Por ejemplo:\ndef sumar(a, b):\n    return a + b\nEn el código anterior, la función sumar devuelve la suma de los números a y b. Para obtener el valor devuelto por la función, se puede asignar a una variable y luego imprimir en la consola. Por ejemplo:\nresultado = sumar(5, 3)\nprint(resultado)\nEn el código anterior, se llama a la función sumar con los números 5 y 3 como parámetros, se asigna el resultado a la variable resultado y se imprime en la consola el valor 8.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#recursividad",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#recursividad",
    "title": "Funciones y recursividad.",
    "section": "Recursividad",
    "text": "Recursividad\nLa recursividad es un concepto en programación en el que una función se llama a sí misma para resolver un problema más pequeño. Por ejemplo, la función factorial se puede definir de forma recursiva de la siguiente manera:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\nEn el código anterior, la función factorial calcula el factorial de un número n de forma recursiva. Para llamar a la función factorial y obtener el resultado, se puede hacer de la siguiente manera:\nresultado = factorial(5)\nprint(resultado)\nEn el código anterior, se llama a la función factorial con el número 5 como parámetro y se imprime en la consola el resultado 120.\nOtro ejemplo de recursividad es la función Fibonacci, que calcula el enésimo término de la secuencia de Fibonacci de forma recursiva. Por ejemplo:\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\nEn el código anterior, la función fibonacci calcula el enésimo término de la secuencia de Fibonacci de forma recursiva. Para llamar a la función fibonacci y obtener el resultado, se puede hacer de la siguiente manera:\nresultado = fibonacci(10)\nprint(resultado)\nEn el código anterior, se llama a la función fibonacci con el número 10 como parámetro y se imprime en la consola el resultado 55.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#instrucciones",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#instrucciones",
    "title": "Funciones y recursividad.",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nCrea una función llamada saludar que reciba un parámetro nombre y devuelva un saludo personalizado. Por ejemplo, si el nombre es “Juan”, la función debe devolver el mensaje “Hola, Juan!”.\nCrea una función llamada calcular_promedio que reciba una lista de números como parámetro y devuelva el promedio de los mismos. Por ejemplo, si la lista es [1, 2, 3, 4, 5], la función debe devolver 3.0.\nCrea una función llamada es_par que reciba un número como parámetro y devuelva True si el número es par y False si no lo es.\nCrea una función llamada calcular_factorial que reciba un número como parámetro y devuelva el factorial del mismo. Por ejemplo, si el número es 5, la función debe devolver 120.\nCrea una función llamada calcular_fibonacci que reciba un número como parámetro y devuelva el enésimo término de la secuencia de Fibonacci. Por ejemplo, si el número es 10, la función debe devolver 55.\nLlama a cada una de las funciones creadas con valores de ejemplo y muestra los resultados en la consola.\n\n\n\n🔍 Pistas\n\n\nPara definir una función en Python, utiliza la palabra clave def seguida del nombre de la función y los parámetros entre paréntesis.\n\nPara devolver un valor en una función, utiliza la palabra clave return seguida del valor que deseas devolver.\nPara llamar a una función en Python, simplemente escribe el nombre de la función seguido de paréntesis y los argumentos si es necesario.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  }
]