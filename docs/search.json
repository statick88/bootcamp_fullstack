[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "",
    "text": "Bienvenido",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#de-qué-trata-este-bootcamp",
    "href": "index.html#de-qué-trata-este-bootcamp",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿De qué trata este Bootcamp?",
    "text": "¿De qué trata este Bootcamp?\nEste bootcamp está diseñado para enseñarle a desarrollar aplicaciones web modernas utilizando Django, Flask y React.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#para-quién-es-este-bootcamp",
    "href": "index.html#para-quién-es-este-bootcamp",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿Para quién es este bootcamp?",
    "text": "¿Para quién es este bootcamp?\nEste bootcamp es para cualquier persona interesada en aprender a desarrollar aplicaciones web modernas.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#qué-aprenderás",
    "href": "index.html#qué-aprenderás",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿Qué aprenderás?",
    "text": "¿Qué aprenderás?\nAprenderás algunos lenguajes de programación como Python, JavaScript y TypeScript, así como algunos de los frameworks y bibliotecas más populares como Django, FastAPI y React.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#cómo-contribuir",
    "href": "index.html#cómo-contribuir",
    "title": "Bootcamp Desarrollo Web FullStack",
    "section": "¿Cómo contribuir?",
    "text": "¿Cómo contribuir?\nValoramos su contribución a este bootcamp. Si encuentra algún error, desea sugerir mejoras o agregar contenido adicional, me encantaría saber de usted.\nPuede contribuir a través del repositorio en linea, donde puede compartir sus comentarios y sugerencias.\nJuntos, podemos mejorar continuamente este recurso educativo para beneficiar a la comunidad de estudiantes y entusiastas de la programación.\nEste ebook ha sido creado con el objetivo de proporcionar acceso gratuito y universal al conocimiento.\nEstará disponible en línea para cualquier persona, sin importar su ubicación o circunstancias, para acceder y aprender a su propio ritmo.\nPuede descargarlo en formato PDF, Epub o verlo en línea en cualquier momento y lugar.\nEsperamos que disfrute este emocionante viaje de aprendizaje y descubrimiento en el mundo del desarrollo web con Django, FastAPI y React!",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#qué-es-git-y-github",
    "href": "unidades/unidad0/1_git_y_github.html#qué-es-git-y-github",
    "title": "Git y GitHub 🕹️",
    "section": "¿Qué es Git y GitHub? 🕹️",
    "text": "¿Qué es Git y GitHub? 🕹️\n\nGit y GitHub son herramientas ampliamente utilizadas en el desarrollo de software para el control de versiones y la colaboración en proyectos.\nGit es un sistema de control de versiones distribuido que permite realizar un seguimiento de los cambios en el código fuente durante el desarrollo de software. Fue creado por Linus Torvalds en 2005 y se utiliza mediante la línea de comandos o a través de interfaces gráficas de usuario.\nGitHub, por otro lado, es una plataforma de alojamiento de repositorios Git en la nube. Proporciona un entorno colaborativo donde los desarrolladores pueden compartir y trabajar en proyectos de software de forma conjunta. Además, ofrece características adicionales como seguimiento de problemas, solicitudes de extracción y despliegue continuo.\n\nEn este tutorial, aprenderás los conceptos básicos de Git y GitHub, así como su uso en un proyecto de software real.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#quiénes-utilizan-git",
    "href": "unidades/unidad0/1_git_y_github.html#quiénes-utilizan-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Quiénes utilizan Git? 🌍",
    "text": "¿Quiénes utilizan Git? 🌍",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#cómo-se-utiliza-git",
    "href": "unidades/unidad0/1_git_y_github.html#cómo-se-utiliza-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Cómo se utiliza Git? 💻",
    "text": "¿Cómo se utiliza Git? 💻\n\n\n\nGit en Terminal\n\n\nSe utiliza mediante la línea de comandos o a través de interfaces gráficas de usuario. Proporciona comandos para realizar operaciones como:\n\nInicializar un repositorio,\nRealizar cambios,\nRevisar historial,\nFusionar ramas,\nEntre otros.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#para-qué-sirve-git",
    "href": "unidades/unidad0/1_git_y_github.html#para-qué-sirve-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Para qué sirve Git? 📝",
    "text": "¿Para qué sirve Git? 📝\n\n\n\n\nSeguimiento de Cambios con Git\n\n\n\nSirve para realizar un seguimiento de los cambios en el código fuente, coordinar el trabajo entre varios desarrolladores, revertir cambios no deseados y mantener un historial completo de todas las modificaciones realizadas en un proyecto.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#por-qué-utilizar-git",
    "href": "unidades/unidad0/1_git_y_github.html#por-qué-utilizar-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Por qué utilizar Git? 🤔",
    "text": "¿Por qué utilizar Git? 🤔\n\n\n\n\nVentajas de Git\n\n\n\nOfrece varias ventajas, como:\n\nLa capacidad de trabajar de forma distribuida\nLa gestión eficiente de ramas para desarrollar nuevas funcionalidades\nCorregir errores sin afectar la rama principal\nLa posibilidad de colaborar de forma efectiva con otros desarrolladores.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#dónde-puedo-utilizar-git",
    "href": "unidades/unidad0/1_git_y_github.html#dónde-puedo-utilizar-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Dónde puedo utilizar Git? 🌐",
    "text": "¿Dónde puedo utilizar Git? 🌐\n\n\n\n\nGit en Diferentes Sistemas Operativos\n\n\n\nPuede ser utilizado en cualquier sistema operativo, incluyendo Windows, macOS y Linux. Además, es compatible con una amplia variedad de plataformas de alojamiento de repositorios, siendo GitHub una de las más populares.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#pasos-básicos",
    "href": "unidades/unidad0/1_git_y_github.html#pasos-básicos",
    "title": "Git y GitHub 🕹️",
    "section": "Pasos Básicos 📝",
    "text": "Pasos Básicos 📝",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#instalación-de-visual-studio-code",
    "href": "unidades/unidad0/1_git_y_github.html#instalación-de-visual-studio-code",
    "title": "Git y GitHub 🕹️",
    "section": "Instalación de Visual Studio Code 📥",
    "text": "Instalación de Visual Studio Code 📥\n\n\n\nVisual Studio Code",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#introducción",
    "href": "unidades/unidad0/1_git_y_github.html#introducción",
    "title": "Git y GitHub 🕹️",
    "section": "Introducción",
    "text": "Introducción",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#sección-1-modificar-archivos-en-el-repositorio",
    "href": "unidades/unidad0/1_git_y_github.html#sección-1-modificar-archivos-en-el-repositorio",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 1: Modificar Archivos en el Repositorio",
    "text": "Sección 1: Modificar Archivos en el Repositorio\nEn esta sección, aprenderemos cómo realizar cambios en nuestros archivos y reflejarlos en Git.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#mover-cambios-de-local-a-staging",
    "href": "unidades/unidad0/1_git_y_github.html#mover-cambios-de-local-a-staging",
    "title": "Git y GitHub 🕹️",
    "section": "Mover Cambios de Local a Staging:",
    "text": "Mover Cambios de Local a Staging:\n\nAbre el archivo hello_world.py en Visual Studio Code.\nModifica el mensaje de bienvenida a “Bienvenido” en lugar de “Bienvenio”.\nGuarda los cambios y abre una terminal en Visual Studio Code.\n\nHemos corregido un error en nuestro archivo y queremos reflejarlo en Git.\ndef welcome_message():\n    name = input(\"Ingrese su nombre: \")\n    print(\"Bienvenido,\", name, \"al curso de Django y React!\")\n\nif __name__ == \"__main__\":\n    welcome_message()",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#agregar-cambios-de-local-a-staging",
    "href": "unidades/unidad0/1_git_y_github.html#agregar-cambios-de-local-a-staging",
    "title": "Git y GitHub 🕹️",
    "section": "Agregar Cambios de Local a Staging:",
    "text": "Agregar Cambios de Local a Staging:\ngit add hello_world.py\nHemos añadido los cambios al área de preparación y están listos para ser confirmados en el próximo commit.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#sección-2-confirmar-cambios-en-un-commit",
    "href": "unidades/unidad0/1_git_y_github.html#sección-2-confirmar-cambios-en-un-commit",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 2: Confirmar Cambios en un Commit",
    "text": "Sección 2: Confirmar Cambios en un Commit\nEn esta sección, aprenderemos cómo confirmar los cambios en un commit y guardarlos de manera permanente en nuestro repositorio.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#mover-cambios-de-staging-a-commit",
    "href": "unidades/unidad0/1_git_y_github.html#mover-cambios-de-staging-a-commit",
    "title": "Git y GitHub 🕹️",
    "section": "Mover Cambios de Staging a Commit:",
    "text": "Mover Cambios de Staging a Commit:\ngit commit -m \"Corregir mensaje de bienvenida\"\nHemos confirmado los cambios en un commit con un mensaje descriptivo.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#sección-3-creación-y-fusión-de-ramas",
    "href": "unidades/unidad0/1_git_y_github.html#sección-3-creación-y-fusión-de-ramas",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 3: Creación y Fusión de Ramas",
    "text": "Sección 3: Creación y Fusión de Ramas\nEn esta sección, aprenderemos cómo crear y fusionar ramas en Git para desarrollar nuevas funcionalidades de forma aislada.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#crear-una-nueva-rama",
    "href": "unidades/unidad0/1_git_y_github.html#crear-una-nueva-rama",
    "title": "Git y GitHub 🕹️",
    "section": "Crear una Nueva Rama:",
    "text": "Crear una Nueva Rama:\ngit branch feature\nHemos creado una nueva rama llamada “feature” para desarrollar una nueva funcionalidad.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#implementar-funcionalidades-en-la-rama",
    "href": "unidades/unidad0/1_git_y_github.html#implementar-funcionalidades-en-la-rama",
    "title": "Git y GitHub 🕹️",
    "section": "Implementar Funcionalidades en la Rama:",
    "text": "Implementar Funcionalidades en la Rama:\n\nAbre el archivo hello_world.py en Visual Studio Code.\nAñade una nueva función para mostrar un mensaje de despedida.\nGuarda los cambios y abre una terminal en Visual Studio Code.\nAñade los cambios al área de preparación y confírmalos en un commit.\nCambia a la rama principal con git checkout main.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#fusionar-ramas-con-la-rama-principal",
    "href": "unidades/unidad0/1_git_y_github.html#fusionar-ramas-con-la-rama-principal",
    "title": "Git y GitHub 🕹️",
    "section": "Fusionar Ramas con la Rama Principal:",
    "text": "Fusionar Ramas con la Rama Principal:\ngit merge feature\nHemos fusionado la rama “feature” con la rama principal y añadido la nueva funcionalidad al proyecto.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#sección-4-revertir-cambios-en-un-archivo",
    "href": "unidades/unidad0/1_git_y_github.html#sección-4-revertir-cambios-en-un-archivo",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 4: Revertir Cambios en un Archivo",
    "text": "Sección 4: Revertir Cambios en un Archivo\nEn esta sección, aprenderemos cómo revertir cambios en un archivo y deshacerlos en Git.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#revertir-cambios-en-un-archivo",
    "href": "unidades/unidad0/1_git_y_github.html#revertir-cambios-en-un-archivo",
    "title": "Git y GitHub 🕹️",
    "section": "Revertir Cambios en un Archivo:",
    "text": "Revertir Cambios en un Archivo:\ngit reset hello_world.py\nHemos revertido los cambios en el archivo hello_world.py y deshecho las modificaciones realizadas.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/1_git_y_github.html#conclusión",
    "href": "unidades/unidad0/1_git_y_github.html#conclusión",
    "title": "Git y GitHub 🕹️",
    "section": "Conclusión",
    "text": "Conclusión\nEn este tutorial, hemos aprendido a gestionar cambios en nuestro proyecto y moverlos entre diferentes estados en Git. Estos conceptos son fundamentales para trabajar de forma eficiente en proyectos de software y colaborar con otros desarrolladores.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/2_github_classroom.html",
    "href": "unidades/unidad0/2_github_classroom.html",
    "title": "GitHub Classroom 📒",
    "section": "",
    "text": "¿Qué es GitHub Classroom? 🤔",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/2_github_classroom.html#qué-es-github-classroom",
    "href": "unidades/unidad0/2_github_classroom.html#qué-es-github-classroom",
    "title": "GitHub Classroom 📒",
    "section": "",
    "text": "Github Classroom Windows\n\n\n\n\nGitHub Classroom es una extensión de GitHub que permite a los profesores crear y gestionar asignaciones utilizando repositorios de GitHub. Proporciona una forma organizada y eficiente de distribuir tareas a los estudiantes, recopilar y revisar su trabajo, y proporcionar retroalimentación.\n\n\nFuncionalidades Principales ⚙️\n\nCreación de Asignaciones: Los profesores pueden crear tareas y asignaciones directamente desde GitHub Classroom, proporcionando instrucciones detalladas y estableciendo criterios de evaluación.\nDistribución Automatizada: Una vez que se crea una asignación, GitHub Classroom genera automáticamente repositorios privados para cada estudiante o equipo, basándose en una plantilla predefinida.\nSeguimiento de Progreso: Los profesores pueden realizar un seguimiento del progreso de los estudiantes y revisar sus contribuciones a través de solicitudes de extracción (pull requests) y comentarios en el código.\nRevisión y Retroalimentación: Los estudiantes envían sus trabajos a través de solicitudes de extracción, lo que permite a los profesores revisar y proporcionar retroalimentación específica sobre su código.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/2_github_classroom.html#ejemplo-práctico",
    "href": "unidades/unidad0/2_github_classroom.html#ejemplo-práctico",
    "title": "GitHub Classroom 📒",
    "section": "Ejemplo Práctico",
    "text": "Ejemplo Práctico\n\nCreación de una Asignación en GitHub Classroom 📒\n\nIniciar Sesión: Ingresa a GitHub Classroom con tu cuenta de GitHub y selecciona la opción para crear una nueva asignación.\n\n\n\n\n\nDefinir la Tarea: Proporciona instrucciones claras y detalladas sobre la tarea, incluyendo cualquier código base o recursos necesarios. Establece los criterios de evaluación para guiar a los estudiantes.\n\n\n\n\n\nConfigurar la Plantilla: Selecciona una plantilla de repositorio existente o crea una nueva plantilla que servirá como base para los repositorios de los estudiantes.\n\n\n\n\n\nDistribuir la Asignación: Una vez configurada la asignación, comparte el enlace generado con tus estudiantes para que puedan acceder a sus repositorios privados.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0/2_github_classroom.html#trabajo-de-los-estudiantes",
    "href": "unidades/unidad0/2_github_classroom.html#trabajo-de-los-estudiantes",
    "title": "GitHub Classroom 📒",
    "section": "Trabajo de los Estudiantes 🧑‍💻",
    "text": "Trabajo de los Estudiantes 🧑‍💻\n\nAceptar la Asignación: Los estudiantes reciben el enlace de la asignación y aceptan la tarea, lo que les permite crear un repositorio privado basado en la plantilla proporcionada.\n\n\n\n\n\nActualizar el Navegador: Los estudiantes actualizan su navegador para ver el nuevo repositorio creado en su cuenta de GitHub.\n\n\n\n\n\nClonar el Repositorio: Los estudiantes clonan el repositorio asignado en su computadora local utilizando el enlace proporcionado.\n\n\n\n\n\nUtilizar el comando git clone: Aplique el comando git clone para clonar el repositorio en su computadora local.\ngit clone &lt;enlace-del-repositorio&gt;\n\n\n\n\n\nDesarrollar la Tarea: Los estudiantes trabajan en la tarea, realizando los cambios necesarios y realizando commits de manera regular para mantener un historial de su trabajo.\n\n\n\n\n\n\nTip\n\n\n\nPuedes probar el test incorporado con el comando pytest en la terminal, para verificar que el código cumple con los requerimientos\n\n\npytest\nUna vez desarrollado el código de acuerdo a la asignación en local deberían pasar el o los test\n\n\n\n\n\nEnviar la Solicitud de Extracción: Una vez completada la tarea, los estudiantes envían una solicitud de extracción desde su rama hacia la rama principal del repositorio, solicitando la revisión del profesor.\n\n\n\n\n\nUna vez realizado el push se envía al respositorio principal y se ejecutan los test en Github\n\n\n\n\n\n\nTip\n\n\n\nSe recomienda hacer las pruebas en local antes de enviar los cambios al respositorio en Github\n\n\n\n\n\n\n\nEste Action lo que hace es evaluar los cambios realizados\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSe recomienda hacer las pruebas en local antes de enviar los cambios al respositorio en Github\n\n\n\nRevisión y Retroalimentación: Los profesores revisan las solicitudes de extracción, proporcionan comentarios sobre el código y evalúan el trabajo de los estudiantes según los criterios establecidos.\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nGitHub Classroom ofrece una manera eficiente y organizada de administrar tareas y asignaciones en entornos educativos, fomentando la colaboración, el aprendizaje y la retroalimentación efectiva entre profesores y estudiantes.",
    "crumbs": [
      "Unidad 0: Introducción a Git y GitHub",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#introducción-general-a-la-programación",
    "href": "unidades/unidad1/1_introduccion.html#introducción-general-a-la-programación",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Introducción General a la Programación",
    "text": "Introducción General a la Programación\nSi más preámbulos, empecemos con la introducción general a la programación.\nEs el proceso de diseñar e implementar un programa de computadora, es decir, un conjunto de instrucciones que le dicen a una computadora qué hacer.\nEs una habilidad muy valiosa en el mundo actual, ya que la mayoría de las tareas que realizamos a diario involucran el uso de computadoras y software.\nNos permite automatizar tareas, resolver problemas de manera eficiente y crear aplicaciones y sistemas que nos ayudan en nuestra vida diaria.\nEn este módulo aprenderemos los fundamentos de la programación utilizando Python, un lenguaje de programación de alto nivel, interpretado y orientado a objetos.\nAntes de introducirnos en el aprendizaje del lenguaje de programación, es importante conocer que debemos desarrollar la lógica de la prograamción, es decir, la habilidad de pensar de manera lógica y estructurada para resolver problemas de manera eficiente.\nAnalicemos el siguiente problema para entender la importancia de la lógica de programación:\n\nProblema: Supongamos que queremos escribir un programa que imprima los números del 1 al 10.\n\n¿Cómo resolverías este problema?\nUna posible solución sería escribir un programa que imprima los números del 1 al 10 de manera secuencial.\nprint(1)\nprint(2)\nprint(3)\nprint(4)\nprint(5)\nprint(6)\nprint(7)\nprint(8)\nprint(9)\nprint(10)\nEn el ejemplo anterior, hemos resuelto el problema de imprimir los números del 1 al 10 de manera secuencial. Sin embargo, esta solución no es escalable, ya que si quisiéramos imprimir los números del 1 al 1000, tendríamos que escribir 1000 instrucciones de impresión.\nUna solución más eficiente sería utilizar un bucle para imprimir los números del 1 al 10 de manera automática.\nfor i in range(1, 11):\n    print(i)\nEn el ejemplo anterior, hemos utilizado un bucle for para imprimir los números del 1 al 10 de manera automática. Esta solución es más eficiente y escalable, ya que podemos cambiar el rango del bucle para imprimir los números del 1 al 1000 sin tener que modificar el código.\n\nProblema: Supongamos que queremos escribir un programa que imprima un saludo personalizado.\n\n¿Cómo resolverías este problema?\nUna posible solución sería escribir un programa que solicite al usuario su nombre y luego imprima un saludo personalizado.\nname = input(\"Ingrese su nombre: \")\nprint(\"Hola, \" + name + \"!\")\nEn el ejemplo anterior, hemos resuelto el problema de imprimir un saludo personalizado solicitando al usuario su nombre. Esta solución es interactiva y personalizada, ya que el saludo se adapta al nombre del usuario.\nEn resumen, la lógica de programación es la habilidad de pensar de manera lógica y estructurada para resolver problemas de manera eficiente. Es fundamental para desarrollar programas y sistemas que nos ayuden en nuestra vida diaria.\nA continuación te ofresco algunas páginas que puedes revisar por tu cuenta y que te permitirán practicar el desarrollo de la lógica de programación:\n\nHackerRank\nLeetCode\nRetod de Programación\nGeeks for Geeks",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#instalación-de-python",
    "href": "unidades/unidad1/1_introduccion.html#instalación-de-python",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Instalación de Python",
    "text": "Instalación de Python\n\n\n\n\nPython\n\n\n\nPara instalar Python en tu computadora, sigue los siguientes pasos:\n\nVe al sitio web oficial de Python en https://www.python.org/.\n\n\n\n\n\nPython\n\n\n\n\nHaz clic en el botón de descarga de Python.\n\n\n\n\n\nPython\n\n\n\n\nSelecciona la versión de Python que deseas instalar (recomendamos la versión más reciente).\nDescarga el instalador de Python para tu sistema operativo (Windows, macOS o Linux).\n\n\n\n\n\nPython\n\n\n\n\nEjecuta el instalador de Python y sigue las instrucciones en pantalla para completar la instalación.\n\n\n\n\n\nPython\n\n\n\nUna vez que hayas instalado Python en tu computadora, puedes verificar que la instalación se haya realizado correctamente abriendo una terminal y ejecutando el siguiente comando:\n\n\n\n\nPython\n\n\n\npython --version\nSi la instalación se realizó correctamente, verás la versión de Python instalada en tu computadora.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#uso-de-repl-pep-8-y-zen-de-python",
    "href": "unidades/unidad1/1_introduccion.html#uso-de-repl-pep-8-y-zen-de-python",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Uso de REPL, PEP 8 y Zen de Python",
    "text": "Uso de REPL, PEP 8 y Zen de Python\nEn esta sección, aprenderemos acerca de REPL, PEP 8 y Zen de Python.\n\nREPL\nREPL (Read-Eval-Print Loop) es un entorno interactivo que permite escribir y ejecutar código de Python de manera interactiva. Es una excelente herramienta para probar y experimentar con el lenguaje de programación.\nPara abrir el REPL de Python, abre una terminal y ejecuta el siguiente comando:\npython\nUna vez que hayas abierto el REPL de Python, puedes escribir y ejecutar código de Python de manera interactiva. Por ejemplo, puedes escribir una expresión matemática y ver el resultado:\n&gt;&gt;&gt; 2 + 2\n&gt;&gt;&gt; 4\n&gt;&gt;&gt; 3 * 4\n&gt;&gt;&gt; 12\n&gt;&gt;&gt; 10 / 2\n&gt;&gt;&gt; 5.0\n&gt;&gt;&gt; 2 ** 3\n&gt;&gt;&gt; 8\n&gt;&gt;&gt; \"Hola, Mundo!\"\n&gt;&gt;&gt; 'Hola, Mundo!'\n&gt;&gt;&gt; \"Hola, \" + \"Mundo!\"\n&gt;&gt;&gt; 'Hola, ' * 3\n&gt;&gt;&gt; 'Hola, Hola, Hola, '\n&gt;&gt;&gt; print(\"Hola, Mundo!\")\n&gt;&gt;&gt; Hola, Mundo!",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#entornos-de-desarrollo",
    "href": "unidades/unidad1/1_introduccion.html#entornos-de-desarrollo",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Entornos de Desarrollo",
    "text": "Entornos de Desarrollo\nUn entorno de desarrollo es un conjunto de herramientas que nos permiten escribir, depurar y ejecutar código de manera eficiente. Es fundamental para desarrollar programas y sistemas de manera efectiva.\nExisten varios entornos de desarrollo que podemos utilizar para programar en Python. Algunos de los más populares son:\n\nIDLE: Es el entorno de desarrollo integrado (IDE) oficial de Python. Viene incluido con la instalación de Python y es una excelente opción para programar en Python.\n\n\n\n\n\nIDLE\n\n\n\n\nPyCharm: Es un IDE de Python desarrollado por JetBrains. Es una excelente opción para programar en Python, ya que ofrece muchas características y herramientas útiles.\n\n\n\n\n\nPyCharm\n\n\n\n\nVisual Studio Code: Es un editor de código desarrollado por Microsoft. Es una excelente opción para programar en Python, ya que ofrece muchas extensiones y herramientas útiles.\n\n\n\n\n\nVisual Studio Code\n\n\n\n\nJupyter Notebook: Es una aplicación web que nos permite crear y compartir documentos interactivos que contienen código de Python, visualizaciones y texto explicativo.\n\n\n\n\n\nJupyter Notebook\n\n\n\nEn este bootcam utilizaremos Visual Studio Code como editor de código para programar en Python. Sin embargo, te recomiendo que explores otros entornos de desarrollo y elijas el que mejor se adapte a tus necesidades y preferencias.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#consejos-para-mejorar-la-lógica-de-programación.",
    "href": "unidades/unidad1/1_introduccion.html#consejos-para-mejorar-la-lógica-de-programación.",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "5 Consejos para mejorar la lógica de programación.",
    "text": "5 Consejos para mejorar la lógica de programación.\n\nPractica regularmente: La práctica es fundamental para mejorar la lógica de programación. Dedica tiempo a resolver problemas de programación y desafíos lógicos de manera regular.\nDescompón el problema: Divide los problemas complejos en problemas más pequeños y manejables. Esto te ayudará a abordar el problema de manera más efectiva y eficiente.\nUtiliza pseudocódigo: Antes de escribir código, utiliza pseudocódigo para planificar y diseñar tu solución. Esto te ayudará a visualizar el problema y encontrar una solución más clara.\nComenta tu código: Utiliza comentarios para explicar tu código y hacerlo más legible. Esto te ayudará a entender tu código y a identificar posibles errores.\nColabora con otros: Trabaja en equipo con otros programadores para resolver problemas de programación. La colaboración te permitirá aprender de otros y mejorar tus habilidades de programación.\n\n¡Espero que estos consejos te sean útiles para mejorar tu lógica de programación!",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_introduccion.html#conclusiones",
    "href": "unidades/unidad1/1_introduccion.html#conclusiones",
    "title": "Introducción e Instalaciones Necesarias.",
    "section": "Conclusiones",
    "text": "Conclusiones\nEn este módulo hemos aprendido acerca de la introducción general a la programación, la instalación de Python, el uso de REPL, PEP 8 y Zen de Python, y los entornos de desarrollo que podemos utilizar para programar en Python.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introducción e Instalaciones Necesarias.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-es-la-programación",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-es-la-programación",
    "title": "Introducción a la Programación con Python",
    "section": "¿Qué es la programación?",
    "text": "¿Qué es la programación?\nLa programación es el proceso de diseñar e implementar un programa de computadora. Un programa es un conjunto de instrucciones que le dice a la computadora qué hacer. Estas instrucciones pueden ser escritas en diferentes lenguajes de programación, como Python, Java, C++, entre otros.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-es-python",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-es-python",
    "title": "Introducción a la Programación con Python",
    "section": "¿Qué es Python?",
    "text": "¿Qué es Python?\nPython es un lenguaje de programación de alto nivel, interpretado y orientado a objetos. Fue creado por Guido van Rossum en 1991 y es uno de los lenguajes de programación más populares en la actualidad. Python es conocido por su sintaxis simple y legible, lo que lo hace ideal para principiantes en programación.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#por-qué-aprender-python",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#por-qué-aprender-python",
    "title": "Introducción a la Programación con Python",
    "section": "¿Por qué aprender Python?",
    "text": "¿Por qué aprender Python?\nPython es un lenguaje de programación versátil que se puede utilizar para una amplia variedad de aplicaciones, como desarrollo web, análisis de datos, inteligencia artificial, entre otros. Además, Python es fácil de aprender y de usar, lo que lo convierte en una excelente opción para aquellos que quieren iniciarse en la programación.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-aprenderemos-en-este-bootcamp",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#qué-aprenderemos-en-este-bootcamp",
    "title": "Introducción a la Programación con Python",
    "section": "¿Qué aprenderemos en este bootcamp?",
    "text": "¿Qué aprenderemos en este bootcamp?\nEn este bootcamp aprenderemos los conceptos básicos de programación con Python, incluyendo variables, tipos de datos, operadores, estructuras de control, funciones, entre otros. Al final del bootcamp, tendrás los conocimientos necesarios para crear tus propios programas en Python y continuar tu aprendizaje en programación.\n¡Vamos a empezar!",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#identación-en-python",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#identación-en-python",
    "title": "Introducción a la Programación con Python",
    "section": "Identación en Python",
    "text": "Identación en Python\nPython utiliza la identación para definir bloques de código. La identación es el espacio en blanco al principio de una línea de código y se utiliza para indicar que una línea de código pertenece a un bloque de código. Por ejemplo, en el siguiente código, la línea print(“Hola, mundo!”) está identada con cuatro espacios, lo que indica que pertenece al bloque de código del if.\nif True:\n    print(\"Hola, mundo!\")\nEn el código anterior, la línea print(“Hola, mundo!”) se ejecutará si la condición del if es verdadera. Si la línea no estuviera identada, no se ejecutaría dentro del bloque de código del if.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#comentarios-en-python",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#comentarios-en-python",
    "title": "Introducción a la Programación con Python",
    "section": "Comentarios en python",
    "text": "Comentarios en python\nLos comentarios son líneas de texto que se utilizan para explicar el código y hacerlo más legible. En Python, los comentarios se crean utilizando el símbolo #. Todo lo que sigue al símbolo # en una línea se considera un comentario y no se ejecuta como código.\n# Este es un comentarios\nprint(\"Hola, mundo!\") # Este es otro comentarios\nEn el código anterior, la línea print(“Hola, mundo!”) se ejecutará, pero los comentarios no se ejecutarán.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#variables-y-variables-múltiples",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#variables-y-variables-múltiples",
    "title": "Introducción a la Programación con Python",
    "section": "Variables y Variables Múltiples",
    "text": "Variables y Variables Múltiples\nUna variable es un contenedor que se utiliza para almacenar datos en un programa. En Python, una variable se crea asignando un valor a un nombre de variable. Por ejemplo, en el siguiente código, la variable nombre se crea y se le asigna el valor “Juan”.\nnombre = \"Juan\"\nprint(nombre)\nEn el código anterior, la variable nombre se imprime en la consola y se muestra el valor “Juan”.\nEn Python, también se pueden crear múltiples variables en una sola línea. Por ejemplo, en el siguiente código, se crean tres variables a, b y c y se les asignan los valores 1, 2 y 3 respectivamente.\na, b, c = 1, 2, 3\nprint(a, b, c)\nEn el código anterior, las variables a, b y c se imprimen en la consola y se muestran los valores 1, 2 y 3 respectivamente.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#concatenación-de-cadenas",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#concatenación-de-cadenas",
    "title": "Introducción a la Programación con Python",
    "section": "Concatenación de Cadenas",
    "text": "Concatenación de Cadenas\nLa concatenación de cadenas es la unión de dos o más cadenas en una sola cadena. En Python, se puede concatenar cadenas utilizando el operador +. Por ejemplo, en el siguiente código, se concatenan las cadenas “Hola” y “mundo” en una sola cadena.\nsaludo = \"Hola\" + \"mundo\"\nprint(saludo)\nEn el código anterior, la variable saludo se imprime en la consola y se muestra la cadena “Hola mundo”.\nAlgunos ejemplos adicionales de concatenación de cadenas son:\nnombre = \"Juan\"\napellido = \"Pérez\"\nnombre_completo = nombre + \" \" + apellido\nprint(nombre_completo)\nEn el código anterior, la variable nombre_completo se imprime en la consola y se muestra la cadena “Juan Pérez”.\nedad = 30\nmensaje = \"Tengo \" + str(edad) + \" años\"\nprint(mensaje)\nEn el código anterior, la variable mensaje se imprime en la consola y se muestra la cadena “Tengo 30 años”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_introduccion_a_la_programacion.html#instrucciones",
    "href": "unidades/unidad1/2_introduccion_a_la_programacion.html#instrucciones",
    "title": "Introducción a la Programación con Python",
    "section": "instrucciones",
    "text": "instrucciones\n\nCrea una variable llamada nombre y asígnale tu nombre.\nCrea una variable llamada edad y asígnale tu edad.\nCrea una variable llamada ciudad y asígnale tu ciudad de origen.\nImprime en la consola un mensaje que contenga tu nombre, edad y ciudad de origen utilizando la concatenación de cadenas.\nCrea una variable llamada mensaje y asígnale el siguiente mensaje: “Hola, mi nombre es [nombre], tengo [edad] años y soy de [ciudad].”\nImprime en la consola el mensaje utilizando la variable mensaje.\n\n\n\n🔍 Pistas\n\n\nPara concatenar cadenas en Python, utiliza el operador +.\n\nPara convertir un número entero en una cadena, utiliza la función str().",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introducción a la Programación con Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#string-y-números.",
    "href": "unidades/unidad1/3_tipos_de_datos.html#string-y-números.",
    "title": "Tipos de Datos",
    "section": "String y Números.",
    "text": "String y Números.\nLos String y los Números son dos de los tipos de datos más comunes en Python. Los String son secuencias de caracteres, como letras, números y símbolos, que se utilizan para representar texto. Los Números, por otro lado, son valores numéricos, como enteros y decimales, que se utilizan para realizar cálculos matemáticos.\n\nString\nLos String en Python se crean utilizando comillas simples ’ ’ o comillas dobles ” “. Por ejemplo:\nnombre = \"Juan\"\napellido = 'Pérez'\nEn el código anterior, se crean dos variables, nombre y apellido, que contienen los String “Juan” y “Pérez” respectivamente.\n\n\nNúmeros\nLos Números en Python pueden ser enteros o decimales. Los enteros son números enteros, como 1, 2, 3, mientras que los decimales son números con decimales, como 1.5, 2.75, 3.14. Por ejemplo:\nentero = 10\ndecimal = 3.14\nEn el código anterior, se crean dos variables, entero y decimal, que contienen los números 10 y 3.14 respectivamente.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#listas-y-tuplas.",
    "href": "unidades/unidad1/3_tipos_de_datos.html#listas-y-tuplas.",
    "title": "Tipos de Datos",
    "section": "Listas y Tuplas.",
    "text": "Listas y Tuplas.\nLas listas y las tuplas son dos tipos de datos en Python que se utilizan para almacenar colecciones de elementos. Las listas son colecciones ordenadas y modificables de elementos, mientras que las tuplas son colecciones ordenadas e inmutables de elementos.\n\nListas\nLas listas en Python se crean utilizando corchetes [ ] y pueden contener cualquier tipo de datos, como números, String, listas, tuplas, diccionarios, etc. Por ejemplo:\nnumeros = [1, 2, 3, 4, 5]\nnombres = [\"Juan\", \"María\", \"Pedro\"]\nEn el código anterior, se crean dos listas, numeros y nombres, que contienen los números 1, 2, 3, 4, 5 y los nombres “Juan”, “María”, “Pedro” respectivamente.\n\n\nTuplas\nLas tuplas en Python se crean utilizando paréntesis ( ) y pueden contener cualquier tipo de datos, como números, String, listas, tuplas, diccionarios, etc. Por ejemplo:\ncoordenadas = (10, 20)\ncolores = (\"rojo\", \"verde\", \"azul\")\nEn el código anterior, se crean dos tuplas, coordenadas y colores, que contienen las coordenadas (10, 20) y los colores “rojo”, “verde”, “azul” respectivamente.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#diccionarios-y-booleanos.",
    "href": "unidades/unidad1/3_tipos_de_datos.html#diccionarios-y-booleanos.",
    "title": "Tipos de Datos",
    "section": "Diccionarios y Booleanos.",
    "text": "Diccionarios y Booleanos.\nLos diccionarios y los booleanos son dos tipos de datos en Python que se utilizan para almacenar información y tomar decisiones.\n\nDiccionarios\nLos diccionarios en Python se crean utilizando llaves { } y contienen pares de claves y valores. Por ejemplo:\npersona = {\"nombre\": \"Juan\", \"edad\": 30, \"ciudad\": \"Bogotá\"}\nEn el código anterior, se crea un diccionario persona que contiene las claves “nombre”, “edad” y “ciudad” con los valores “Juan”, 30 y “Bogotá” respectivamente.\n\n\nBooleanos\nLos booleanos en Python son valores lógicos que pueden ser True o False. Se utilizan para tomar decisiones en un programa. Por ejemplo:\nes_mayor_de_edad = True\nes_estudiante = False\nEn el código anterior, se crean dos variables booleanas, es_mayor_de_edad y es_estudiante, que contienen los valores True y False respectivamente.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#range",
    "href": "unidades/unidad1/3_tipos_de_datos.html#range",
    "title": "Tipos de Datos",
    "section": "Range",
    "text": "Range\nEl tipo de datos range en Python se utiliza para generar una secuencia de números. Se crea utilizando la función range() y puede contener hasta tres argumentos: start, stop y step. Por ejemplo:\nnumeros = range(1, 10, 2)\nEn el código anterior, se crea un objeto range llamado numeros que contiene los números 1, 3, 5, 7, 9.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_tipos_de_datos.html#instrucciones",
    "href": "unidades/unidad1/3_tipos_de_datos.html#instrucciones",
    "title": "Tipos de Datos",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nCrea una lista llamada numeros que contenga los números del 1 al 10.\nCrea una tupla llamada colores que contenga los colores “rojo”, “verde” y “azul”.\nCrea un diccionario llamado persona que contenga las claves “nombre”, “edad” y “ciudad” con los valores “Juan”, 30 y “Bogotá” respectivamente.\nCrea una variable booleana llamada es_mayor_de_edad y asígnale el valor True.\nImprime en la consola las variables numeros, colores, persona y es_mayor_de_edad.\n¿Qué tipo de datos es la variable numeros? ¿Y la variable colores? ¿Y la variable persona? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable numeros[0]? ¿Y la variable colores[1]? ¿Y la variable persona[“nombre”]? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable numeros[0:5]? ¿Y la variable colores[1:]? ¿Y la variable persona.keys()? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable range(1, 10, 2)? ¿Y la variable range(10)? ¿Y la variable range(1, 10)? ¿Y la variable range(1, 10, 1)?\n¿Qué tipo de datos es la variable range(1, 10, 2)[0]? ¿Y la variable range(10)[0]? ¿Y la variable range(1, 10)[0]? ¿Y la variable range(1, 10, 1)[0]?\n\n\n\nPosibles soluciones\n\n\nLa variable numeros es una lista.\nLa variable colores es una tupla.\nLa variable persona es un diccionario.\nLa variable es_mayor_de_edad es un booleano.\nLa variable numeros[0] es un número.\nLa variable colores[1] es un String.\nLa variable persona[“nombre”] es un String.\nLa variable numeros[0:5] es una lista.\nLa variable range(1, 10, 2) es un objeto range.\nLa variable range(1, 10, 2)[0] es un número.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Tipos de Datos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#if-y-condicionales",
    "href": "unidades/unidad1/4_control_de_flujo.html#if-y-condicionales",
    "title": "Control de Flujo",
    "section": "If y Condicionales",
    "text": "If y Condicionales\nPara entender el concepto de If y Condicionales en Python, primero debemos comprender qué es una condición. Una condición es una expresión que se evalúa como verdadera o falsa. En Python, las condiciones se utilizan para tomar decisiones en un programa.\nLa estructura básica de un If en Python es la siguiente:\nif condicion:\n    # Bloque de código si la condición es verdadera\nEn el código anterior, si la condición es verdadera, se ejecutará el bloque de código dentro del If. Si la condición es falsa, el bloque de código no se ejecutará.\nPor ejemplo:\nedad = 18\n\nif edad &gt;= 18:\n    print(\"Eres mayor de edad\")\nEn el código anterior, si la variable edad es mayor o igual a 18, se imprimirá en la consola el mensaje “Eres mayor de edad”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#if-elif-y-else",
    "href": "unidades/unidad1/4_control_de_flujo.html#if-elif-y-else",
    "title": "Control de Flujo",
    "section": "If, elif y else",
    "text": "If, elif y else\nAdemás del If, Python también proporciona las palabras clave elif y else para tomar decisiones más complejas en un programa. La estructura básica de un If, elif y else en Python es la siguiente:\nif condicion1:\n    # Bloque de código si la condicion1 es verdadera\nelif condicion2:\n    # Bloque de código si la condicion2 es verdadera\nelse:\n    # Bloque de código si ninguna de las condiciones anteriores es verdadera\nEn el código anterior, si la condicion1 es verdadera, se ejecutará el bloque de código dentro del If. Si la condicion1 es falsa y la condicion2 es verdadera, se ejecutará el bloque de código dentro del elif. Si ninguna de las condiciones anteriores es verdadera, se ejecutará el bloque de código dentro del else.\nPor ejemplo:\nedad = 18\n\nif edad &lt; 18:\n    print(\"Eres menor de edad\")\nelif edad == 18:\n    print(\"Tienes 18 años\")\nelse:\n    print(\"Eres mayor de edad\")\nEn el código anterior, si la variable edad es menor que 18, se imprimirá en la consola el mensaje “Eres menor de edad”. Si la variable edad es igual a 18, se imprimirá en la consola el mensaje “Tienes 18 años”. Si ninguna de las condiciones anteriores es verdadera, se imprimirá en la consola el mensaje “Eres mayor de edad”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#and-y-or",
    "href": "unidades/unidad1/4_control_de_flujo.html#and-y-or",
    "title": "Control de Flujo",
    "section": "And y Or",
    "text": "And y Or\nPara entender el concepto de And y Or en Python, primero debemos comprender cómo funcionan los operadores lógicos. Los operadores lógicos se utilizan para combinar o modificar condiciones en una expresión lógica.\nEn Python, los operadores lógicos más comunes son and y or. El operador and devuelve True si ambas condiciones son verdaderas. El operador or devuelve True si al menos una de las condiciones es verdadera.\nPor ejemplo:\nedad = 18\n\nif edad &gt;= 18 and edad &lt;= 30:\n    print(\"Tienes entre 18 y 30 años\")\nEn el código anterior, si la variable edad es mayor o igual a 18 y menor o igual a 30, se imprimirá en la consola el mensaje “Tienes entre 18 y 30 años”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#while-loop",
    "href": "unidades/unidad1/4_control_de_flujo.html#while-loop",
    "title": "Control de Flujo",
    "section": "While loop",
    "text": "While loop\nPara entender el concepto de While loop en Python, primero debemos comprender qué es un bucle. Un bucle es una estructura de control que se utiliza para repetir una secuencia de instrucciones varias veces. En Python, el bucle while se utiliza para repetir un bloque de código mientras una condición sea verdadera.\nLa estructura básica de un While loop en Python es la siguiente:\nwhile condicion:\n    # Bloque de código que se repetirá mientras la condición sea verdadera\nEn el código anterior, si la condición es verdadera, se ejecutará el bloque de código dentro del While loop. El bloque de código se repetirá hasta que la condición sea falsa.\nPor ejemplo:\ncontador = 0\n\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\nEn el código anterior, se crea una variable contador con el valor 0. Luego, se ejecuta un While loop que imprime el valor del contador y luego incrementa el contador en 1 en cada iteración. El bucle se repetirá hasta que el contador sea mayor o igual a 5.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#while-break-y-continue",
    "href": "unidades/unidad1/4_control_de_flujo.html#while-break-y-continue",
    "title": "Control de Flujo",
    "section": "While, break y continue",
    "text": "While, break y continue\nPara entender el concepto de While, break y continue en Python, primero debemos comprender cómo funcionan las palabras clave break y continue en un bucle while.\nLa palabra clave break se utiliza para salir de un bucle while antes de que la condición sea falsa. La palabra clave continue se utiliza para saltar a la siguiente iteración del bucle while sin ejecutar el resto del bloque de código.\nPor ejemplo:\ncontador = 0\n\nwhile contador &lt; 5:\n    if contador == 3:\n        break\n    print(contador)\n    contador += 1\nEn el código anterior, se crea una variable contador con el valor 0. Luego, se ejecuta un While loop que imprime el valor del contador y luego incrementa el contador en 1 en cada iteración. Si el contador es igual a 3, se ejecuta la palabra clave break y se sale del bucle.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#for-loop",
    "href": "unidades/unidad1/4_control_de_flujo.html#for-loop",
    "title": "Control de Flujo",
    "section": "For loop",
    "text": "For loop\nPara entender el concepto de For loop en Python, primero debemos comprender cómo funciona un bucle for. Un bucle for se utiliza para iterar sobre una secuencia de elementos, como una lista, una tupla, un diccionario, etc.\nLa estructura básica de un For loop en Python es la siguiente:\nfor elemento in secuencia:\n    # Bloque de código que se repetirá para cada elemento en la secuencia\nEn el código anterior, el bucle for recorre cada elemento en la secuencia y ejecuta el bloque de código para cada elemento.\nPor ejemplo:\nnumeros = [1, 2, 3, 4, 5]\n\nfor numero in numeros:\n    print(numero)\nEn el código anterior, se crea una lista numeros con los números del 1 al 5. Luego, se ejecuta un For loop que imprime cada número en la lista.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/4_control_de_flujo.html#instrucciones",
    "href": "unidades/unidad1/4_control_de_flujo.html#instrucciones",
    "title": "Control de Flujo",
    "section": "instrucciones",
    "text": "instrucciones\n\nCrea una lista llamada numeros que contenga los números del 1 al 10.\nCrea una tupla llamada colores que contenga los colores “rojo”, “verde” y “azul”.\nCrea un diccionario llamado persona que contenga las claves “nombre”, “edad” y “ciudad” con los valores “Diego”, 36 y “Quito” respectivamente.\nCrea una variable booleana llamada es_mayor_de_edad y asígnale el valor True.\nImprime en la consola las variables numeros, colores, persona y es_mayor_de_edad.\n¿Qué tipo de datos es la variable numeros? ¿Y la variable colores? ¿Y la variable persona? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable numeros[0]? ¿Y la variable colores[1]? ¿Y la variable persona[“nombre”]? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable numeros[0:5]? ¿Y la variable colores[1:]? ¿Y la variable persona.keys()? ¿Y la variable es_mayor_de_edad?\n¿Qué tipo de datos es la variable range(1, 10, 2)? ¿Y la variable range(10)? ¿Y la variable range(1, 10)? ¿Y la variable range(1, 10, 1)?\n¿Qué tipo de datos es la variable range(1, 10, 2)[0]? ¿Y la variable range(10)[0]? ¿Y la variable range(1, 10)[0]? ¿Y la variable range(1, 10, 1)[0]?\n\n\n\nPosibles soluciones\n\n\nLa variable numeros es una lista.\nLa variable colores es una tupla.\nLa variable persona es un diccionario.\nLa variable es_mayor_de_edad es un booleano.\nLa variable numeros[0] es un número.\nLa variable colores[1] es un String.\nLa variable persona[“nombre”] es un String.\nLa variable numeros[0:5] es una lista.\nLa variable range(1, 10, 2) es un objeto range.\nLa variable range(1, 10, 2)[0] es un número.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Control de Flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#introducción-a-funciones",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#introducción-a-funciones",
    "title": "Funciones y recursividad.",
    "section": "Introducción a Funciones",
    "text": "Introducción a Funciones\nPara entender de mejor forma cómo funcionan las funciones en Python, vamos a crear una función que reciba dos números como parámetros y devuelva la suma de los mismos. Por ejemplo:\ndef sumar(a, b):\n    return a + b\nEn el código anterior, se define una función llamada sumar que recibe dos parámetros a y b y devuelve la suma de los mismos. Para llamar a la función sumar y obtener el resultado, se puede hacer de la siguiente manera:\nresultado = sumar(5, 3)\nprint(resultado)\nEn el código anterior, se llama a la función sumar con los números 5 y 3 como parámetros y se imprime en la consola el resultado 8.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#parámetros-y-argumentos",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#parámetros-y-argumentos",
    "title": "Funciones y recursividad.",
    "section": "Parámetros y Argumentos",
    "text": "Parámetros y Argumentos\nEn Python, los parámetros son las variables que se definen en la declaración de la función, mientras que los argumentos son los valores que se pasan a la función cuando se llama. Por ejemplo:\ndef saludar(nombre):\n    print(\"Hola, \" + nombre + \"!\")\nEn el código anterior, la función saludar tiene un parámetro llamado nombre. Para llamar a la función saludar con un argumento, se puede hacer de la siguiente manera:\nsaludar(\"Juan\")\nEn el código anterior, se llama a la función saludar con el argumento “Juan” y se imprime en la consola el mensaje “Hola, Juan!”.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#retorno-de-valores",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#retorno-de-valores",
    "title": "Funciones y recursividad.",
    "section": "Retorno de valores",
    "text": "Retorno de valores\nEn Python, las funciones pueden devolver valores utilizando la palabra clave return seguida del valor que se desea devolver. Por ejemplo:\ndef sumar(a, b):\n    return a + b\nEn el código anterior, la función sumar devuelve la suma de los números a y b. Para obtener el valor devuelto por la función, se puede asignar a una variable y luego imprimir en la consola. Por ejemplo:\nresultado = sumar(5, 3)\nprint(resultado)\nEn el código anterior, se llama a la función sumar con los números 5 y 3 como parámetros, se asigna el resultado a la variable resultado y se imprime en la consola el valor 8.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#recursividad",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#recursividad",
    "title": "Funciones y recursividad.",
    "section": "Recursividad",
    "text": "Recursividad\nLa recursividad es un concepto en programación en el que una función se llama a sí misma para resolver un problema más pequeño. Por ejemplo, la función factorial se puede definir de forma recursiva de la siguiente manera:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\nEn el código anterior, la función factorial calcula el factorial de un número n de forma recursiva. Para llamar a la función factorial y obtener el resultado, se puede hacer de la siguiente manera:\nresultado = factorial(5)\nprint(resultado)\nEn el código anterior, se llama a la función factorial con el número 5 como parámetro y se imprime en la consola el resultado 120.\nOtro ejemplo de recursividad es la función Fibonacci, que calcula el enésimo término de la secuencia de Fibonacci de forma recursiva. Por ejemplo:\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\nEn el código anterior, la función fibonacci calcula el enésimo término de la secuencia de Fibonacci de forma recursiva. Para llamar a la función fibonacci y obtener el resultado, se puede hacer de la siguiente manera:\nresultado = fibonacci(10)\nprint(resultado)\nEn el código anterior, se llama a la función fibonacci con el número 10 como parámetro y se imprime en la consola el resultado 55.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/5_funciones_y_recursividad.html#instrucciones",
    "href": "unidades/unidad1/5_funciones_y_recursividad.html#instrucciones",
    "title": "Funciones y recursividad.",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nCrea una función llamada saludar que reciba un parámetro nombre y devuelva un saludo personalizado. Por ejemplo, si el nombre es “Juan”, la función debe devolver el mensaje “Hola, Juan!”.\nCrea una función llamada calcular_promedio que reciba una lista de números como parámetro y devuelva el promedio de los mismos. Por ejemplo, si la lista es [1, 2, 3, 4, 5], la función debe devolver 3.0.\nCrea una función llamada es_par que reciba un número como parámetro y devuelva True si el número es par y False si no lo es.\nCrea una función llamada calcular_factorial que reciba un número como parámetro y devuelva el factorial del mismo. Por ejemplo, si el número es 5, la función debe devolver 120.\nCrea una función llamada calcular_fibonacci que reciba un número como parámetro y devuelva el enésimo término de la secuencia de Fibonacci. Por ejemplo, si el número es 10, la función debe devolver 55.\nLlama a cada una de las funciones creadas con valores de ejemplo y muestra los resultados en la consola.\n\n\n\n🔍 Pistas\n\n\nPara definir una función en Python, utiliza la palabra clave def seguida del nombre de la función y los parámetros entre paréntesis.\n\nPara devolver un valor en una función, utiliza la palabra clave return seguida del valor que deseas devolver.\nPara llamar a una función en Python, simplemente escribe el nombre de la función seguido de paréntesis y los argumentos si es necesario.",
    "crumbs": [
      "Unidad 1: Introducción e Instalaciones Necesarias",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Funciones y recursividad.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_programacion_orientada_a_objetos.html#objetos-y-clases",
    "href": "unidades/unidad2/1_programacion_orientada_a_objetos.html#objetos-y-clases",
    "title": "Programacion Orientada a Objetos.",
    "section": "Objetos y Clases",
    "text": "Objetos y Clases\nLos objetos son instancias de una clase. Una clase es una plantilla para crear objetos. Los objetos tienen atributos y métodos.",
    "crumbs": [
      "Unidad 2: Programación Orientada a Objetos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programacion Orientada a Objetos.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_programacion_orientada_a_objetos.html#atributos",
    "href": "unidades/unidad2/1_programacion_orientada_a_objetos.html#atributos",
    "title": "Programacion Orientada a Objetos.",
    "section": "Atributos",
    "text": "Atributos\nLos atributos son variables que pertenecen a un objeto. Los atributos pueden ser de cualquier tipo de datos.\nEjemplo:\nclass Coche:\n    def __init__(self, marca, modelo, color):\n        self.marca = marca\n        self.modelo = modelo\n        self.color = color\nEn el código anterior se definen tres atributos marca, modelo y color.",
    "crumbs": [
      "Unidad 2: Programación Orientada a Objetos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programacion Orientada a Objetos.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_programacion_orientada_a_objetos.html#qué-es-self",
    "href": "unidades/unidad2/1_programacion_orientada_a_objetos.html#qué-es-self",
    "title": "Programacion Orientada a Objetos.",
    "section": "¿Qué es self?",
    "text": "¿Qué es self?\nSelf es una palabra reservada en Python que se refiere al objeto actual. Se utiliza para acceder a los atributos y métodos de un objeto.\nEn el ejemplo anterior, self.marca, self.modelo y self.color se refieren a los atributos de un objeto.\nEjemplo:\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n    def saludar(self):\n        print(f\"Hola, mi nombre es {self.nombre} y tengo {self.edad} años\")\nEn el ejemplo anterior se define una clase Persona con dos atributos nombre y edad. Además, se define un método saludar que imprime un mensaje con los atributos nombre y edad.",
    "crumbs": [
      "Unidad 2: Programación Orientada a Objetos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programacion Orientada a Objetos.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_programacion_orientada_a_objetos.html#métodos",
    "href": "unidades/unidad2/1_programacion_orientada_a_objetos.html#métodos",
    "title": "Programacion Orientada a Objetos.",
    "section": "Métodos",
    "text": "Métodos\nLos métodos son funciones que pertenecen a un objeto. Los métodos pueden acceder a los atributos de un objeto.\nEjemplo:\nclass Coche:\n    def acelerar(self):\n        print(f\"El coche {self.marca} {self.modelo} de color {self.color} está acelerando\")\n\n    def frenar(self):\n        print(f\"El coche {self.marca} {self.modelo} de color {self.color} está frenando\")\nEn el código anterior se definen dos métodos acelerar y frenar.",
    "crumbs": [
      "Unidad 2: Programación Orientada a Objetos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programacion Orientada a Objetos.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_programacion_orientada_a_objetos.html#self-eliminar-propiedades-y-objetos",
    "href": "unidades/unidad2/1_programacion_orientada_a_objetos.html#self-eliminar-propiedades-y-objetos",
    "title": "Programacion Orientada a Objetos.",
    "section": "Self, Eliminar Propiedades y Objetos",
    "text": "Self, Eliminar Propiedades y Objetos\nEl primer parámetro de un método es self. Self es una referencia al objeto actual. Se utiliza para acceder a los atributos y métodos de un objeto.\nEjemplo:\nclass Coche:\n    def __init__(self, marca, modelo, color):\n        self.marca = marca\n        self.modelo = modelo\n        self.color = color\n\n    def acelerar(self):\n        print(f\"El coche {self.marca} {self.modelo} de color {self.color} está acelerando\")\n\n    def frenar(self):\n        print(f\"El coche {self.marca} {self.modelo} de color {self.color} está frenando\")\n\n    def __del__(self):\n        print(f\"El coche {self.marca} {self.modelo} de color {self.color} ha sido eliminado\")\n\ncoche = Coche(\"Toyota\", \"Corolla\", \"Rojo\")\nprint(coche)\ncoche.acelerar()\ncoche.frenar()\ndel coche\nEn el código anterior se define un método especial del que se llama cuando un objeto es eliminado. Luego se crea un objeto coche de la clase Coche y se elimina el objeto coche.\nPor otra parte la palabra reservada self se utiliza para acceder a los atributos y métodos de un objeto.\nTambien se está creando una instancia de la clase Coche y se está eliminando el objeto coche.",
    "crumbs": [
      "Unidad 2: Programación Orientada a Objetos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programacion Orientada a Objetos.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_programacion_orientada_a_objetos.html#eliminar-propiedades-y-objetos",
    "href": "unidades/unidad2/1_programacion_orientada_a_objetos.html#eliminar-propiedades-y-objetos",
    "title": "Programacion Orientada a Objetos.",
    "section": "Eliminar Propiedades y Objetos",
    "text": "Eliminar Propiedades y Objetos\nPara eliminar Propiedades y Objetos se utiliza la palabra reservada del.\nComo observamos en el código anterior la propiedad del se utiliza para eliminar un objeto.\nEjemplo:\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n    def __del__(self):\n        print(f\"La persona {self.nombre} ha sido eliminada\")\n\npersona = Persona(\"Juan Perez\", 30)\nprint(persona)\ndel persona\nEn el código anterior se define un método especial del que se llama cuando un objeto es eliminado. Luego se crea un objeto persona de la clase Persona y se elimina el objeto persona. Al final obtendremos un mensaje como este:\nLa persona Juan Perez ha sido eliminada",
    "crumbs": [
      "Unidad 2: Programación Orientada a Objetos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programacion Orientada a Objetos.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_programacion_orientada_a_objetos.html#herencia-polimorfismo-y-encapsulación",
    "href": "unidades/unidad2/1_programacion_orientada_a_objetos.html#herencia-polimorfismo-y-encapsulación",
    "title": "Programacion Orientada a Objetos.",
    "section": "Herencia, Polimorfismo y Encapsulación",
    "text": "Herencia, Polimorfismo y Encapsulación\n\nHerencia\nLa herencia es una característica de la POO que permite crear una nueva clase a partir de una clase existente. La nueva clase hereda los atributos y métodos de la clase existente.\nEjemplo:\nclass Animal:\n    def __init__(self, nombre):\n        self.nombre = nombre\n    def hablar(self):\n        pass\n\nclass Perro(Animal):\n    def hablar(self):\n        print(f\"{self.nombre} dice guau\")\n\nclass Gato(Animal):\n    def hablar(self):\n      print(f\"{self.nombre} dice miau\")\n\n\nanimal = Perro(\"Firulais\")\nanimal2 = Gato(\"Garfield\")\nEn el código anterior se define una clase Animal con un método hablar. Luego se definen dos clases Perro y Gato que heredan de la clase Animal y sobrescriben el método hablar.\n\n\nPolimorfismo\nEl polimorfismo es una característica de la POO que permite que un objeto se computadora de diferentes maneras dependiendo del contexto.\nEjemplo:\nclass Deporte:\n    def jugar(self):\n        pass\n\nclass Futbol(Deporte):\n    def jugar(self):\n        print(f\"Jugando futbol\")\n\nclass Baloncesto(Deporte):\n    def jugar(self):\n      print(f\"Jugando baloncesto\")\n\nclass Tenis(Deporte):\n    def jugar(self):\n      print(f\"Jugando tenis\")\n\ndeporte = Futbol()\ndeporte.jugar()\n\ndeporte1 = Baloncesto()\ndeporte1.jugar()\n\ndeporte2 = Tenis()\ndeporte2.jugar()\nEn el ejemplo anterior se define una clase Deporte con un método jugar. Luego se definen tres clases Futbol, Baloncesto y Tenis que heredan de la clase Deporte y sobrescriben el método jugar. Aunque los tres objetos son de la clase Deporte, se comportan de manera diferente.\n\n\nEncapsulación\nLa encapsulación es una característica de la POO que permite ocultar los detalles de implementación de un objeto. Los atributos y métodos de un objeto pueden ser públicos, protegidos o privados.\nEjemplo:\nclass CuentaBancaria:\n    def __init__(self, nombre, saldo):\n        self.nombre = nombre\n        self.__saldo = saldo  # El saldo es privado\n\n    def depositar(self, cantidad):\n        self.__saldo += cantidad\n\n    def retirar(self, cantidad):\n        if cantidad &lt;= self.__saldo:\n            self.__saldo -= cantidad\n        else:\n            print(\"Fondos insuficientes\")\n\n    def obtener_saldo(self):\n        return self.__saldo  # Método para acceder al saldo\n\n    def __str__(self):\n        return f\"Cuenta Bancaria de {self.nombre} con saldo {self.__saldo}\"\n\n\n# Creación de instancias de cuentas bancarias\ncuenta1 = CuentaBancaria(\"Juan Perez\", 1000)\ncuenta2 = CuentaBancaria(\"Maria Lopez\", 2000)\ncuenta3 = CuentaBancaria(\"Pedro Ramirez\", 3000)\n\n# Operaciones en las cuentas\ncuenta1.depositar(500)\ncuenta1.retirar(200)\nprint(cuenta1.nombre)\nprint(cuenta1.obtener_saldo())  # Acceso al saldo a través de un método\n\nprint(cuenta2.nombre)\ncuenta2.depositar(500)\ncuenta2.retirar(200)\nprint(cuenta2.obtener_saldo())\n\nprint(cuenta3.nombre)\ncuenta3.depositar(1000)\ncuenta3.retirar(500)\nprint(cuenta3.obtener_saldo())\nLa encapsulación es un principio fundamental en la programación orientada a objetos que permite proteger los datos de un objeto. En Python, se logra utilizando variables privadas y métodos de acceso para controlar cómo se accede y modifica la información dentro de una clase.\nEn el ejemplo de CuentaBancaria, el atributo saldo es privado (indicado por el prefijo ) y no puede ser accedido directamente desde fuera de la clase. Esto significa que no se puede escribir cuenta1.__saldo para leer o modificar el saldo.\nPara interactuar con el saldo de manera segura, la clase proporciona métodos públicos como depositar y retirar, que permiten modificar el saldo solo bajo condiciones controladas. En este caso, se agregó un método obtener_saldo para acceder al saldo de manera segura. Este enfoque evita que se altere el saldo de forma indebida y permite implementar lógica adicional, como verificar si hay fondos suficientes antes de retirar una cantidad.\nEste ejemplo demuestra cómo la encapsulación ayuda a proteger y controlar el acceso a los datos de un objeto, asegurando que su estado interno se gestione correctamente.",
    "crumbs": [
      "Unidad 2: Programación Orientada a Objetos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programacion Orientada a Objetos.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_programacion_orientada_a_objetos.html#actividad",
    "href": "unidades/unidad2/1_programacion_orientada_a_objetos.html#actividad",
    "title": "Programacion Orientada a Objetos.",
    "section": "Actividad",
    "text": "Actividad\n\nCrear una clase Persona con los atributos nombre, edad y sexo.\nCrear una clase Estudiante que herede de la clase Persona con los atributos carnet y carrera.\nCrear una clase Profesor que herede de la clase Persona con los atributos codigo y especialidad.\nCrear una clase Curso con los atributos nombre, codigo y profesor.\nCrear una clase Universidad con los atributos nombre y cursos.\nCrear un objeto universidad de la clase Universidad con el nombre Universidad de El Salvador y los siguientes cursos:\n\n\nCurso 1: Nombre: Matematicas, Codigo: MAT101, Profesor: Juan Perez\nCurso 2: Nombre: Fisica, Codigo: FIS101, Profesor: Maria Lopez\nCurso 3: Nombre: Quimica, Codigo: QUI101, Profesor: Pedro Ramirez\n\n\nImprimir el objeto universidad.\nCrear un objeto estudiante de la clase Estudiante con los siguientes atributos:\n\n\nNombre: Carlos Perez\nEdad: 20\nSexo: Masculino\nCarnet: 202010101\nCarrera: Ingenieria en Sistemas Informaticos\n\n\nImprimir el objeto estudiante.\nCrear un objeto profesor de la clase Profesor con los siguientes atributos:\n\n\nNombre: Juan Perez\nEdad: 30\nSexo: Masculino\nCodigo: 202020202\nEspecialidad: Matematicas\n\n\nImprimir el objeto profesor.\nCrear un objeto curso de la clase Curso con los siguientes atributos:\n\n\nNombre: Matematicas\nCodigo: MAT101\nProfesor: Juan Perez\n\n\nImprimir el objeto curso.\nAgregar el objeto curso al objeto universidad.\nImprimir el objeto universidad.\nCrear un objeto curso de la clase Curso con los siguientes atributos:\n\n\nNombre: Fisica\nCodigo: FIS101\nProfesor: Maria Lopez\n\n\n\nRespuesta\n\nclass Persona:\n    def __init__(self, nombre, edad, sexo):\n        self.nombre = nombre\n        self.edad = edad\n        self.sexo = sexo\n\nclass Estudiante(Persona):\n    def __init__(self, nombre, edad, sexo, carnet, carrera):\n        super().__init__(nombre, edad, sexo)\n        self.carnet = carnet\n        self.carrera = carrera\n\nclass Profesor(Persona):\n    def __init__(self, nombre, edad, sexo, codigo, especialidad):\n        super().__init__(nombre, edad, sexo)\n        self.codigo = codigo\n        self.especialidad = especialidad\n\nclass Curso:\n    def __init__(self, nombre, codigo, profesor):\n        self.nombre = nombre\n        self.codigo = codigo\n        self.profesor = profesor\n\nclass Universidad\n    def __init__(self, nombre):\n        self.nombre = nombre\n        self.cursos = []\n\nuniversidad = Universidad(\"Universidad de las Fuerzas Armadas ESPE\")\ncurso1 = Curso(\"Matematicas\", \"MAT101\", \"Juan Perez\")\ncurso2 = Curso(\"Fisica\", \"FIS101\", \"Maria Lopez\")\ncurso3 = Curso(\"Quimica\", \"QUI101\", \"Pedro Ramirez\")\nuniversidad.cursos.append(curso1)\nuniversidad.cursos.append(curso2)\nuniversidad.cursos.append(curso3)\nprint(universidad)\n\nestudiante = Estudiante(\"Carlos Perez\", 20, \"Masculino\", \"202010101\", \"Ingenieria en Sistemas Informaticos\")\nprint(estudiante)\n\nprofesor = Profesor(\"Juan Perez\", 30, \"Masculino\", \"202020202\", \"Matematicas\")\nprint(profesor)\n\ncurso = Curso(\"Matematicas\", \"MAT101\", \"Juan Perez\")\nprint(curso)\n\ncurso = Curso(\"Fisica\", \"FIS101\", \"Maria Lopez\")\nuniversidad.cursos.append(curso)\nprint(universidad)",
    "crumbs": [
      "Unidad 2: Programación Orientada a Objetos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programacion Orientada a Objetos.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#introducción-a-módulos",
    "href": "unidades/unidad3/1_modulos_python.html#introducción-a-módulos",
    "title": "Módulos",
    "section": "Introducción a Módulos",
    "text": "Introducción a Módulos\nEn Python, un módulo es un archivo que contiene código, generalmente funciones, clases, y variables, que puedes importar y reutilizar en diferentes partes de tu programa. Esto te ayuda a dividir tu código en partes organizadas y reutilizables, haciendo que el desarrollo sea más eficiente y limpio.\nPor ejemplo, imagina que quieres crear un módulo para realizar saludos y otro para despedidas:\nEjemplo 1: Módulo de saludo\n# modulo_saludo.py\ndef saludar():\n    print(\"Hola Mundo\")\nEjemplo 2: Módulo de despedida\n# modulo_despedida.py\ndef despedir():\n    print(\"Adiós Mundo\")\nEstos módulos contienen funciones que realizan acciones específicas: uno saluda y el otro se despide. Ahora veremos cómo crear y utilizar módulos en Python.",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#creando-módulos-personalizados",
    "href": "unidades/unidad3/1_modulos_python.html#creando-módulos-personalizados",
    "title": "Módulos",
    "section": "Creando Módulos Personalizados",
    "text": "Creando Módulos Personalizados\nPara crear un módulo en Python, solo necesitas crear un archivo .py y definir en él las funciones o clases que deseas usar. A continuación, veamos cómo crear módulos más complejos.\nEjemplo: Módulo de saludo con nombre\n# modulo_saludar.py\n\ndef saludar(nombre):\n    print(f\"Hola, {nombre}!\")\nEste módulo acepta un argumento nombre, permitiéndote personalizar el saludo.",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#usando-módulos-en-un-archivo-principal",
    "href": "unidades/unidad3/1_modulos_python.html#usando-módulos-en-un-archivo-principal",
    "title": "Módulos",
    "section": "Usando Módulos en un Archivo Principal",
    "text": "Usando Módulos en un Archivo Principal\nPara utilizar los módulos que has creado, necesitas importarlos en un archivo principal. Aquí, importamos ambos módulos anteriores y ejecutamos las funciones:\n# main.py\nimport modulo_saludar\nimport modulo_despedida\n\nif __name__ == \"__main__\":\n    modulo_saludar.saludar(\"Juan\")\n    modulo_despedida.despedir()\nEn este ejemplo, importamos los módulos modulo_saludar y modulo_despedida y usamos las funciones saludar y despedir.",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#importando-y-renombrando-módulos",
    "href": "unidades/unidad3/1_modulos_python.html#importando-y-renombrando-módulos",
    "title": "Módulos",
    "section": "Importando y Renombrando Módulos",
    "text": "Importando y Renombrando Módulos\nA veces, renombrar un módulo en el momento de importarlo hace el código más claro. Esto se logra con la palabra clave as:\n# main.py\nimport modulo_saludar as saludo\nimport modulo_despedida as despedida\n\nsaludo.saludar(\"Ana\")\ndespedida.despedir()\nEsto permite usar nombres cortos y descriptivos en el código.",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#importando-funciones-específicas-de-un-módulo",
    "href": "unidades/unidad3/1_modulos_python.html#importando-funciones-específicas-de-un-módulo",
    "title": "Módulos",
    "section": "Importando Funciones Específicas de un Módulo",
    "text": "Importando Funciones Específicas de un Módulo\nSi solo necesitas una función de un módulo, puedes importarla directamente:\nfrom modulo_saludar import saludar\n\nsaludar(\"Carlos\")\nAquí importamos únicamente la función saludar de modulo_saludar, sin necesidad de importar el módulo completo.",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#usando-módulos-externos-con-pip",
    "href": "unidades/unidad3/1_modulos_python.html#usando-módulos-externos-con-pip",
    "title": "Módulos",
    "section": "Usando Módulos Externos con pip",
    "text": "Usando Módulos Externos con pip\nAdemás de tus propios módulos, Python permite instalar y utilizar módulos externos usando pip, el gestor de paquetes de Python. Veamos un ejemplo con numpy, un módulo popular para trabajar con arreglos numéricos.",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#instalando-un-módulo-con-pip",
    "href": "unidades/unidad3/1_modulos_python.html#instalando-un-módulo-con-pip",
    "title": "Módulos",
    "section": "Instalando un módulo con pip",
    "text": "Instalando un módulo con pip\npip install numpy",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#usando-el-módulo-instalado",
    "href": "unidades/unidad3/1_modulos_python.html#usando-el-módulo-instalado",
    "title": "Módulos",
    "section": "Usando el módulo instalado",
    "text": "Usando el módulo instalado\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\nprint(a)\nEste ejemplo muestra cómo instalar y utilizar numpy para crear un arreglo.",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#instalando-otro-módulo",
    "href": "unidades/unidad3/1_modulos_python.html#instalando-otro-módulo",
    "title": "Módulos",
    "section": "Instalando otro módulo",
    "text": "Instalando otro módulo\nAdemás de numpy, Python tiene muchos módulos útiles para diferentes tareas. Por ejemplo, emojis es un módulo que te permite imprimir emojis en la consola.\npip install emojis",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_modulos_python.html#usando-el-módulo-emojis",
    "href": "unidades/unidad3/1_modulos_python.html#usando-el-módulo-emojis",
    "title": "Módulos",
    "section": "Usando el módulo emojis",
    "text": "Usando el módulo emojis\nimport emojis\n\nprint(emojis.encode(\":smile:\"))\nEste ejemplo muestra cómo instalar y utilizar el módulo emojis para imprimir emojis en la consola.\n😄",
    "crumbs": [
      "Unidad 3: Módulos y Paquetes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/1_docker.html#ejemplos",
    "href": "unidades/unidad4/1_docker.html#ejemplos",
    "title": "Docker",
    "section": "Ejemplos:",
    "text": "Ejemplos:\nDescargar una imagen:\ndocker pull docker/getting-started\n\n\n\nEste comando descarga la imagen getting-started desde el registro público de Docker.\nCorrer un contenedor en el puerto 80:\ndocker run -d -p 80:80 docker/getting-started\n\n\n\nEste comando ejecuta un contenedor desenlazado en segundo plano (-d) y mapea el puerto 80 de la máquina host al puerto 80 del contenedor (-p 80:80).\nDescargar una imagen desde un registro.\n\n\n\n\n\n\nTip\n\n\n\nEl comando -p se utiliza para mapear los puertos de la máquina host al contenedor, muchas personas consideran que significa “puerto”. Sin embargo en realidad significa “publicar” o “publicar puerto”.",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/1_docker.html#comandos-básicos-de-docker",
    "href": "unidades/unidad4/1_docker.html#comandos-básicos-de-docker",
    "title": "Docker",
    "section": "Comandos básicos de Docker:",
    "text": "Comandos básicos de Docker:\nDescargar una imagen desde un registro.\ndocker pull &lt;IMAGE_NAME:TAG&gt;\nListar las imágenes descargadas.\ndocker images\nListar contenedores en ejecución.\ndocker ps\nListar todos los contenedores, incluyendo los detenidos.\ndocker ps -a\nEjecutar un contenedor a partir de una imagen.\ndocker run -d -p &lt;HOST_PORT&gt;:&lt;CONTAINER_PORT&gt; &lt;IMAGE_NAME:TAG&gt;\nDetener un contenedor en ejecución.\ndocker stop &lt;CONTAINER_ID&gt;\nIniciar un contenedor detenio.\ndocker start &lt;CONTAINER_ID&gt;\nEliminar un contenedor.\ndocker rm &lt;CONTAINER_ID&gt;\nEliminar una imagen.\ndocker rmi &lt;IMAGE_NAME:TAG&gt;",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/1_docker.html#atajos-y-comandos-adicionales",
    "href": "unidades/unidad4/1_docker.html#atajos-y-comandos-adicionales",
    "title": "Docker",
    "section": "Atajos y Comandos Adicionales:",
    "text": "Atajos y Comandos Adicionales:\nEjecutar comandos dentro de un contenedor en ejecución.\ndocker inspect &lt;CONTAINER_ID or IMAGE_NAME:TAG&gt;\nVer los logs de un contenedor.\ndocker logs &lt;CONTAINER_ID&gt;\nUtilizar Docker Compose para gestionar aplicaciones multi-contenedor.\ndocker-compose up -d",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/1_docker.html#práctica",
    "href": "unidades/unidad4/1_docker.html#práctica",
    "title": "Docker",
    "section": "Práctica:",
    "text": "Práctica:\n\nDescarga la imagen de Nginx desde el registro público.\nCrea y ejecuta un contenedor de Nginx en el puerto 8080.\nDetén y elimina el contenedor creado\nUtiliza los comandos para detener y eliminar un contenedor.\n\n\n\nResolución de la Actividad Práctica\n\n\nAbre tu terminal o línea de comandos.\nDescarga la imagen de Nginx desde el registro público de Docker:\n\ndocker pull nginx\n\nCrea y ejecuta un contenedor de Nginx en el puerto 8080:\n\ndocker run -d -p 8080:80 nginx\nElige un puerto en tu máquina local (por ejemplo, 8080) para mapearlo al puerto 80 del contenedor.\n\nVerifica que el contenedor esté en ejecución:\n\ndocker ps\n\nSi el contenedor está en ejecución, detenlo utilizando el siguiente comando:\n\ndocker stop &lt;CONTAINER_ID&gt;\nReemplaza  con el ID real del contenedor que obtuviste en el paso anterior.\n\nElimina el contenedor detenido:\n\ndocker rm &lt;CONTAINER_ID&gt;\nReemplaza  con el ID real del contenedor.\n\n\n\n\n\n\n\nTip\n\n\n\nCombina los comandos docker ps, docker stop, y docker rm para gestionar contenedores eficientemente.\n¡Practica estos pasos para familiarizarte con el ciclo de vida de los contenedores Docker!",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/2_docker_compose.html#introducción",
    "href": "unidades/unidad4/2_docker_compose.html#introducción",
    "title": "Dockerfile y Docker Compose",
    "section": "Introducción",
    "text": "Introducción\nDockerfile y Docker Compose son herramientas esenciales para la construcción y gestión de aplicaciones Docker. Un Dockerfile es un archivo de texto que define cómo se construirá una imagen Docker, mientras que Docker Compose es una herramienta para definir y gestionar aplicaciones Docker con múltiples contenedores. En esta lección, aprenderemos cómo usar Dockerfile y Docker Compose para personalizar imágenes Docker y orquestar servicios en un entorno multi-contenedor.\nA continuación veremos algunos conceptos básicos sobre Dockerfile y Docker Compose.\n\nDockerfile\nUn Dockerfile es un archivo de texto que contiene una serie de instrucciones para construir una imagen Docker. Estas instrucciones incluyen la configuración del sistema operativo base, la instalación de paquetes y dependencias, la configuración de variables de entorno y la definición de comandos para ejecutar la aplicación.\n\n\nDocker Compose\nDocker Compose es una herramienta para definir y gestionar aplicaciones Docker con múltiples contenedores. Permite definir servicios, redes y volúmenes en un archivo YAML y orquestar la ejecución de los contenedores en un entorno de desarrollo o producción.",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dockerfile y Docker Compose</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/2_docker_compose.html#ejemplos",
    "href": "unidades/unidad4/2_docker_compose.html#ejemplos",
    "title": "Dockerfile y Docker Compose",
    "section": "Ejemplos:",
    "text": "Ejemplos:\nEn este ejemplo vamos a dockerizar una aplicación nodejs con un servidor sencillo en express.\nEmpezamos por el código de nuestra aplicación:\nPara ello creamos un nuevo proyecto nodejs con el siguiente comando:\nnpm init -y\nInstalamos el paquete express con el siguiente comando:\nnpm install express\nCreamos los siguientes archivos:\n\nserver.js\npackage.json\nDockerfile\ndocker-compose.yml\n\n\nserver.js\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) =&gt; {\n  res.send('Hello, World!');\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n\n\nDockerfile\n# Use the official Node.js 14 image\nFROM node:14\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the dependencies file to the working directory\nCOPY package.json .\n\n# Install dependencies\nRUN npm install\n\n# Copy the app code to the working directory\nCOPY . .\n\n# Expose the port the app runs on\nEXPOSE 3000\n\n# Serve the app\nCMD [\"node\", \"server.js\"]\n\n\ndocker-compose.yml\nservices:\n  myapp:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\nEn este ejemplo, el Dockerfile define una imagen Docker para una aplicación Node.js. El archivo docker-compose.yml define un servicio llamado myapp que utiliza el Dockerfile.nodejs para construir la imagen y expone el puerto 3000 para acceder a la aplicación.\n\n\n\n\n\n\nTip\n\n\n\nEl puerto del lado izquierdo de los 2 puntos en el archivo docker-compose.yml es el puerto en el host, mientras que el puerto del lado derecho es el puerto en el contenedor.\n\n\nPara probar nuestro ejemplo, ejecutamos el siguiente comando:\ndocker-compose up -d\nEsto construirá la imagen Docker y ejecutará el contenedor en segundo plano. Podemos acceder a la aplicación en http://localhost:3000.\nPara verificar que el contenedor está en ejecución, ejecutamos el siguiente comando:\ndocker ps\nPodemos utilizar una aplicación como Thunder Client o Postman para enviar una solicitud HTTP a la aplicación y ver la respuesta.\nPara detener y eliminar el contenedor, ejecutamos el siguiente comando:\ndocker-compose down\n\n\n\n\n\n\nTip\n\n\n\nRecuerda: La imagen que se crea a partir del Dockerfile se almacena en el caché local de Docker. Si realizas cambios en el Dockerfile y deseas reconstruir la imagen, puedes usar el comando\ndocker-compose up --build",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dockerfile y Docker Compose</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/2_docker_compose.html#práctica",
    "href": "unidades/unidad4/2_docker_compose.html#práctica",
    "title": "Dockerfile y Docker Compose",
    "section": "Práctica:",
    "text": "Práctica:\n\nCrea un Dockerfile para una aplicación Python simple.\nConfigura un archivo docker-compose.yml para ejecutar la aplicación.\n\n\n\nResolución de la Actividad Práctica\n\nEjemplo de aplicación Python simple:\n# app.py\nprint(\"Hello, World!\")\nEjemplo de Dockerfile:\nFROM python:3.12\nWORKDIR /app\nCOPY . .\nCMD [\"python\", \"app.py\"]\nEjemplo de docker-compose.yml:\nservices:\n  myapp:\n    build:\n      context: .\n      dockerfile: Dockerfile.python\n    image: my-python-app",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dockerfile y Docker Compose</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/3_DevContainers.html#qué-son-los-devcontainers",
    "href": "unidades/unidad4/3_DevContainers.html#qué-son-los-devcontainers",
    "title": "DevContainers",
    "section": "¿Qué son los DevContainers?",
    "text": "¿Qué son los DevContainers?\nLos DevContainers son entornos de desarrollo basados en contenedores Docker que permiten a los desarrolladores crear, compartir y ejecutar aplicaciones en un entorno aislado y portátil. Los DevContainers proporcionan un entorno de desarrollo consistente y reproducible, lo que garantiza que las aplicaciones se ejecuten de la misma manera en diferentes entornos.\nLos DevContainers son una herramienta poderosa para el desarrollo de software, ya que permiten a los desarrolladores trabajar en un entorno aislado y preconfigurado, sin tener que preocuparse por la configuración del sistema operativo, las dependencias de software o las bibliotecas de terceros.",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>DevContainers</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/3_DevContainers.html#instalación-y-uso",
    "href": "unidades/unidad4/3_DevContainers.html#instalación-y-uso",
    "title": "DevContainers",
    "section": "Instalación y Uso",
    "text": "Instalación y Uso\nPara utilizar DevContainers, es necesario tener instalado Docker en el sistema. Una vez instalado Docker, se puede instalar una extensión de DevContainers en el editor de código favorito, como Visual Studio Code, y utilizarla para crear, compartir y ejecutar DevContainers.\n\n\n\n\nDevContainer en Visual Studio Code",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>DevContainers</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/3_DevContainers.html#ejemplos",
    "href": "unidades/unidad4/3_DevContainers.html#ejemplos",
    "title": "DevContainers",
    "section": "Ejemplos:",
    "text": "Ejemplos:\nEn la parte inferior izquierda de Visual Studio Code existe un botón que hace referencia a los DevContainers, al hacer clic en este botón se abrirá un menú con las opciones para crear, abrir o configurar un DevContainer.\nEn este punto damos clic en New DevContainer y seleccionamos la opción Python 3. Esto creará un archivo .devcontainer con la configuración necesaria para ejecutar la aplicación en un contenedor Docker.\n\n\n\n\nNew DevContainer\n\n\n\nEn la imágen anterior podemos observar el menú de DevContainer, en esta sección es posible seleccionar New DevContainer. Al seleccionar esta opción se desplegará un menú con las opciones de configuración de DevContainer.\n\n\n\n\nPython 3 DevContainer\n\n\n\nEn la imágen anterior se describe la búsqueda de diferentes plantillas, en este caso seleccionamos Python 3. Al seleccionar esta opción se creará un archivo .devcontainer con la configuración necesaria para ejecutar la aplicación en un contenedor Docker.\n\n\n\n\nCreate DevContainer\n\n\n\nFinalmente seleccoinamos la opción Create DevContainers para crear el archivo .devcontainer con la configuración necesaria para ejecutar la aplicación en un contenedor Docker.\n\n\n\n\nCreate DevContainer\n\n\n\nAhora solo resta esperar como se observa en la imágen anterior la creación del DevContainer. Una vez finalizado el proceso, se abrirá una nueva ventana con el archivo main.py en el editor de código y se mostrará un mensaje en la parte inferior derecha indicando que se está construyendo el contenedor.\n\n\n\n\nPython in DevContainer\n\n\n\nCreamos una aplicación Hola Mundo en Python para ser ejecutada en un DevContainer:\nCrear un archivo main.py con el siguiente código:\n# main.py\nprint(\"Hola, Mundo!\")\nUna vez creado el DevContainer se mostrará un mensaje en la parte inferior derecha indicando que se está construyendo el contenedor. En este punto se puede ejecutar la aplicación en el contenedor Docker haciendo clic en el botón Run en la parte superior derecha.\nPuedes verificar que la versión de python en el terminal del DevContainer creado es diferente a la del Sistema Operativo en el que te encuentres y la instalación global del sistema.",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>DevContainers</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/3_DevContainers.html#práctica",
    "href": "unidades/unidad4/3_DevContainers.html#práctica",
    "title": "DevContainers",
    "section": "Práctica",
    "text": "Práctica\n\nCrear un nuevo DevContainer con una plantilla en Python.\nCrear un archivo main.py con un código sencillo en Python.\nEjecutar la aplicación en el DevContainer.",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>DevContainers</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/3_DevContainers.html#conclusiones",
    "href": "unidades/unidad4/3_DevContainers.html#conclusiones",
    "title": "DevContainers",
    "section": "Conclusiones",
    "text": "Conclusiones\nLos DevContainers son una herramienta poderosa para el desarrollo de software, ya que permiten a los desarrolladores trabajar en un entorno aislado y preconfigurado, sin tener que preocuparse por la configuración del sistema operativo, las dependencias de software o las bibliotecas de terceros. Los DevContainers proporcionan un entorno de desarrollo consistente y reproducible, lo que garantiza que las aplicaciones se ejecuten de la misma manera en diferentes entornos.",
    "crumbs": [
      "Unidad 4: Docker",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>DevContainers</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html",
    "href": "unidades/unidad6/intro_web.html",
    "title": "Introducción a la web",
    "section": "",
    "text": "¿Qué es la web?\nDefinición: La web es un sistema de documentos interconectados que se acceden a través de Internet.",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#diferencia-entre-internet-y-la-web",
    "href": "unidades/unidad6/intro_web.html#diferencia-entre-internet-y-la-web",
    "title": "Introducción a la web",
    "section": "Diferencia entre Internet y la Web:",
    "text": "Diferencia entre Internet y la Web:\nInternet es una red global de computadoras conectadas entre sí que permite el intercambio de información (red de redes). La Web (o la World Wide Web, WWW) es una forma específica de acceder a la información a través de documentos interconectados (páginas web) usando navegadores. La web es solo una parte de Internet.",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#ejemplo-de-productosservicios",
    "href": "unidades/unidad6/intro_web.html#ejemplo-de-productosservicios",
    "title": "Introducción a la web",
    "section": "Ejemplo de productos/servicios:",
    "text": "Ejemplo de productos/servicios:\nGoogle Search: Un motor de búsqueda que accede a la web para ofrecer resultados.\nFacebook, Twitter, Instagram: Redes sociales que permiten interactuar con contenido en la web.",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#cómo-funciona-la-web",
    "href": "unidades/unidad6/intro_web.html#cómo-funciona-la-web",
    "title": "Introducción a la web",
    "section": "¿Cómo funciona la web?",
    "text": "¿Cómo funciona la web?\nProceso de carga de una página web:\n\nUn usuario escribe una URL en su navegador (ej., www.ejemplo.com).\nEl navegador envía una solicitud HTTP a un servidor web donde está alojada la página.\nEl servidor responde con archivos HTML, CSS y JavaScript.\nEl navegador interpreta estos archivos y muestra la página web.\n\nEjemplo de productos/servicios:\nAmazon: Cuando accedes a la tienda, tu navegador hace solicitudes HTTP al servidor de Amazon para cargar los productos, imágenes, y precios.",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#qué-es-un-navegador-web",
    "href": "unidades/unidad6/intro_web.html#qué-es-un-navegador-web",
    "title": "Introducción a la web",
    "section": "¿Qué es un navegador web?",
    "text": "¿Qué es un navegador web?\nDefinición: El navegador es un software que permite acceder a las páginas web. Interpreta el código HTML, CSS y JavaScript para mostrar la información en forma de contenido visual.\nEjemplo de productos/servicios:\nGoogle Chrome, Mozilla Firefox, Safari: Son navegadores que permiten ver páginas web y usar aplicaciones en línea como Gmail, YouTube, etc.",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#qué-es-html",
    "href": "unidades/unidad6/intro_web.html#qué-es-html",
    "title": "Introducción a la web",
    "section": "¿Qué es HTML?",
    "text": "¿Qué es HTML?\nDefinición: HTML (HyperText Markup Language) es el lenguaje de marcado estándar utilizado para crear páginas web. Define la estructura de los documentos web mediante etiquetas.\nEjemplo de productos/servicios:\nWikipedia: La información se estructura usando HTML, con encabezados, párrafos, listas y enlaces para organizar el contenido.\nEjemplo de código básico HTML:\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Mi Página Web&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Bienvenidos a mi sitio web&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo de texto.&lt;/p&gt;\n    &lt;a href=\"https://www.google.com\"&gt;Ir a Google&lt;/a&gt;\n  &lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#qué-es-css",
    "href": "unidades/unidad6/intro_web.html#qué-es-css",
    "title": "Introducción a la web",
    "section": "¿Qué es CSS?",
    "text": "¿Qué es CSS?\nDefinición: CSS (Cascading Style Sheets) es un lenguaje utilizado para describir la presentación de un documento HTML. Permite estilizar elementos como el color, tamaño y disposición de los elementos en la página.\nEjemplo de productos/servicios:\nNetflix: La interfaz de usuario de Netflix se diseña con CSS para que el contenido (películas, series) se muestre de manera atractiva y organizada.\nEjemplo de código CSS:\nbody {\n  font-family: Arial, sans-serif;\n  background-color: #f0f0f0;\n}\n\nh1 {\n  color: #2c3e50;\n}\n\np {\n  font-size: 16px;\n}",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#qué-es-javascript",
    "href": "unidades/unidad6/intro_web.html#qué-es-javascript",
    "title": "Introducción a la web",
    "section": "¿Qué es JavaScript?",
    "text": "¿Qué es JavaScript?\nDefinición: JavaScript es un lenguaje de programación que permite agregar interactividad a las páginas web. Se ejecuta en el navegador del usuario, lo que permite crear dinámicamente contenido o interactuar con el servidor sin necesidad de recargar la página.\nConceptos básicos de JavaScript:\nVariables: Contienen datos (números, cadenas de texto, etc.).\nlet nombre = \"Juan\";\nFunciones: Bloques de código que realizan una tarea específica.\njavascript\nCopiar código\nfunction saludar() {\n  console.log(\"¡Hola, \" + nombre + \"!\");\n}\nsaludar();  // Imprime: ¡Hola, Juan!\nEventos: JavaScript se utiliza para manejar eventos como clics o movimientos del ratón.\njavascript\nCopiar código\ndocument.getElementById(\"boton\").onclick = function() {\n  alert(\"¡Botón presionado!\");\n}\nEjemplo de productos/servicios:\nGoogle Maps: Utiliza JavaScript para mostrar mapas interactivos y permitir que los usuarios hagan clic en ubicaciones. YouTube: Utiliza JavaScript para permitir la reproducción de videos y la interacción con la interfaz.",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#qué-es-node.js",
    "href": "unidades/unidad6/intro_web.html#qué-es-node.js",
    "title": "Introducción a la web",
    "section": "¿Qué es Node.js?",
    "text": "¿Qué es Node.js?\nDefinición: Node.js es un entorno de ejecución para JavaScript en el lado del servidor. Permite usar JavaScript para crear aplicaciones backend, lo que facilita la construcción de aplicaciones completas con JavaScript tanto en el frontend como en el backend.\nEjemplo de productos/servicios:\nNetflix (backend): Utiliza Node.js para manejar grandes volúmenes de datos y conexiones en tiempo real para la transmisión de contenido.\nEjemplo de código básico en Node.js:\nconst http = require('http');\nconst server = http.createServer((req, res) =&gt; {\n  res.write('¡Hola Mundo!');\n  res.end();\n});\nserver.listen(3000, () =&gt; {\n  console.log('Servidor corriendo en http://localhost:3000');\n});",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#qué-es-react",
    "href": "unidades/unidad6/intro_web.html#qué-es-react",
    "title": "Introducción a la web",
    "section": "¿Qué es React?",
    "text": "¿Qué es React?\nDefinicióno: React es una biblioteca de JavaScript para construir interfaces de usuario. Permite crear aplicaciones web interactivas mediante la construcción de componentes reutilizables que gestionan su propio estado.\nEjemplo de productos/servicios:\nFacebook: Fue desarrollado con React para construir interfaces de usuario rápidas y reactivas. Instagram: Utiliza React para gestionar la interacción con las publicaciones, los comentarios y las actualizaciones en tiempo real.\nEjemplo de código básico en React:\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [contador, setContador] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Contador: {contador}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#frontend-vs.-backend",
    "href": "unidades/unidad6/intro_web.html#frontend-vs.-backend",
    "title": "Introducción a la web",
    "section": "Frontend vs. Backend",
    "text": "Frontend vs. Backend\nDefinición:\nFrontend: Es la parte de la aplicación con la que interactúan los usuarios. Incluye todo lo que se ve en la pantalla: diseño, contenido y la lógica de interactividad (HTML, CSS, JavaScript, React).\nBackend: Es la parte “invisible” que maneja los datos y la lógica del servidor. Se encarga de procesar las solicitudes de los usuarios, interactuar con bases de datos y enviar respuestas al frontend (Node.js, Python, Ruby, PHP).\nEjemplo de productos/servicios:\nAmazon (Frontend): La página que ves cuando compras algo, donde se muestran los productos, el carrito y el proceso de pago.\nAmazon (Backend): Los sistemas que gestionan los inventarios, las transacciones y la autenticación de usuarios.",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#api-y-api-rest",
    "href": "unidades/unidad6/intro_web.html#api-y-api-rest",
    "title": "Introducción a la web",
    "section": "API y API REST",
    "text": "API y API REST\nDefinición:\nAPI (Interfaz de Programación de Aplicaciones): Es un conjunto de reglas y herramientas que permiten que diferentes aplicaciones se comuniquen entre sí. En la web, las APIs permiten que el frontend y el backend intercambien datos.\nAPI REST (Representational State Transfer): Es un estilo arquitectónico para diseñar APIs que usan HTTP y siguen principios como la claridad en las URLs, el uso de métodos HTTP (GET, POST, PUT, DELETE) y la estructura de datos en formato JSON.\nEjemplo de productos/servicios:\nTwitter API: Permite a las aplicaciones externas interactuar con Twitter, como publicar tuits o leer mensajes.\nSpotify API: Permite integrar las funciones de Spotify (como reproducir canciones) en otras aplicaciones.\nEjemplo de llamada a una API REST:\nfetch('https://api.ejemplo.com/data')\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data));\n\n// Ejemplo de respuesta:\n\n// {\n//   \"nombre\": \"Juan\",\n//   \"edad\": 30\n// }",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#server-site-rendering",
    "href": "unidades/unidad6/intro_web.html#server-site-rendering",
    "title": "Introducción a la web",
    "section": "Server Site Rendering:",
    "text": "Server Site Rendering:\nDefinición:",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/intro_web.html#conclusión",
    "href": "unidades/unidad6/intro_web.html#conclusión",
    "title": "Introducción a la web",
    "section": "Conclusión",
    "text": "Conclusión\nLa web es un sistema de documentos interconectados que se acceden a través de Internet. Los navegadores web permiten acceder a la web y mostrar páginas creadas con HTML, CSS y JavaScript. Node.js permite ejecutar JavaScript en el lado del servidor, mientras que React facilita la creación de interfaces de usuario interactivas. Las APIs y las APIs REST permiten que las aplicaciones se comuniquen entre sí y compartan datos.",
    "crumbs": [
      "Unidad 5: Desarrollo Web",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Introducción a la web</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#objetivos-del-laboratorio",
    "href": "unidades/Proyectos/3_funciones.html#objetivos-del-laboratorio",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Objetivos del Laboratorio",
    "text": "Objetivos del Laboratorio\n\nDesarrollar un juego de Ahorcado usando funciones en Python.\nUsar estructuras de datos como listas y cadenas de texto.\nImplementar lógica condicional y bucles para manejar el flujo del juego.\nMostrar mensajes finales (con emojis) según el resultado del juego.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#prerrequisitos",
    "href": "unidades/Proyectos/3_funciones.html#prerrequisitos",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Prerrequisitos",
    "text": "Prerrequisitos\n\nConocimiento básico de Python: funciones, listas, cadenas, condicionales y bucles.\nInstalación de Python 3 en tu equipo.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#paso-1-crear-la-estructura-inicial-del-proyecto",
    "href": "unidades/Proyectos/3_funciones.html#paso-1-crear-la-estructura-inicial-del-proyecto",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Paso 1: Crear la Estructura Inicial del Proyecto",
    "text": "Paso 1: Crear la Estructura Inicial del Proyecto\n\nCrear un archivo de Python:\nAbre tu editor de texto o IDE favorito (se recomienda utilizar Vscode) y crea un nuevo archivo llamado ahorcado.py.\nDefinir el objetivo del proyecto en el archivo:\nAñade un comentario en la primera línea que describa el propósito del proyecto:\n# Juego de Ahorcado en Python",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#paso-2-definir-las-etapas-del-ahorcado-en-ascii",
    "href": "unidades/Proyectos/3_funciones.html#paso-2-definir-las-etapas-del-ahorcado-en-ascii",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Paso 2: Definir las Etapas del Ahorcado en ASCII",
    "text": "Paso 2: Definir las Etapas del Ahorcado en ASCII\n\nCrear la lista AHORCADO_DIBUJO:\nDefine las etapas progresivas del dibujo del ahorcado usando una lista de cadenas en ASCII.\nCada elemento de la lista representa una etapa del juego.\nAHORCADO_DIBUJO = [\n    \"\"\"\n       |\n       |\n       |\n       |\n    \"\"\",\n    \"\"\"\n       |\n       |\n       O\n       |\n    \"\"\",\n    \"\"\"\n       |\n       |\n       O\n      /|\n    \"\"\",\n    \"\"\"\n       |\n       |\n       O\n      /|\\\\\n       |\n    \"\"\",\n    \"\"\"\n       |\n       |\n       O\n      /|\\\\\n       |\n      /\n    \"\"\",\n    \"\"\"\n       |\n       |\n       O\n      /|\\\\\n       |\n      / \\\\\n    \"\"\"\n]\n\n\nPrueba del dibujo:\nPrueba imprimiendo cada elemento de la lista para asegurarte de que el dibujo es correcto.\nprint(len(AHORCADO_DIBUJO))\nfor etapa in AHORCADO_DIBUJO:\n    print(etapa)\n\n\n\n\n\n\nTip\n\n\n\nNota: Puedes ejecutar el código en tu terminal o en un entorno de Python para verificar que el dibujo se imprime correctamente.\n\n\n\n\n\n\n\n\nTip\n\n\n\nNo olvides utilizar la función print() para mostrar los elementos de la lista en la consola. Y los comentarios para poder identificar cada etapa del dibujo.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#paso-3-crear-la-función-para-mostrar-el-dibujo-del-ahorcado",
    "href": "unidades/Proyectos/3_funciones.html#paso-3-crear-la-función-para-mostrar-el-dibujo-del-ahorcado",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Paso 3: Crear la Función para Mostrar el Dibujo del Ahorcado",
    "text": "Paso 3: Crear la Función para Mostrar el Dibujo del Ahorcado\n\nDefinir la función mostrar_ahorcado:\nEsta función tomará el número de intentos fallidos como argumento e imprimirá la etapa correspondiente del ahorcado.\ndef mostrar_ahorcado(intentos_fallidos):\n    print(AHORCADO_DIBUJO[intentos_fallidos])\n\n\nPrueba de la función:\nLlama a mostrar_ahorcado varias veces con diferentes valores para verificar que cada etapa se muestra correctamente.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#paso-4-crear-funciones-para-el-flujo-del-juego",
    "href": "unidades/Proyectos/3_funciones.html#paso-4-crear-funciones-para-el-flujo-del-juego",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Paso 4: Crear Funciones para el Flujo del Juego",
    "text": "Paso 4: Crear Funciones para el Flujo del Juego\n\nFunción para Seleccionar Palabra Aleatoria:\nDefine una lista de palabras para que el juego seleccione aleatoriamente una de ellas.\nUsa la biblioteca random para elegir una palabra al azar.\nimport random\n\ndef seleccionar_palabra():\n    palabras = [\"python\", \"programacion\", \"juego\", \"ahorcado\", \"computadora\"]\n    return random.choice(palabras)\nEn el código anterior, la función seleccionar_palabra devuelve una palabra aleatoria de la lista de palabras. Tambien aparece el método choice de random que selecciona una palabra aleatoria de la lista.\n\n\nFunción para Mostrar el Estado Actual:\nEsta función mostrará el progreso actual del jugador, mostrando las letras adivinadas y guiones bajos _ para letras no adivinadas.\ndef mostrar_progreso(palabra, letras_adivinadas):\n    progreso = [letra if letra in letras_adivinadas else '_' for letra in palabra]\n    print(\" \".join(progreso))\nEl código anterior crea una lista de letras adivinadas y guiones bajos para las letras no adivinadas. Luego, une los elementos de la lista en una cadena con un espacio entre cada letra.\nEste proceso se conoce como list comprehension y es una forma concisa de crear listas en Python.\nPara ampliar la información sobre list comprehension, puedes consultar la documentación oficial de Python en el siguiente enlace: List Comprehensions\n\n\nFunción para Manejar el Intento del Jugador:\nDefine una función que reciba una letra y verifique si está en la palabra.\ndef intentar_letra(palabra, letra, letras_adivinadas):\n    if letra in palabra:\n        letras_adivinadas.add(letra)\n        return True\n    return False\nEn el código anterior, la función intentar_letra verifica si la letra está en la palabra y la agrega a la colección de letras adivinadas. Devuelve True si la letra está en la palabra y False si no lo está.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#paso-5-crear-la-función-principal-del-juego",
    "href": "unidades/Proyectos/3_funciones.html#paso-5-crear-la-función-principal-del-juego",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Paso 5: Crear la Función Principal del Juego",
    "text": "Paso 5: Crear la Función Principal del Juego\n\nConfigurar el Juego:\nDefine la función jugar_ahorcado() que controlará el flujo completo del juego.\nEstablece la palabra a adivinar, el número de intentos, y una colección para almacenar las letras adivinadas.\ndef jugar_ahorcado():\n    palabra = seleccionar_palabra()\n    letras_adivinadas = set()\n    intentos_fallidos = 0\n    max_intentos = len(AHORCADO_DIBUJO) - 1\nEn el código anterior, la función jugar_ahorcado selecciona una palabra aleatoria, inicializa una colección de letras adivinadas, y establece el número máximo de intentos.\n\n\nCiclo del Juego:\nCrea un bucle while que continúe mientras el jugador tenga intentos restantes y no haya adivinado la palabra completa.\n    while intentos_fallidos &lt; max_intentos:\n        mostrar_ahorcado(intentos_fallidos)\n        mostrar_progreso(palabra, letras_adivinadas)\n        \n        letra = input(\"Introduce una letra: \").lower()\n        \n        if letra in letras_adivinadas:\n            print(\"Ya intentaste esa letra.\")\n            continue\n        \n        if intentar_letra(palabra, letra, letras_adivinadas):\n            print(\"¡Correcto!\")\n            if all(l in letras_adivinadas for l in palabra):\n                mostrar_resultado(True)\n                break\n        else:\n            print(\"Incorrecto.\")\n            intentos_fallidos += 1\n    else:\n        mostrar_ahorcado(intentos_fallidos)\n        mostrar_resultado(False)\nEn el código anterior, el bucle while muestra el dibujo actual del ahorcado, el progreso del jugador y solicita una letra al jugador.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#paso-6-crear-función-de-resultado-final-con-emojis",
    "href": "unidades/Proyectos/3_funciones.html#paso-6-crear-función-de-resultado-final-con-emojis",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Paso 6: Crear Función de Resultado Final con Emojis",
    "text": "Paso 6: Crear Función de Resultado Final con Emojis\n\nDefinir mostrar_resultado:\nEsta función mostrará un mensaje final con un emoji dependiendo de si el jugador gana o pierde.\ndef mostrar_resultado(ganador):\n    if ganador:\n        print(\"¡Felicidades, ganaste! 😄\")\n    else:\n        print(\"Lo siento, perdiste. 😞\")\nEn el código anterior, la función mostrar_resultado imprime un mensaje de felicitación si el jugador gana y un mensaje de consuelo si pierde.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#paso-7-ejecutar-el-juego",
    "href": "unidades/Proyectos/3_funciones.html#paso-7-ejecutar-el-juego",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Paso 7: Ejecutar el Juego",
    "text": "Paso 7: Ejecutar el Juego\n\nEjecutar el Juego:\nAgrega una condición para ejecutar el juego cuando el archivo sea ejecutado directamente.\nif __name__ == \"__main__\":\n    jugar_ahorcado()\nEn el código anterior, la condición if name == “main”: verifica si el archivo se ejecuta directamente y llama a la función jugar_ahorcado en ese caso.\n\n\n\n\n\n\nTip\n\n\n\nNota: Puedes ejecutar el juego en tu terminal o en un entorno de Python para jugar al Ahorcado.\n\n\n\n\nPrueba Final:\nEjecuta ahorcado.py y juega una partida completa. Verifica que los mensajes y el flujo del juego sean los correctos.\npython ahorcado.py",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/3_funciones.html#paso-8-mejoras-opcionales",
    "href": "unidades/Proyectos/3_funciones.html#paso-8-mejoras-opcionales",
    "title": "🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python",
    "section": "Paso 8: Mejoras Opcionales",
    "text": "Paso 8: Mejoras Opcionales\n\nAñadir Validación de Entradas: Controla que el jugador solo introduzca letras válidas.\n\nAgregar Dificultad: Permite al jugador elegir entre palabras cortas, medias y largas.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>🪤✏️ Laboratorio: Construcción de un Juego de Ahorcado en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/1_proyecto_modulos.html#módulos-del-proyecto",
    "href": "unidades/Proyectos/1_proyecto_modulos.html#módulos-del-proyecto",
    "title": "📝 Gestor de Tareas con Prioridades",
    "section": "Módulos del Proyecto",
    "text": "Módulos del Proyecto\n\n📋 Módulo de tareas\n\nCrear una nueva tarea con título, descripción, fecha límite y prioridad.\nMarcar tareas como completadas ✅ o en progreso 🔄.\nOrganizar las tareas en orden de prioridad 🔥 o por fecha límite 📅.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>📝 Gestor de Tareas con Prioridades</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/1_proyecto_modulos.html#funciones-clave",
    "href": "unidades/Proyectos/1_proyecto_modulos.html#funciones-clave",
    "title": "📝 Gestor de Tareas con Prioridades",
    "section": "Funciones Clave",
    "text": "Funciones Clave\n\nPrioriza tus tareas con un sistema de prioridades: baja, media y alta 🔥.\n\n\nDesarrollo\nCreamos la siguiente estructura de carpetas para organizar nuestro proyecto:\nproyecto_modulos/\n│\n├── tareas/\n│   ├── __init__.py\n│   ├── tareas.py\n│\nEn el archivo tareas.py definimos las clases y funciones necesarias para gestionar las tareas.\n# tareas.py\n\nclass Tarea:\n    def __init__(self, titulo, descripcion, fecha_limite, prioridad):\n        self.titulo = titulo\n        self.descripcion = descripcion\n        self.fecha_limite = fecha_limite\n        self.prioridad = prioridad\n        self.completada = False\n\n    def marcar_completada(self):\n        self.completada = True\n\n    def marcar_en_progreso(self):\n        self.completada = False\n\n    def __str__(self):\n        return f\"{self.titulo} - {self.prioridad} - {self.fecha_limite}\"\nEn el archivo init.py definimos las funciones principales para interactuar con las tareas.\n# __init__.py\n\nfrom tareas import Tarea\n\ndef crear_tarea(titulo, descripcion, fecha_limite, prioridad):\n    return Tarea(titulo, descripcion, fecha_limite, prioridad)\n\ndef marcar_completada(tarea):\n    tarea.marcar_completada()\n\ndef marcar_en_progreso(tarea):\n    tarea.marcar_en_progreso()\nCon esta estructura básica, podemos empezar a desarrollar la funcionalidad de nuestro gestor de tareas. En los siguientes módulos, ampliaremos las capacidades de nuestra aplicación y añadiremos nuevas funcionalidades.\nPara poder probar nuestro código, podemos crear un script de prueba en la misma carpeta:\n# test.py\n\nfrom tareas import Tarea\n\ntarea1 = Tarea(\"Hacer la compra\", \"Comprar leche, pan y fruta\", \"2022-12-31\", \"alta\")\n\nprint(tarea1)\nAl ejecutar el script de prueba, deberíamos ver la información de la tarea creada.\n$ python test.py\nHacer la compra - alta - 2022-12-31",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>📝 Gestor de Tareas con Prioridades</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/2_proyecto_poo.html",
    "href": "unidades/Proyectos/2_proyecto_poo.html",
    "title": "🛒 Simulador de Tienda Online",
    "section": "",
    "text": "Módulos del Proyecto\nUn proyecto interactivo que simula una tienda en línea donde los clientes pueden agregar productos al carrito, realizar pedidos, gestionar inventarios y procesar pagos.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>🛒 Simulador de Tienda Online</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/2_proyecto_poo.html#módulos-del-proyecto",
    "href": "unidades/Proyectos/2_proyecto_poo.html#módulos-del-proyecto",
    "title": "🛒 Simulador de Tienda Online",
    "section": "",
    "text": "🛍️ Módulo de Productos\n\nDefinir productos con nombre, precio y cantidad en inventario.\nActualizar el inventario después de cada compra o cuando se agregan nuevos productos.\n\n\n\n🛒 Módulo de Carrito\n\nPermite a los clientes agregar o quitar productos de su carrito.\nCalcular el costo total de los productos en el carrito.\n\n\n\n👤 Módulo de Cliente\n\nGestionar la creación de nuevos clientes.\nMantener el historial de compras del cliente.\n\n\n\n📦 Módulo de Pedido\n\nProcesar un pedido, verificar disponibilidad en inventario, y generar la factura.\nActualizar el inventario después de la compra.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>🛒 Simulador de Tienda Online</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/2_proyecto_poo.html#productos",
    "href": "unidades/Proyectos/2_proyecto_poo.html#productos",
    "title": "🛒 Simulador de Tienda Online",
    "section": "🛍️ Productos",
    "text": "🛍️ Productos\nEn el archivo producto.py, definimos la clase Producto:\n# productos/producto.py\n\nclass Producto:\n    def __init__(self, nombre, precio, inventario):\n        self.nombre = nombre\n        self.precio = precio\n        self.inventario = inventario\n\n    def actualizar_inventario(self, cantidad):\n        self.inventario -= cantidad\n\n    def __str__(self):\n        return f\"{self.nombre} - ${self.precio} (Inventario: {self.inventario})\"",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>🛒 Simulador de Tienda Online</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/2_proyecto_poo.html#carrito",
    "href": "unidades/Proyectos/2_proyecto_poo.html#carrito",
    "title": "🛒 Simulador de Tienda Online",
    "section": "🛒 Carrito",
    "text": "🛒 Carrito\nEn el archivo carrito.py, definimos la clase Carrito:\n# carrito/carrito.py\n\nclass Carrito:\n    def __init__(self):\n        self.productos = {}\n\n    def agregar_producto(self, producto, cantidad):\n        if producto.nombre in self.productos:\n            self.productos[producto.nombre] += cantidad\n        else:\n            self.productos[producto.nombre] = cantidad\n\n    def eliminar_producto(self, producto):\n        if producto.nombre in self.productos:\n            del self.productos[producto.nombre]\n\n    def total(self):\n        return sum(producto.precio * cantidad for producto, cantidad in self.productos.items())\n\n    def __str__(self):\n        carrito_str = \"Carrito:\\n\"\n        for producto, cantidad in self.productos.items():\n            carrito_str += f\"{producto}: {cantidad}\\n\"\n        return carrito_str",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>🛒 Simulador de Tienda Online</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/2_proyecto_poo.html#clientes",
    "href": "unidades/Proyectos/2_proyecto_poo.html#clientes",
    "title": "🛒 Simulador de Tienda Online",
    "section": "👤 Clientes",
    "text": "👤 Clientes\nEn el archivo cliente.py, definimos la clase Cliente:\n# clientes/cliente.py\n\nclass Cliente:\n    def __init__(self, nombre, email):\n        self.nombre = nombre\n        self.email = email\n        self.historial_compras = []\n\n    def agregar_historial(self, pedido):\n        self.historial_compras.append(pedido)\n\n    def ver_historial(self):\n        if not self.historial_compras:\n            return \"No tienes compras aún.\"\n        return \"\\n\".join(str(pedido) for pedido in self.historial_compras)\n\n    def __str__(self):\n        return f\"Cliente: {self.nombre} ({self.email})\"",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>🛒 Simulador de Tienda Online</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/2_proyecto_poo.html#pedidos",
    "href": "unidades/Proyectos/2_proyecto_poo.html#pedidos",
    "title": "🛒 Simulador de Tienda Online",
    "section": "📦 Pedidos",
    "text": "📦 Pedidos\nEn el archivo pedido.py, definimos la clase Pedido:\n# pedidos/pedido.py\n\nclass Pedido:\n    def __init__(self, cliente, carrito):\n        self.cliente = cliente\n        self.carrito = carrito\n        self.total = carrito.total()\n\n    def procesar_pedido(self):\n        for producto, cantidad in self.carrito.productos.items():\n            producto.actualizar_inventario(cantidad)\n        self.cliente.agregar_historial(self)\n\n    def __str__(self):\n        return f\"Pedido de {self.cliente.nombre} - Total: ${self.total}\"",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>🛒 Simulador de Tienda Online</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/4_proyecto_poo_2.html#objetivos",
    "href": "unidades/Proyectos/4_proyecto_poo_2.html#objetivos",
    "title": "🏫 Sistema Universitario",
    "section": "Objetivos",
    "text": "Objetivos\n\nDefinir clases en Python.\nCrear objetos de clases.\nUtilizar herencia en clases.\nMostrar información de objetos. ## Requerimientos\nConocimientos básicos de programación en Python.\nConocimientos básicos de programación orientada a objetos.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>🏫 Sistema Universitario</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/4_proyecto_poo_2.html#instrucciones.",
    "href": "unidades/Proyectos/4_proyecto_poo_2.html#instrucciones.",
    "title": "🏫 Sistema Universitario",
    "section": "Instrucciones.",
    "text": "Instrucciones.\n\nClase Persona: Define los atributos comunes nombre, edad y sexo.\nClase Estudiante: Hereda de Persona y agrega los atributos carnet y carrera.\nClase Profesor: Hereda de Persona y agrega los atributos codigo y especialidad.\nClase Curso: Contiene los atributos nombre, codigo y una instancia de Profesor.\nClase Universidad: Contiene el atributo nombre y una lista de cursos. Incluye un método para agregar cursos.\nCreación de objetos:\n\n\nSe crea un objeto universidad de la clase Universidad.\nSe crean los objetos profesor, curso y estudiante con los datos indicados.\nSe agrega cada curso a la universidad y luego se imprime la universidad con los cursos.\n\n\nImpresión:\n\n\nSe imprime la información de la universidad, el estudiante, el profesor y el curso de Matemáticas, según los requerimientos.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>🏫 Sistema Universitario</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/4_proyecto_poo_2.html#desarrollo",
    "href": "unidades/Proyectos/4_proyecto_poo_2.html#desarrollo",
    "title": "🏫 Sistema Universitario",
    "section": "Desarrollo",
    "text": "Desarrollo\n\nCrear la clase Persona.\n\nclass Persona:\n    def __init__(self, nombre, edad, sexo):\n        self.nombre = nombre\n        self.edad = edad\n        self.sexo = sexo\n\n    def __str__(self):\n        return f\"Nombre: {self.nombre}, Edad: {self.edad}, Sexo: {self.sexo}\"\nEn el codigo anterior se crea la clase Persona con los atributos nombre, edad y sexo. Además, se crea el método str para mostrar la información de la persona.\n\nCrear la clase Estudiante que hereda de Persona.\n\nclass Estudiante(Persona):\n    def __init__(self, nombre, edad, sexo, carnet, carrera):\n        super().__init__(nombre, edad, sexo)\n        self.carnet = carnet\n        self.carrera = carrera\n\n    def __str__(self):\n        return f\"{super().__str__()}, Carnet: {self.carnet}, Carrera: {self.carrera}\"\nEn el codigo anterior se crea la clase Estudiante que hereda de Persona. Se añaden los atributos carnet y carrera. Además, se sobreescribe el método str para mostrar la información del estudiante.\n\nCrear la clase Profesor que hereda de Persona.\n\nclass Profesor(Persona):\n    def __init__(self, nombre, edad, sexo, codigo, especialidad):\n        super().__init__(nombre, edad, sexo)\n        self.codigo = codigo\n        self.especialidad = especialidad\n\n    def __str__(self):\n        return f\"{super().__str__()}, Código: {self.codigo}, Especialidad: {self.especialidad}\"\nEn el codigo anterior se crea la clase Profesor que hereda de Persona. Se añaden los atributos codigo y especialidad. Además, se sobreescribe el método str para mostrar la información del profesor.\n\nCrear la clase Curso.\n\nclass Curso:\n    def __init__(self, nombre, codigo, profesor):\n        self.nombre = nombre\n        self.codigo = codigo\n        self.profesor = profesor\n\n    def __str__(self):\n        return f\"Curso: {self.nombre}, Código: {self.codigo}, Profesor: {self.profesor.nombre}\"\nEn el codigo anterior se crea la clase Curso con los atributos nombre, codigo y profesor. Además, se crea el método str para mostrar la información del curso.\n\nCrear la clase Universidad.\n\nclass Universidad:\n    def __init__(self, nombre):\n        self.nombre = nombre\n        self.cursos = []\n\n    def agregar_curso(self, curso):\n        self.cursos.append(curso)\n\n    def __str__(self):\n        cursos_str = \"\\n\".join([str(curso) for curso in self.cursos])\n        return f\"Universidad: {self.nombre}\\nCursos:\\n{cursos_str}\"\nEn el codigo anterior se crea la clase Universidad con los atributos nombre y cursos. Se añade el método agregar_curso para agregar un curso a la lista de cursos. Además, se sobreescribe el método str para mostrar la información de la universidad y los cursos.\n\nCar los objetos\n\n# Crear la universidad\nuniversidad = Universidad(\"Universidad de El Salvador\")\n\n# Crear los profesores\nprofesor_juan = Profesor(\"Juan Perez\", 30, \"Masculino\", \"202020202\", \"Matematicas\")\nprofesor_maria = Profesor(\"Maria Lopez\", 35, \"Femenino\", \"202020203\", \"Fisica\")\nprofesor_pedro = Profesor(\"Pedro Ramirez\", 40, \"Masculino\", \"202020204\", \"Quimica\")\n\n# Crear los cursos\ncurso_matematicas = Curso(\"Matematicas\", \"MAT101\", profesor_juan)\ncurso_fisica = Curso(\"Fisica\", \"FIS101\", profesor_maria)\ncurso_quimica = Curso(\"Quimica\", \"QUI101\", profesor_pedro)\n\n# Agregar los cursos a la universidad\nuniversidad.agregar_curso(curso_matematicas)\nuniversidad.agregar_curso(curso_fisica)\nuniversidad.agregar_curso(curso_quimica)\n\n# Crear el objeto estudiante\nestudiante_carlos = Estudiante(\"Carlos Perez\", 20, \"Masculino\", \"202010101\", \"Ingenieria en Sistemas Informaticos\")\nEn el codigo anterior se crean los objetos de la universidad, profesores, cursos y estudiante.\n\nImprimir la información\n\nprint(universidad)\nprint()\nprint(estudiante_carlos)\nprint()\nprint(profesor_juan)\nprint()\nprint(curso_matematicas)\n\n# Crear un nuevo curso de Fisica y agregarlo a la universidad\ncurso_nuevo_fisica = Curso(\"Fisica\", \"FIS101\", profesor_maria)\nuniversidad.agregar_curso(curso_nuevo_fisica)\n\n# Imprimir nuevamente la universidad con el nuevo curso agregado\nprint()\nprint(universidad)\nEn el codigo anterior se imprime la información de la universidad, estudiante, profesor y curso. Luego se crea un nuevo curso de Fisica y se agrega a la universidad, para finalmente imprimir nuevamente la información de la universidad.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>🏫 Sistema Universitario</span>"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Acerca de mi",
    "section": "",
    "text": "¡Hola! Soy Diego Saavedra, un experto en desarrollo avanzado de software e investigación. Mi amplia experiencia abarca diversas tecnologías, incluyendo Python (Django, Flask, Fast API) y JavaScript (Express, Next, React, Nestjs), así como también tengo conocimientos sólidos en bases de datos, arquitecturas de software y liderazgo ágil.\nMi pasión por la innovación, el desarrollo y la educación me ha llevado a destacarme como un profesional versátil e invaluable. Estoy constantemente listo para enfrentar desafíos técnicos y liderar proyectos de vanguardia.\nMi formación académica incluye el ser estudiante de Doctorado centrado en la inteligencia artificial, estoy enfocando mi investigación en la detección de TDA+H y Asperger mediante Visión Artificial a traves de algoritmos de Inteligencia Artificial. Además, poseo una Maestría en Ciencias de la Computación, con un enfoque en el Deep Learning (Convolutional Neural Network) y la Atención.\nCon esta sólida base académica y experiencia profesional, estoy preparado para aportar soluciones innovadoras y liderar equipos hacia el éxito en cualquier proyecto tecnológico que se me presente.\nAdemás, tengo experiencia en el desarrollo móvil utilizando Flutter y en la implementación de soluciones backend utilizando servicios Backend as a Service (BaaS) como Firebase y Supabase.\nEn el ámbito de la educación, he sido docente de programación en institutos y universidades, actualmente soy parte del Departamento de Ciencias de la Computación en la Universidad de las Fuerzas Armadas ESPE, donde he impartido asignaturas de desarrollo de Software Web con tecnologías como JavaScript, Java y C# asi como sus respectivos frameworks.\nMi experiencia en el desarrollo de software y la investigación me ha permitido adquirir habilidades de liderazgo, trabajo en equipo y comunicación efectiva. Estoy seguro de que mi experiencia y habilidades serán de gran valor para cualquier proyecto tecnológico que se me presente.\nEn este curso aprenderás a desarrollar aplicaciones web con Python y Django, una de las tecnologías más populares y poderosas para el desarrollo de aplicaciones web. A lo largo del curso, aprenderás a crear aplicaciones web desde cero, utilizando Django y Python, y a implementar funcionalidades avanzadas como integración con APIs externas y mucho más.\nTambien veremos tecnologías como Git, Github, Docker, Python, Django, Django Rest Framework, Html5, Css3, JavaScript, Nodejs, Npm y React.\n\n\n¡Estoy emocionado de compartir contigo mi conocimiento y experiencia en el desarrollo de aplicaciones web con Python y Django!"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Licencia",
    "section": "",
    "text": "Uso Permitido\nEste curso y su contenido están protegidos por derechos de autor y son propiedad de [Nombre de la Compañía]. El contenido de este curso se proporciona con el propósito de educación y aprendizaje.\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de [Nombre de la Compañía]. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio."
  },
  {
    "objectID": "license.html#atribución",
    "href": "license.html#atribución",
    "title": "Licencia",
    "section": "Atribución",
    "text": "Atribución\nSi compartes los ejemplos, los fragmentos de código o el contenido de este curso en línea, te pedimos que proporciones la atribución adecuada a [Nombre de la Compañía]."
  },
  {
    "objectID": "license.html#cambios-en-la-licencia",
    "href": "license.html#cambios-en-la-licencia",
    "title": "Licencia",
    "section": "Cambios en la Licencia",
    "text": "Cambios en la Licencia\n[Nombre de la Compañía] se reserva el derecho de modificar los términos de esta licencia en cualquier momento. Cualquier cambio se reflejará en esta página.\nGracias por respetar nuestros derechos de autor y por tu comprensión."
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html",
    "href": "unidades/Proyectos/5_DevContainers.html",
    "title": "Laboratorio: DevContainer con NGINX",
    "section": "",
    "text": "Objetivo:\nCrear un entorno de desarrollo dentro de un contenedor Docker que ejecute NGINX para servir una página estática simple.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: DevContainer con NGINX</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#requisitos-previos",
    "href": "unidades/Proyectos/5_DevContainers.html#requisitos-previos",
    "title": "Laboratorio: Configuración y uso de DevContainers desde cero",
    "section": "Requisitos previos",
    "text": "Requisitos previos\nAntes de empezar, asegúrate de tener los siguientes requisitos:\n\nDocker instalado y en ejecución.\nVisual Studio Code (VSCode) con la extensión “Remote - Containers” instalada.\nAcceso a internet para descargar imágenes de contenedores y herramientas.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: Configuración y uso de DevContainers desde cero</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#paso-1-crear-un-proyecto-de-devcontainer",
    "href": "unidades/Proyectos/5_DevContainers.html#paso-1-crear-un-proyecto-de-devcontainer",
    "title": "Laboratorio: Configuración y uso de DevContainers desde cero",
    "section": "Paso 1: Crear un proyecto de DevContainer",
    "text": "Paso 1: Crear un proyecto de DevContainer\nInicia VSCode y abre tu carpeta de trabajo:\nAbre la carpeta en la que quieras configurar tu DevContainer. Si ya tienes un proyecto, simplemente abre esa carpeta. Si no, crea un nuevo proyecto.\nCrea un archivo .devcontainer en la raíz del proyecto:\nEn la raíz de tu proyecto, crea una carpeta llamada .devcontainer. En esta carpeta, necesitarás dos archivos:\n\nDockerfile (define la imagen base y la instalación de dependencias).\ndevcontainer.json (configura el DevContainer).\n\nCrea la carpeta .devcontainer:\nmkdir .devcontainer\nY dentro de ella, crea los archivos Dockerfile y devcontainer.json.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: Configuración y uso de DevContainers desde cero</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#paso-2-configuración-del-dockerfile",
    "href": "unidades/Proyectos/5_DevContainers.html#paso-2-configuración-del-dockerfile",
    "title": "Laboratorio: Configuración y uso de DevContainers desde cero",
    "section": "Paso 2: Configuración del Dockerfile",
    "text": "Paso 2: Configuración del Dockerfile\nEl archivo Dockerfile define cómo será configurado el contenedor. Aquí tienes un ejemplo básico usando una imagen base de Ubuntu e instalando NGINX:\nDockerfile:\n# Usa una imagen base de Ubuntu\nFROM ubuntu:20.04\n\n# Actualiza los paquetes e instala las dependencias necesarias\nRUN apt-get update && apt-get install -y nginx && apt-get clean\n\n# Expone el puerto 80 para NGINX\nEXPOSE 80\n\n# Inicia NGINX en primer plano\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\nEste archivo establece:\n\nLa imagen base de Ubuntu.\nLa instalación de NGINX.\nLa exposición del puerto 80.\nEl comando para iniciar NGINX en primer plano cuando se inicie el contenedor.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: Configuración y uso de DevContainers desde cero</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#paso-3-configuración-del-devcontainer.json",
    "href": "unidades/Proyectos/5_DevContainers.html#paso-3-configuración-del-devcontainer.json",
    "title": "Laboratorio: Configuración y uso de DevContainers desde cero",
    "section": "Paso 3: Configuración del devcontainer.json",
    "text": "Paso 3: Configuración del devcontainer.json\nEl archivo devcontainer.json define cómo se configura el contenedor de desarrollo. Aquí tienes un ejemplo básico:\ndevcontainer.json:\n{\n    \"name\": \"Ubuntu with NGINX\",\n    \"build\": {\n        \"dockerfile\": \"Dockerfile\"\n    },\n    \"forwardPorts\": [80],\n    \"postCreateCommand\": \"echo 'DevContainer with NGINX is ready!'\",\n    \"remoteUser\": \"root\",\n    \"mounts\": [\n        \"source=${localWorkspaceFolder}/html,target=/usr/share/nginx/html,type=bind\"\n    ]\n}\nExplicación de las configuraciones:\n\nname: Nombre del contenedor.\nbuild: Especifica que el contenedor se construirá usando el Dockerfile.\nforwardPorts: Expone el puerto 80 del contenedor en el puerto 80 de tu máquina local.\n\n– postCreateCommand**: Ejecuta un comando después de que el contenedor esté creado. Aquí solo imprimimos un mensaje.\n\nremoteUser: Define el usuario que se usará en el contenedor, en este caso root.\nmounts: Monta la carpeta html de tu máquina local dentro del contenedor, lo que permite que los archivos se sincronicen automáticamente.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: Configuración y uso de DevContainers desde cero</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#paso-4-crear-el-contenido-html",
    "href": "unidades/Proyectos/5_DevContainers.html#paso-4-crear-el-contenido-html",
    "title": "Laboratorio: Configuración y uso de DevContainers desde cero",
    "section": "Paso 4: Crear el contenido HTML",
    "text": "Paso 4: Crear el contenido HTML\nEn la carpeta raíz de tu proyecto, crea una carpeta html y coloca tu archivo HTML allí. Este archivo será servido por NGINX en el contenedor.\nhtml/index.html:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEste archivo HTML básico será servido por NGINX en tu contenedor.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: Configuración y uso de DevContainers desde cero</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#paso-5-construir-y-abrir-el-devcontainer",
    "href": "unidades/Proyectos/5_DevContainers.html#paso-5-construir-y-abrir-el-devcontainer",
    "title": "Laboratorio: Configuración y uso de DevContainers desde cero",
    "section": "Paso 5: Construir y abrir el DevContainer",
    "text": "Paso 5: Construir y abrir el DevContainer\nAbrir en VSCode: Abre el proyecto en VSCode.\nConectar al DevContainer: Abre el panel de comandos (Ctrl+Shift+P), y ejecuta el comando:\nRemote-Containers: Reopen in Container\nVSCode ahora construirá y abrirá el contenedor, usando la configuración definida en el Dockerfile y devcontainer.json.\nVer el servidor web: Una vez que el contenedor esté en ejecución, abre tu navegador y visita http://localhost. Deberías ver el mensaje “Hello World!” servido por NGINX.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: Configuración y uso de DevContainers desde cero</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#paso-6-personalizar-el-devcontainer",
    "href": "unidades/Proyectos/5_DevContainers.html#paso-6-personalizar-el-devcontainer",
    "title": "Laboratorio: Configuración y uso de DevContainers desde cero",
    "section": "Paso 6: Personalizar el DevContainer",
    "text": "Paso 6: Personalizar el DevContainer\nPuedes agregar más herramientas o configuraciones personalizadas según lo que necesites en tu entorno de desarrollo. Por ejemplo, si quieres instalar Node.js, PHP o cualquier otro software, puedes agregarlo al Dockerfile:\n# Instalar Node.js\nRUN apt-get install -y nodejs npm\nCada vez que hagas cambios en el Dockerfile o el devcontainer.json, deberás reconstruir el contenedor para que los cambios surtan efecto.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: Configuración y uso de DevContainers desde cero</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#paso-7-uso-de-devcontainers-en-proyectos-colaborativos",
    "href": "unidades/Proyectos/5_DevContainers.html#paso-7-uso-de-devcontainers-en-proyectos-colaborativos",
    "title": "Laboratorio: Configuración y uso de DevContainers desde cero",
    "section": "Paso 7: Uso de DevContainers en proyectos colaborativos",
    "text": "Paso 7: Uso de DevContainers en proyectos colaborativos\nUna de las grandes ventajas de los DevContainers es que puedes compartir tu configuración con otros miembros del equipo. Simplemente sube el archivo .devcontainer a tu repositorio y cualquier desarrollador podrá abrir el proyecto en un contenedor con el mismo entorno.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: Configuración y uso de DevContainers desde cero</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#estructura-del-proyecto",
    "href": "unidades/Proyectos/5_DevContainers.html#estructura-del-proyecto",
    "title": "Laboratorio: DevContainer con NGINX",
    "section": "1. Estructura del Proyecto",
    "text": "1. Estructura del Proyecto\nEl proyecto tendrá la siguiente estructura de directorios y archivos:\nDevContainers/\n│\n├── .devcontainer/\n│   ├── Dockerfile\n│   └── devcontainer.json\n│\n├── html/\n    └── index.html\nAhora vamos a crear el archivo index.html/\nhtml/index.html\nEl archivo HTML que NGINX servirá cuando accedas a http://localhost:80.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEste es un archivo HTML simple que contiene un título y un encabezado.\nAhora vamos a crar el archivo Dockerfile.\n.devcontainer/Dockerfile\nEste archivo Dockerfile se utiliza para construir la imagen del contenedor que ejecutará NGINX.\n# Usa una imagen base de Ubuntu\nFROM mcr.microsoft.com/devcontainers/base:jammy\n\n# Instala NGINX\nRUN apt-get update && apt-get install -y nginx && apt-get clean\n\n# Expone el puerto 80 para NGINX\nEXPOSE 80\n\n# Comando para iniciar NGINX en primer plano\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\nEl Dockerfile está basado en Ubuntu (jammy) e instala NGINX. Luego, expone el puerto 80 y configura NGINX para que se ejecute en primer plano (esto es necesario para que el contenedor no termine inmediatamente después de iniciarse).\nAhora crearermos el archivo devcontainer.json.\n.devcontainer/devcontainer.json\nEl archivo de configuración del DevContainer, que especifica cómo se debe construir y configurar el contenedor.\n{\n  \"name\": \"DevContainer with NGINX\",\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\"\n  },\n  \"forwardPorts\": [80],\n  \"postCreateCommand\": \"echo 'DevContainer with NGINX is ready!'\",\n  \"remoteUser\": \"root\",\n  \"mounts\": [\n    \"source=${localWorkspaceFolder}/html,target=/usr/share/nginx/html,type=bind\"\n  ]\n}\n\nbuild: Este campo indica que se debe usar el Dockerfile para construir la imagen del contenedor.\nforwardPorts: Mapea el puerto 80 del contenedor al puerto 80 de la máquina local para que NGINX sea accesible desde el navegador.\nmounts: Se vincula el directorio local html al directorio /usr/share/nginx/html del contenedor, para que el archivo index.html sea servido por NGINX.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: DevContainer con NGINX</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#instrucciones-de-creación-y-ejecución",
    "href": "unidades/Proyectos/5_DevContainers.html#instrucciones-de-creación-y-ejecución",
    "title": "Laboratorio: DevContainer con NGINX",
    "section": "3. Instrucciones de Creación y Ejecución",
    "text": "3. Instrucciones de Creación y Ejecución\nCrea el proyecto: Crea un directorio de trabajo, por ejemplo DevContainers, y dentro de él agrega los archivos de configuración mencionados anteriormente.\nAbre el proyecto en Visual Studio Code: Abre la carpeta DevContainers en Visual Studio Code.\nConstruye el contenedor: Al abrir el proyecto en VS Code, si tienes configurado DevContainers, automáticamente debería preguntar si deseas abrirlo en un contenedor. Selecciona “Reopen in Container”.\nVerifica la creación del contenedor: El contenedor se construirá utilizando el Dockerfile y configurará NGINX automáticamente. El puerto 80 será accesible en tu máquina local.\nAccede a tu página web: Una vez que el contenedor se haya iniciado, abre tu navegador y ve a http://localhost:80. Deberías ver la página con el mensaje “Hello World!”.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: DevContainer con NGINX</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#archivos-de-configuración",
    "href": "unidades/Proyectos/5_DevContainers.html#archivos-de-configuración",
    "title": "Laboratorio: DevContainer con NGINX",
    "section": "2. Archivos de Configuración",
    "text": "2. Archivos de Configuración\nEs posible que tengamos que configurar el archivo /etc/nginx/sites-available/default\nEste archivo de configuración de NGINX para servir los archivos desde la carpeta /usr/share/nginx/html.\nserver {\n    listen 80;\n    server_name localhost;\n\n    root /usr/share/nginx/html;  # Asegúrate de que esté apuntando a esta carpeta\n    index index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ =404;  # Verifica que esta línea esté configurada para servir archivos correctamente\n    }\n}\nEste archivo configura el servidor para escuchar en el puerto 80 y servir archivos desde la carpeta /usr/share/nginx/html.\nSi el archivo solicitado no se encuentra, se mostrará un error 404.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: DevContainer con NGINX</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/5_DevContainers.html#problemas-comunes",
    "href": "unidades/Proyectos/5_DevContainers.html#problemas-comunes",
    "title": "Laboratorio: DevContainer con NGINX",
    "section": "Problemas Comunes",
    "text": "Problemas Comunes\nNGINX no se inicia: Si después de construir el contenedor NGINX no está corriendo, puedes iniciarlo manualmente con el siguiente comando:\nservice nginx start\nCambios no reflejados: Si haces cambios en el archivo index.html, es posible que necesites reiniciar NGINX para que se apliquen:\nservice nginx restart\nNo se mapea el puerto correctamente: Si no puedes acceder a la página en el navegador, verifica que el puerto esté correctamente mapeado en la configuración del contenedor. Revisa el archivo devcontainer.json y asegúrate de que forwardPorts esté configurado correctamente como [80].",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Laboratorio: DevContainer con NGINX</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html",
    "href": "unidades/Proyectos/6_calculadora.html",
    "title": "Laboratorio: Calculadora en Python",
    "section": "",
    "text": "Paso 1: Configuración inicial del proyecto",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Laboratorio: Calculadora en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html#paso-1-configuración-inicial-del-proyecto",
    "href": "unidades/Proyectos/6_calculadora.html#paso-1-configuración-inicial-del-proyecto",
    "title": "Laboratorio: Calculadora en Python",
    "section": "Paso 1: Configuración inicial del proyecto",
    "text": "Paso 1: Configuración inicial del proyecto\n\nCrear el directorio del proyecto\nComienza creando un nuevo directorio para el proyecto:\nmkdir calculadora\ncd calculadora\nInicializar un repositorio Git Inicializa un repositorio Git en la carpeta del proyecto:\ngit init\nCrear el archivo main.py\nCrea un archivo main.py que será el punto de entrada del programa:\ntouch main.py\nPrimer commit\nAñadimos el archivo inicial al control de versiones:\ngit add main.py\ngit commit -m \"Inicio del proyecto: archivo main.py creado\"",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Laboratorio: Calculadora en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html#paso-2-agregar-las-operaciones-básicas-suma-resta-multiplicación-división",
    "href": "unidades/Proyectos/6_calculadora.html#paso-2-agregar-las-operaciones-básicas-suma-resta-multiplicación-división",
    "title": "Laboratorio: Calculadora en Python",
    "section": "Paso 2: Agregar las operaciones básicas (suma, resta, multiplicación, división)",
    "text": "Paso 2: Agregar las operaciones básicas (suma, resta, multiplicación, división)\n\nCódigo inicial\nAbre el archivo main.py y añade el siguiente código para implementar las operaciones básicas:\ndef suma(a, b):\n    \"\"\"Devuelve la suma de dos números.\"\"\"\n    return a + b\n\n\ndef resta(a, b):\n    \"\"\"Devuelve la resta de dos números.\"\"\"\n    return a - b\n\n\ndef multiplicacion(a, b):\n    \"\"\"Devuelve la multiplicación de dos números.\"\"\"\n    return a * b\n\n\ndef division(a, b):\n    \"\"\"Devuelve la división de dos números. Maneja división entre cero.\"\"\"\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"Error: No se puede dividir entre cero.\"\n\n\n# Punto de entrada\nif __name__ == \"__main__\":\n    print(\"Bienvenido a la calculadora básica\")\n    num1 = float(input(\"Ingrese el primer número: \"))\n    num2 = float(input(\"Ingrese el segundo número: \"))\n\n    print(f\"Suma: {suma(num1, num2)}\")\n    print(f\"Resta: {resta(num1, num2)}\")\n    print(f\"Multiplicación: {multiplicacion(num1, num2)}\")\n    print(f\"División: {division(num1, num2)}\")\n\n\nCrear un commit\nGuarda los cambios y realiza un commit con la descripción del avance:\ngit add main.py\ngit commit -m \"Implementadas las operaciones básicas\"",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Laboratorio: Calculadora en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html#paso-3-agregar-funcionalidad-de-radicación-y-potenciación",
    "href": "unidades/Proyectos/6_calculadora.html#paso-3-agregar-funcionalidad-de-radicación-y-potenciación",
    "title": "Laboratorio: Calculadora en Python",
    "section": "Paso 3: Agregar funcionalidad de radicación y potenciación",
    "text": "Paso 3: Agregar funcionalidad de radicación y potenciación\n\nActualizar main.py\nAñadimos funciones para radicación y potenciación, y las integramos al flujo del programa:\ndef radicacion(base, indice):\n    \"\"\"Devuelve la raíz de un número dado el índice.\"\"\"\n    try:\n        return base ** (1 / indice)\n    except ZeroDivisionError:\n        return \"Error: El índice de la raíz no puede ser cero.\"\n\n\ndef potenciacion(base, exponente):\n    \"\"\"Devuelve la potencia de un número dado un exponente.\"\"\"\n    return base ** exponente\n\n\n# Punto de entrada actualizado\nif __name__ == \"__main__\":\n    print(\"Bienvenido a la calculadora extendida\")\n    num1 = float(input(\"Ingrese el primer número: \"))\n    num2 = float(input(\"Ingrese el segundo número: \"))\n\n    print(f\"Suma: {suma(num1, num2)}\")\n    print(f\"Resta: {resta(num1, num2)}\")\n    print(f\"Multiplicación: {multiplicacion(num1, num2)}\")\n    print(f\"División: {division(num1, num2)}\")\n    print(f\"Radicación: {radicacion(num1, num2)}\")\n    print(f\"Potenciación: {potenciacion(num1, num2)}\")\n\n\nCrear un commit\nGuarda los cambios y realiza un commit:\ngit add main.py\ngit commit -m \"Añadidas las operaciones de radicación y potenciación\"",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Laboratorio: Calculadora en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html#paso-4-refactorización-del-código-en-múltiples-archivos",
    "href": "unidades/Proyectos/6_calculadora.html#paso-4-refactorización-del-código-en-múltiples-archivos",
    "title": "Laboratorio: Calculadora en Python",
    "section": "Paso 4: Refactorización del código en múltiples archivos",
    "text": "Paso 4: Refactorización del código en múltiples archivos\n\nCrear estructura modular\nOrganizamos las operaciones en un archivo separado llamado operaciones.py.\ntouch operaciones.py\nEn el archivo operaciones.py, coloca las funciones:\n# operaciones.py\n\ndef suma(a, b):\n    \"\"\"Devuelve la suma de dos números.\"\"\"\n    return a + b\n\n\ndef resta(a, b):\n    \"\"\"Devuelve la resta de dos números.\"\"\"\n    return a - b\n\n\ndef multiplicacion(a, b):\n    \"\"\"Devuelve la multiplicación de dos números.\"\"\"\n    return a * b\n\n\ndef division(a, b):\n    \"\"\"Devuelve la división de dos números. Maneja división entre cero.\"\"\"\n    try:\n        resultado = a / b\n    except ZeroDivisionError:\n        return \"Error: No se puede dividir entre cero.\"\n    else:\n        return resultado\n    finally:\n        pass\n\n\ndef radicacion(base, indice):\n    \"\"\"Devuelve la raíz de un número dado el índice.\"\"\"\n    try:\n        return base ** (1 / indice)\n    except ZeroDivisionError:\n        return \"Error: El índice de la raíz no puede ser cero.\"\n\n\ndef potenciacion(base, exponente):\n    \"\"\"Devuelve la potencia de un número dado un exponente.\"\"\"\n    return base ** exponente\n\n\nActualizar main.py\nActualiza main.py para importar las funciones desde operaciones.py:\n# main.py\nfrom operaciones import suma, resta, multiplicacion, division, radicacion, potenciacion\n\nif __name__ == \"__main__\":\n    print(\"Bienvenido a la calculadora modular\")\n    num1 = float(input(\"Ingrese el primer número: \"))\n    num2 = float(input(\"Ingrese el segundo número: \"))\n\n    print(f\"Suma: {suma(num1, num2)}\")\n    print(f\"Resta: {resta(num1, num2)}\")\n    print(f\"Multiplicación: {multiplicacion(num1, num2)}\")\n    print(f\"División: {division(num1, num2)}\")\n    print(f\"Radicación: {radicacion(num1, num2)}\")\n    print(f\"Potenciación: {potenciacion(num1, num2)}\")\n\n\nCrear un commit\nGuarda los cambios y realiza un commit:\ngit add main.py operaciones.py\ngit commit -m \"Refactorización: código modularizado en main.py y operaciones.py\"",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Laboratorio: Calculadora en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html#paso-5-manejo-de-errores-más-detallado",
    "href": "unidades/Proyectos/6_calculadora.html#paso-5-manejo-de-errores-más-detallado",
    "title": "Laboratorio: Calculadora en Python",
    "section": "Paso 5: Manejo de errores más detallado",
    "text": "Paso 5: Manejo de errores más detallado\n\nMejorar el manejo de errores en division\nModifica la función division para agregar un bloque else para manejar operaciones exitosas y un finally para mostrar un mensaje final:\ndef division(a, b):\n    \"\"\"Devuelve la división de dos números.\"\"\"\n    try:\n        resultado = a / b\n    except ZeroDivisionError:\n        print(\"Operación de división intentada.\")  # Mostrar mensaje solo si ocurre un error\n        return \"Error: No se puede dividir entre cero.\"\n    else:\n        return resultado\n    finally:\n        pass  # El bloque finally se puede dejar vacío o eliminarlo si no es necesario\n\n\nCrear un commit\nRealiza un nuevo commit con los cambios:\ngit add operaciones.py\ngit commit -m \"Mejorado el manejo de errores con else y finally en división\"",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Laboratorio: Calculadora en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html#paso-6-siguientes-pasos",
    "href": "unidades/Proyectos/6_calculadora.html#paso-6-siguientes-pasos",
    "title": "Laboratorio Calculadora",
    "section": "Paso 6: Siguientes pasos",
    "text": "Paso 6: Siguientes pasos\n\nTesteo automatizado: Implementar tests para validar cada operación.\nInterfaz de usuario: Agregar un menú para que el usuario elija las operaciones.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Laboratorio Calculadora</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html#paso-6-testeo-automatizado",
    "href": "unidades/Proyectos/6_calculadora.html#paso-6-testeo-automatizado",
    "title": "Laboratorio: Calculadora en Python",
    "section": "Paso 6: Testeo automatizado",
    "text": "Paso 6: Testeo automatizado\n\nCrear pruebas unitarias\nAhora implementamos pruebas unitarias para validar cada operación usando el módulo unittest. Crea un archivo test_calculadora.py con el siguiente contenido:\n# test_calculadora.py\nimport unittest\nfrom operaciones import suma, resta, multiplicacion, division, radicacion, potenciacion\n\nclass TestCalculadora(unittest.TestCase):\n\n    def test_suma(self):\n        self.assertEqual(suma(2, 3), 5)\n\n    def test_resta(self):\n        self.assertEqual(resta(5, 3), 2)\n\n    def test_multiplicacion(self):\n        self.assertEqual(multiplicacion(2, 3), 6)\n\n    def test_division(self):\n        self.assertEqual(division(6, 3), 2)\n\n    def test_division_por_cero(self):\n        self.assertEqual(division(6, 0), \"Error: No se puede dividir entre cero\")\n\n    def test_radicacion(self):\n        self.assertEqual(radicacion(16, 4), 2)\n\n    def test_potenciacion(self):\n        self.assertEqual(potenciacion(2, 3), 8)\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n\nEjecutar las pruebas\nPara ejecutar las pruebas, usa el siguiente comando:\npython -m unittest test_calculadora.py",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Laboratorio: Calculadora en Python</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/6_calculadora.html#siguientes-pasos",
    "href": "unidades/Proyectos/6_calculadora.html#siguientes-pasos",
    "title": "Laboratorio: Calculadora en Python",
    "section": "Siguientes pasos",
    "text": "Siguientes pasos\n\nInterfaz de usuario: Agregar un menú para que el usuario elija las operaciones. Esto mejorará la interacción con la calculadora.\nMejoras adicionales: Explorar la posibilidad de agregar operaciones avanzadas como trigonometría o logaritmos.",
    "crumbs": [
      "Proyectos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Laboratorio: Calculadora en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html",
    "href": "unidades/unidad5/intro.html",
    "title": "Conceptos Avanzados en Python",
    "section": "",
    "text": "En este capitulo en particular aprenderemos los conceptos avanzados que necesitamos conocer de Python para poder avanzar con temas relacionados al desarrollo de software.\nEn el mismo aprenderemos:\n\nExepciones y Manejo de Errores\nLectura y Escritura de Archivos\nProgramación Funcional\nComprención y Generadores\nMódulos y Paquetes\nDecoradores y Context Managers\nColecciones de Datos y Estructuras Especializadas\nManipulación de Fechas y Tiempos\nConcurrencia y Paralelismo\nPruebas y Debugging\n\nEste capítulo cubre varios de los aspectos más avanzados de Python, y proporciona una base sólida para desarrollar aplicaciones web fullstack más complejas. Los ejemplos prácticos te ayudarán a entender cómo aplicar estos conceptos en situaciones reales.",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#excepciones-y-manejo-de-errores",
    "href": "unidades/unidad5/intro.html#excepciones-y-manejo-de-errores",
    "title": "Conceptos Avanzados en Python",
    "section": "1. Excepciones y Manejo de Errores",
    "text": "1. Excepciones y Manejo de Errores\n\n\n\n\nExcepciones y Manejo de Errores\n\n\n\nEl manejo adecuado de errores es esencial para escribir código robusto. Las excepciones permiten manejar situaciones inesperadas durante la ejecución de un programa sin que este termine abruptamente.\n\nConceptos clave\n\ntry: Bloque donde intentamos ejecutar código que puede generar una excepción.\nexcept: Bloque donde capturamos y gestionamos una excepción.\nelse: Bloque que se ejecuta si no hay excepciones.\nfinally: Bloque que se ejecuta independientemente de si hubo una excepción o no.\n\n\n\nEjemplo\ntry:\n    numero = int(input(\"Introduce un número: \"))\nexcept ValueError as e:\n    print(f\"Error: {e}. Introduce un número válido.\")\nelse:\n    print(f\"El número es {numero}.\")\nfinally:\n    print(\"Operación terminada.\")\n\n\nExcepciones personalizadas\nPodemos crear nuestras propias excepciones para situaciones específicas.\nclass MiError(Exception):\n    def __init__(self, mensaje):\n        self.mensaje = mensaje\n        super().__init__(self.mensaje)\n\ntry:\n    raise MiError(\"Algo salió mal\")\nexcept MiError as e:\n    print(f\"Capturado: {e}\")\n\n\nEjemplo Práctico\nObjetivo:\nAprender a manejar excepciones en Python para crear un programa robusto que gestione entradas de usuario incorrectas.\nDescripción: Crear un programa que pida al usuario un número, y en caso de que se ingrese algo que no sea un número, maneje el error de manera adecuada, mostrando un mensaje informativo.\nInstrucciones:\n\nUtiliza un bloque try-except para manejar excepciones de tipo ValueError.\nAgrega un bloque else para confirmar la entrada del usuario si es válida.\nIncluye un bloque finally que imprima un mensaje de despedida.\n\nCódigo:\ndef pedir_numero():\n    try:\n        numero = int(input(\"Introduce un número: \"))\n    except ValueError:\n        print(\"¡Error! No has introducido un número válido.\")\n    else:\n        print(f\"Has introducido el número: {numero}\")\n    finally:\n        print(\"Fin del programa\")\n\npedir_numero()",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#lectura-y-escritura-de-archivos",
    "href": "unidades/unidad5/intro.html#lectura-y-escritura-de-archivos",
    "title": "Conceptos Avanzados en Python",
    "section": "2. Lectura y Escritura de Archivos",
    "text": "2. Lectura y Escritura de Archivos\n\n\n\n\nLectura y Escritura de Archivos\n\n\n\nLeer y escribir archivos es una habilidad básica en el desarrollo de aplicaciones, como para guardar configuraciones o almacenar datos de usuarios.\n\nConceptos clave\n\nopen: Función para abrir archivos.\nModos de apertura:\n\n‘r’: Lectura.\n‘w’: Escritura.\n‘a’: Añadir datos.\n\n\nEl contexto with: Manejo automático de recursos.\nEjemplo\n# Escritura en archivo\nwith open('archivo.txt', 'w') as f:\n    f.write(\"Hola, Mundo!\\n\")\n\n# Lectura de archivo\nwith open('archivo.txt', 'r') as f:\n    contenido = f.read()\n    print(contenido)\n\n\nArchivos binarios\nPodemos manejar archivos binarios usando el modo ‘rb’ o ‘wb’:\n# Lectura binaria\nwith open('imagen.jpg', 'rb') as f:\n    datos = f.read()\n\n\nEjemplo Práctico\nObjetivo:\nAprender a leer y escribir archivos de texto en Python.\nDescripción: Crear un programa que pida al usuario un texto y lo escriba en un archivo de texto. Luego, el programa debe leer el archivo y mostrar su contenido.\nInstrucciones:\n\nPide un texto al usuario.\nEscribe ese texto en un archivo llamado entrada.txt.\nLuego, lee el archivo y muestra su contenido en la consola.\n\nCódigo:\ndef escribir_y_leer_archivo():\n    # Escribir en el archivo\n    with open('entrada.txt', 'w') as archivo:\n        texto = input(\"Escribe algo: \")\n        archivo.write(texto)\n    \n    # Leer el archivo\n    with open('entrada.txt', 'r') as archivo:\n        contenido = archivo.read()\n        print(f\"Contenido del archivo: {contenido}\")\n\nescribir_y_leer_archivo()",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#programación-funcional",
    "href": "unidades/unidad5/intro.html#programación-funcional",
    "title": "Conceptos Avanzados en Python",
    "section": "3. Programación Funcional",
    "text": "3. Programación Funcional\n\n\n\n\nProgramación Funcional\n\n\n\nPython soporta parcialmente la programación funcional, lo que permite escribir código más limpio y conciso.\n\nConceptos clave\n\nlambda: Funciones anónimas.\nmap: Aplica una función a cada ítem de un iterable.\nfilter: Filtra elementos de un iterable según una condición.\nreduce: Reducción de un iterable a un único valor.\n\n\n\nComprensión de listas y generadores.\nEjemplo\n# Uso de lambda y map\nnumeros = [1, 2, 3, 4]\ndobles = list(map(lambda x: x * 2, numeros))\nprint(dobles)\n\n# Uso de filter\npares = list(filter(lambda x: x % 2 == 0, numeros))\nprint(pares)\n\n# Uso de reduce\nfrom functools import reduce\nsuma = reduce(lambda x, y: x + y, numeros)\nprint(suma)\n\n\nEjemplo Práctico\nObjetivo:\nAprender a utilizar funciones lambda y operaciones como map, filter y reduce para trabajar con colecciones de datos.\nDescripción:\nCrear un programa que utilice una lista de números para aplicar operaciones funcionales usando lambda, map, filter y reduce.\nInstrucciones:\n\nCrea una lista de números del 1 al 10.\nUsa map con una función lambda para obtener el doble de cada número.\nUsa filter para filtrar solo los números pares.\nUsa reduce para obtener la suma de todos los números en la lista.\n\nCódigo:\nfrom functools import reduce\n\n# Lista de números\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Usando map con lambda\ndobles = list(map(lambda x: x * 2, numeros))\nprint(f\"Lista de dobles: {dobles}\")\n\n# Usando filter con lambda\npares = list(filter(lambda x: x % 2 == 0, numeros))\nprint(f\"Números pares: {pares}\")\n\n# Usando reduce con lambda\nsuma = reduce(lambda x, y: x + y, numeros)\nprint(f\"Suma de números: {suma}\")",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#comprensiones-y-generadores",
    "href": "unidades/unidad5/intro.html#comprensiones-y-generadores",
    "title": "Conceptos Avanzados en Python",
    "section": "4. Comprensiones y Generadores",
    "text": "4. Comprensiones y Generadores\n\n\n\n\nComprensiones y Generadores\n\n\n\nLas comprensiones proporcionan una manera más compacta de crear colecciones. Los generadores permiten trabajar con grandes volúmenes de datos de manera eficiente.\n\nConceptos clave\n\nComprensión de listas, diccionarios y conjuntos.\nGeneradores y yield.\n\nEjemplo\n# Comprensión de lista\ncuadrados = [x**2 for x in range(5)]\nprint(cuadrados)\n\n# Generador\ndef contador():\n    for i in range(5):\n        yield i\n\ngen = contador()\nfor valor in gen:\n    print(valor)\n\n\nEjemplo Práctico\nObjetivo:\nAprender a crear listas, diccionarios y generadores utilizando comprensiones y el comando yield.\nDescripción:\nCrea un programa que use comprensiones de listas y diccionarios para realizar operaciones sobre una lista de palabras, y usa un generador para crear una secuencia de números.\nInstrucciones:\n\nUsa una comprensión de lista para crear una lista de las longitudes de las palabras.\nUsa una comprensión de diccionario para contar la frecuencia de cada letra en un conjunto de palabras.\nUsa un generador para producir los primeros 10 números pares.\n\nCódigo:\n# Lista de palabras\npalabras = [\"python\", \"django\", \"flask\", \"javascript\"]\n\n# Comprensión de lista para obtener las longitudes de las palabras\nlongitudes = [len(palabra) for palabra in palabras]\nprint(f\"Longitudes de las palabras: {longitudes}\")\n\n# Comprensión de diccionario para contar las frecuencias de las letras\nfrecuencia = {letra: palabras[0].count(letra) for letra in palabras[0]}\nprint(f\"Frecuencia de letras en la primera palabra: {frecuencia}\")\n\n# Generador para números pares\ndef generador_pares():\n    for i in range(0, 20, 2):\n        yield i\n\n# Mostrar los números generados\nfor numero in generador_pares():\n    print(numero)",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#módulos-y-paquetes-avanzados",
    "href": "unidades/unidad5/intro.html#módulos-y-paquetes-avanzados",
    "title": "Conceptos Avanzados en Python",
    "section": "5. Módulos y Paquetes Avanzados",
    "text": "5. Módulos y Paquetes Avanzados\n\n\n\n\nMódulos y Paquetes\n\n\n\nOrganizar el código en módulos y paquetes es fundamental para proyectos grandes.\n\nConceptos clave\n\nImportación relativa y absoluta.\ninit.py: Archivo necesario para que un directorio sea reconocido como un paquete.\nGestión de dependencias.\n\nEjemplo\n# Importación absoluta\nimport mi_modulo\n\n# Importación relativa\nfrom . import mi_modulo\n\n\nEjemplo Práctico\nObjetivo:\nAprender a organizar el código en módulos y paquetes para proyectos más grandes.\nDescripción:\nCrea un proyecto con múltiples archivos Python y organiza el código en módulos. Simula un programa de gestión de tareas.\nInstrucciones:\n\nCrea una carpeta llamada tareas.\nDentro de esa carpeta, crea tres archivos:\ninit.py: Para inicializar el paquete.\ngestor.py: Para gestionar tareas.\nprincipal.py: Para ejecutar el programa.\n\nCódigo:\ngestor.py:\ndef agregar_tarea(tarea):\n    tareas.append(tarea)\n    print(f\"Tarea '{tarea}' agregada.\")\n    \ndef listar_tareas():\n    for tarea in tareas:\n        print(f\"- {tarea}\")\n\ntareas = []\nprincipal.py:\nfrom tareas.gestor import agregar_tarea, listar_tareas\n\nagregar_tarea(\"Estudiar Python\")\nagregar_tarea(\"Leer libro de programación\")\nlistar_tareas()",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#decoradores-y-context-managers",
    "href": "unidades/unidad5/intro.html#decoradores-y-context-managers",
    "title": "Conceptos Avanzados en Python",
    "section": "6. Decoradores y Context Managers",
    "text": "6. Decoradores y Context Managers\n\n\n\n\nDecoradores\n\n\n\nLos decoradores permiten modificar el comportamiento de una función, mientras que los context managers gestionan recursos como archivos o conexiones a bases de datos.\n\nConceptos clave\n\n(decorator?): Sintaxis para aplicar un decorador.\nwith y enter, exit: Para crear context managers.\n\nEjemplo\n# Decorador\ndef mi_decorador(func):\n    def wrapper():\n        print(\"Antes de la función\")\n        func()\n        print(\"Después de la función\")\n    return wrapper\n\n@mi_decorador\ndef saludo():\n    print(\"Hola\")\n\nsaludo()\n\n# Context manager\nclass MiContexto:\n    def __enter__(self):\n        print(\"Entrando al contexto\")\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print(\"Saliendo del contexto\")\n\nwith MiContexto():\n    print(\"Dentro del contexto\")\n\n\nEjemplo Práctico\nObjetivo:\nAprender a crear decoradores y context managers en Python.\nDescripción: Crea un decorador que registre la ejecución de una función y un context manager que gestione un archivo de log.\nInstrucciones:\n\nCrea un decorador que imprima la fecha y hora de la ejecución de una función.\nCrea un context manager que gestione la apertura y cierre de un archivo de log.\n\nCódigo:\nimport time\n\n# Decorador que registra la ejecución de una función\ndef registrar(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Ejecutando {func.__name__} a las {time.strftime('%H:%M:%S')}\")\n        return func(*args, **kwargs)\n    return wrapper\n\n@registrar\ndef saludo():\n    print(\"¡Hola, Mundo!\")\n\nsaludo()\n\n# Context manager para log\nclass LogManager:\n    def __enter__(self):\n        self.archivo = open('log.txt', 'a')\n        return self.archivo\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.archivo.close()\n\nwith LogManager() as log:\n    log.write(f\"Acción registrada a las {time.strftime('%H:%M:%S')}\\n\")",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#colecciones-de-datos-y-estructuras-especializadas",
    "href": "unidades/unidad5/intro.html#colecciones-de-datos-y-estructuras-especializadas",
    "title": "Conceptos Avanzados en Python",
    "section": "7. Colecciones de Datos y Estructuras Especializadas",
    "text": "7. Colecciones de Datos y Estructuras Especializadas\n\n\n\n\nColecciones\n\n\n\nLa librería collections ofrece estructuras de datos útiles para optimizar el código.\n\nConceptos clave\n\nCounter: Cuenta elementos.\ndeque: Cola de doble extremo.\ndefaultdict: Diccionario con valores predeterminados.\nnamedtuple: Tupla con nombre.\n\nEjemplo\nfrom collections import Counter, deque, defaultdict, namedtuple\n\n# Counter\nc = Counter([1, 2, 2, 3])\nprint(c)\n\n# deque\nd = deque([1, 2, 3])\nd.append(4)\nprint(d)\n\n# defaultdict\ndd = defaultdict(int)\ndd['a'] += 1\nprint(dd)\n\n# namedtuple\nPersona = namedtuple('Persona', 'nombre edad')\npersona = Persona(nombre='Juan', edad=30)\nprint(persona.nombre)\n\n\nEjemplo Práctico\nObjetivo:\nAprender a utilizar estructuras de datos avanzadas como Counter, deque y defaultdict.\nDescripción:\nCrea un programa que utilice Counter para contar elementos, deque para manipular una cola y defaultdict para un diccionario con valores predeterminados.\nInstrucciones:\n\nUsa Counter para contar las palabras en una frase.\nUsa deque para simular una cola.\nUsa defaultdict para contar ocurrencias de letras en un texto. | Código:\n\nfrom collections import Counter, deque, defaultdict\n\n# Usando Counter\nfrase = \"python python flask flask flask\"\ncontador = Counter(frase.split())\nprint(contador)\n\n# Usando deque\ncola = deque([1, 2, 3])\ncola.append(4)\ncola.popleft()\nprint(cola)\n\n# Usando defaultdict\ntexto = \"hola mundo\"\nletras = defaultdict(int)\nfor letra in texto:\n    letras[letra] += 1\nprint(letras)",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#manipulación-de-fechas-y-tiempos",
    "href": "unidades/unidad5/intro.html#manipulación-de-fechas-y-tiempos",
    "title": "Conceptos Avanzados en Python",
    "section": "8. Manipulación de Fechas y Tiempos",
    "text": "8. Manipulación de Fechas y Tiempos\n\n\n\n\nFechas\n\n\n\nTrabajar con fechas y horas es una parte fundamental en muchas aplicaciones.\n\nConceptos clave\n\ndatetime: Para trabajar con fechas y horas.\ntime: Para trabajar con tiempos.\npytz: Para manejar zonas horarias.\n\nEjemplo\nfrom datetime import datetime\n\n# Fecha y hora actuales\nahora = datetime.now()\nprint(ahora)\n\n# Formateo de fecha\nfecha_formateada = ahora.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(fecha_formateada)\n\n\nEjemplo Práctico\nObjetivo:\nAprender a trabajar con fechas y horas utilizando el módulo datetime.\nDescripción: Crea un programa que calcule el tiempo restante hasta un evento futuro.\nInstrucciones:\n\nUsa datetime para calcular la fecha y hora actuales.\nCalcula el tiempo restante hasta un evento programado (por ejemplo, fin de año).\n\nCódigo:\nfrom datetime import datetime\n\n# Fecha actual\nfecha_actual = datetime.now()\nprint(f\"Fecha y hora actuales: {fecha_actual}\")\n\n# Fecha de un evento\nevento = datetime(2024, 12, 31, 23, 59, 59)\n\n# Tiempo restante\ntiempo_restante = evento - fecha_actual\nprint(f\"Tiempo restante hasta el evento: {tiempo_restante}\")",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#concurrencia-y-paralelismo",
    "href": "unidades/unidad5/intro.html#concurrencia-y-paralelismo",
    "title": "Conceptos Avanzados en Python",
    "section": "9. Concurrencia y Paralelismo",
    "text": "9. Concurrencia y Paralelismo\nEn aplicaciones que requieren ejecutar múltiples tareas simultáneamente, la concurrencia y el paralelismo permiten mejorar el rendimiento.\n\nConceptos clave\n\nthreading: Hilos de ejecución.\nmultiprocessing: Procesos independientes.\nasyncio y async/await: Manejo de tareas asincrónicas.\n\nEjemplo\nimport threading\n\ndef tarea():\n    print(\"Tarea ejecutada por hilo\")\n\n# Crear un hilo\nhilo = threading.Thread(target=tarea)\nhilo.start()\nhilo.join()\n\n\nEjemplo Práctico\nObjetivo:\nAprender a utilizar técnicas de concurrencia y paralelismo para ejecutar tareas de manera simultánea y mejorar el rendimiento de las aplicaciones.\nDescripción:\nEn este ejemplo se utilizan tres enfoques diferentes de concurrencia: threading, multiprocessing y asyncio. Cada uno es útil en diferentes escenarios según la naturaleza de la tarea que se quiere realizar.\nInstrucciones:\n\nCrea una función simple que imprima un mensaje.\nImplementa la ejecución concurrente de esa función utilizando threading, multiprocessing y asyncio.\n\nEjemplos prácticos:\n\n1. Uso de threading:\nEl módulo threading permite ejecutar funciones de forma concurrente en múltiples hilos dentro de un solo proceso.\nimport threading\n\ndef tarea():\n    print(\"Tarea ejecutada por hilo\")\n\n# Crear un hilo\nhilo = threading.Thread(target=tarea)\nhilo.start()\nhilo.join()  # Esperar a que termine la ejecución del hilo\nprint(\"Hilo terminado\")\n\n\n2. Uso de multiprocessing:\nEl módulo multiprocessing permite ejecutar funciones en múltiples procesos independientes, lo que es útil para tareas que consumen mucho CPU.\nimport multiprocessing\n\ndef tarea():\n    print(\"Tarea ejecutada por proceso\")\n\n# Crear un proceso\nproceso = multiprocessing.Process(target=tarea)\nproceso.start()\nproceso.join()  # Esperar a que termine la ejecución del proceso\nprint(\"Proceso terminado\")\n\n\n3. Uso de asyncio y async/await:\nEl módulo asyncio permite manejar operaciones de entrada/salida asincrónicas de manera eficiente, sin bloquear el hilo principal.\nimport asyncio\n\nasync def tarea():\n    print(\"Tarea asincrónica ejecutada\")\n    await asyncio.sleep(2)  # Simula una tarea asincrónica con espera\n    print(\"Tarea asincrónica terminada\")\n\n# Ejecutar tareas asincrónicas\nasync def main():\n    await asyncio.gather(tarea(), tarea())\n\nasyncio.run(main())  # Ejecuta el bucle de eventos",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/intro.html#pruebas-y-debugging",
    "href": "unidades/unidad5/intro.html#pruebas-y-debugging",
    "title": "Conceptos Avanzados en Python",
    "section": "10. Pruebas y Debugging",
    "text": "10. Pruebas y Debugging\n\n\n\n\nPruebas y Debugging\n\n\n\nEscribir pruebas y depurar el código son prácticas esenciales para garantizar la calidad y facilitar el mantenimiento.\n\nConceptos clave\n\nunittest y pytest: Frameworks para pruebas.\nassert: Para comprobar condiciones.\npdb: Para depuración interactiva.\n\nEjemplo\n# Prueba simple con unittest\nimport unittest\n\ndef suma(a, b):\n    return a + b\n\nclass TestSuma(unittest.TestCase):\n    def test_suma(self):\n        self.assertEqual(suma(1, 2), 3)\n\nif __name__ == '__main__':\n    unittest.main()\n\n\nEjemplo Práctico\nObjetivo:\nAprender a escribir pruebas unitarias y utilizar herramientas de depuración para asegurar la calidad del código.\nDescripción:\nEn este tema se cubren pruebas unitarias con unittest, depuración con pdb y el uso de pytest para realizar pruebas automatizadas.\nInstrucciones:\n\nEscribe pruebas unitarias para una función que realiza una operación matemática (suma).\nAprende a utilizar el depurador pdb para inspeccionar el flujo de ejecución.\n\nEjemplos prácticos:\n\n1. Pruebas con unittest:\nEl módulo unittest permite crear casos de prueba, asegurando que el código funcione correctamente.\nimport unittest\n\n# Función simple que vamos a probar\ndef suma(a, b):\n    return a + b\n\n# Clase de prueba\nclass TestSuma(unittest.TestCase):\n    def test_suma(self):\n        self.assertEqual(suma(1, 2), 3)  # Verifica que la suma de 1 y 2 sea 3\n\nif __name__ == '__main__':\n    unittest.main()  # Ejecuta las pruebas\n\n\n2. Pruebas con pytest:\npytest es una alternativa moderna y más sencilla para realizar pruebas. Aquí utilizamos el mismo ejemplo de la función suma.\n# Guarda esto en un archivo llamado test_funciones.py\n\ndef suma(a, b):\n    return a + b\n\ndef test_suma():\n    assert suma(1, 2) == 3  # Verifica que la suma de 1 y 2 sea 3\nEjecuta las pruebas con el comando:\npytest test_funciones.py\n\n\n3. Depuración con pdb:\nEl depurador pdb permite interactuar con el código paso a paso, inspectando variables y el flujo de ejecución.\nimport pdb\n\ndef suma(a, b):\n    pdb.set_trace()  # Aquí se activa el depurador\n    return a + b\n\nresultado = suma(1, 2)\nprint(f\"Resultado: {resultado}\")\nCuando ejecutes el programa, el depurador se activará en pdb.set_trace(). Desde ahí, podrás usar comandos como n para avanzar a la siguiente línea o p para imprimir el valor de una variable.\nComandos útiles de pdb:\n\nn: Ejecuta la siguiente línea de código.\np variable: Muestra el valor de una variable.\nq: Sale del depurador\n\nEste capítulo cubre varios de los aspectos más avanzados de Python, y proporciona una base sólida para desarrollar aplicaciones web fullstack más complejas. Los ejemplos prácticos te ayudarán a entender cómo aplicar estos conceptos en situaciones reales.",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conceptos Avanzados en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_exepciones_manejo_de_errores.html",
    "href": "unidades/unidad5/1_exepciones_manejo_de_errores.html",
    "title": "Excepciones y Manejo de Errores",
    "section": "",
    "text": "Excepciones y Manejo de Errores\n\n\n\nEl manejo adecuado de errores es esencial para escribir código robusto. Las excepciones permiten manejar situaciones inesperadas durante la ejecución de un programa sin que este termine abruptamente.\n\nConceptos clave\n\ntry: Bloque donde intentamos ejecutar código que puede generar una excepción.\nexcept: Bloque donde capturamos y gestionamos una excepción.\nelse: Bloque que se ejecuta si no hay excepciones.\nfinally: Bloque que se ejecuta independientemente de si hubo una excepción o no.\n\n\n\nEjemplo\ntry:\n    numero = int(input(\"Introduce un número: \"))\nexcept ValueError as e:\n    print(f\"Error: {e}. Introduce un número válido.\")\nelse:\n    print(f\"El número es {numero}.\")\nfinally:\n    print(\"Operación terminada.\")\n\n\nExcepciones personalizadas\nPodemos crear nuestras propias excepciones para situaciones específicas.\nclass MiError(Exception):\n    def __init__(self, mensaje):\n        self.mensaje = mensaje\n        super().__init__(self.mensaje)\n\ntry:\n    raise MiError(\"Algo salió mal\")\nexcept MiError as e:\n    print(f\"Capturado: {e}\")\n\n\nEjemplo Práctico\nObjetivo:\nAprender a manejar excepciones en Python para crear un programa robusto que gestione entradas de usuario incorrectas.\nDescripción: Crear un programa que pida al usuario un número, y en caso de que se ingrese algo que no sea un número, maneje el error de manera adecuada, mostrando un mensaje informativo.\nInstrucciones:\n\nUtiliza un bloque try-except para manejar excepciones de tipo ValueError.\nAgrega un bloque else para confirmar la entrada del usuario si es válida.\nIncluye un bloque finally que imprima un mensaje de despedida.\n\n\n\nPosibles soluciones\n\nCódigo:\ndef pedir_numero():\n    try:\n        numero = int(input(\"Introduce un número: \"))\n    except ValueError:\n        print(\"¡Error! No has introducido un número válido.\")\n    else:\n        print(f\"Has introducido el número: {numero}\")\n    finally:\n        print(\"Fin del programa\")\n\npedir_numero()",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Excepciones y Manejo de Errores</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_lectura_y_escritura_de_archivos.html",
    "href": "unidades/unidad5/2_lectura_y_escritura_de_archivos.html",
    "title": "Lectura y Escritura de Archivos",
    "section": "",
    "text": "Lectura y Escritura de Archivos\n\n\n\nLeer y escribir archivos es una habilidad básica en el desarrollo de aplicaciones, como para guardar configuraciones o almacenar datos de usuarios.\n\nConceptos clave\n\nopen: Función para abrir archivos.\nModos de apertura:\n\n‘r’: Lectura.\n‘w’: Escritura.\n‘a’: Añadir datos.\n\n\nEl contexto with: Manejo automático de recursos.\nEjemplo\n# Escritura en archivo\nwith open('archivo.txt', 'w') as f:\n    f.write(\"Hola, Mundo!\\n\")\n\n# Lectura de archivo\nwith open('archivo.txt', 'r') as f:\n    contenido = f.read()\n    print(contenido)\n\n\nArchivos binarios\nPodemos manejar archivos binarios usando el modo ‘rb’ o ‘wb’:\n# Lectura binaria\nwith open('imagen.jpg', 'rb') as f:\n    datos = f.read()\n\n\nEjemplo Práctico\nObjetivo:\nAprender a leer y escribir archivos de texto en Python.\nDescripción: Crear un programa que pida al usuario un texto y lo escriba en un archivo de texto. Luego, el programa debe leer el archivo y mostrar su contenido.\nInstrucciones:\n\nPide un texto al usuario.\nEscribe ese texto en un archivo llamado entrada.txt.\nLuego, lee el archivo y muestra su contenido en la consola.\n\n\n\nPosibles soluciones\n\nCódigo:\ndef escribir_y_leer_archivo():\n    # Escribir en el archivo\n    with open('entrada.txt', 'w') as archivo:\n        texto = input(\"Escribe algo: \")\n        archivo.write(texto)\n    \n    # Leer el archivo\n    with open('entrada.txt', 'r') as archivo:\n        contenido = archivo.read()\n        print(f\"Contenido del archivo: {contenido}\")\n\nescribir_y_leer_archivo()\n:::",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lectura y Escritura de Archivos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/3_programacion_funcional.html",
    "href": "unidades/unidad5/3_programacion_funcional.html",
    "title": "Programación Funcional",
    "section": "",
    "text": "Programación Funcional\n\n\n\nPython soporta parcialmente la programación funcional, lo que permite escribir código más limpio y conciso.\n\nConceptos clave\n\nlambda: Funciones anónimas.\nmap: Aplica una función a cada ítem de un iterable.\nfilter: Filtra elementos de un iterable según una condición.\nreduce: Reducción de un iterable a un único valor.\n\n\n\nComprensión de listas y generadores.\nEjemplo\n# Uso de lambda y map\nnumeros = [1, 2, 3, 4]\ndobles = list(map(lambda x: x * 2, numeros))\nprint(dobles)\n\n# Uso de filter\npares = list(filter(lambda x: x % 2 == 0, numeros))\nprint(pares)\n\n# Uso de reduce\nfrom functools import reduce\nsuma = reduce(lambda x, y: x + y, numeros)\nprint(suma)\n\n\nEjemplo Práctico\nObjetivo:\nAprender a utilizar funciones lambda y operaciones como map, filter y reduce para trabajar con colecciones de datos.\nDescripción:\nCrear un programa que utilice una lista de números para aplicar operaciones funcionales usando lambda, map, filter y reduce.\nInstrucciones:\n\nCrea una lista de números del 1 al 10.\nUsa map con una función lambda para obtener el doble de cada número.\nUsa filter para filtrar solo los números pares.\nUsa reduce para obtener la suma de todos los números en la lista.\n\n\n\nPosibles soluciones\n\nCódigo:\nfrom functools import reduce\n\n# Lista de números\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Usando map con lambda\ndobles = list(map(lambda x: x * 2, numeros))\nprint(f\"Lista de dobles: {dobles}\")\n\n# Usando filter con lambda\npares = list(filter(lambda x: x % 2 == 0, numeros))\nprint(f\"Números pares: {pares}\")\n\n# Usando reduce con lambda\nsuma = reduce(lambda x, y: x + y, numeros)\nprint(f\"Suma de números: {suma}\")",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Programación Funcional</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_comprension_y_generadores.html",
    "href": "unidades/unidad5/4_comprension_y_generadores.html",
    "title": "Comprensiones y Generadores",
    "section": "",
    "text": "Comprensiones y Generadores\n\n\n\nLas comprensiones proporcionan una manera más compacta de crear colecciones. Los generadores permiten trabajar con grandes volúmenes de datos de manera eficiente.\n\nConceptos clave\n\nComprensión de listas, diccionarios y conjuntos.\nGeneradores y yield.\n\nEjemplo\n# Comprensión de lista\ncuadrados = [x**2 for x in range(5)]\nprint(cuadrados)\n\n# Generador\ndef contador():\n    for i in range(5):\n        yield i\n\ngen = contador()\nfor valor in gen:\n    print(valor)\n\n\nEjemplo Práctico\nObjetivo:\nAprender a crear listas, diccionarios y generadores utilizando comprensiones y el comando yield.\nDescripción:\nCrea un programa que use comprensiones de listas y diccionarios para realizar operaciones sobre una lista de palabras, y usa un generador para crear una secuencia de números.\nInstrucciones:\n\nUsa una comprensión de lista para crear una lista de las longitudes de las palabras.\nUsa una comprensión de diccionario para contar la frecuencia de cada letra en un conjunto de palabras.\nUsa un generador para producir los primeros 10 números pares.\n\n\n\nPosibles soluciones\n\nCódigo:\n# Lista de palabras\npalabras = [\"python\", \"django\", \"flask\", \"javascript\"]\n\n# Comprensión de lista para obtener las longitudes de las palabras\nlongitudes = [len(palabra) for palabra in palabras]\nprint(f\"Longitudes de las palabras: {longitudes}\")\n\n# Comprensión de diccionario para contar las frecuencias de las letras\nfrecuencia = {letra: palabras[0].count(letra) for letra in palabras[0]}\nprint(f\"Frecuencia de letras en la primera palabra: {frecuencia}\")\n\n# Generador para números pares\ndef generador_pares():\n    for i in range(0, 20, 2):\n        yield i\n\n# Mostrar los números generados\nfor numero in generador_pares():\n    print(numero)",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Comprensiones y Generadores</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_modulos_y_paquetes_avanzados.html",
    "href": "unidades/unidad5/5_modulos_y_paquetes_avanzados.html",
    "title": "Módulos y Paquetes Avanzados",
    "section": "",
    "text": "Módulos y Paquetes\n\n\n\nOrganizar el código en módulos y paquetes es fundamental para proyectos grandes.\n\nConceptos clave\n\nImportación relativa y absoluta.\ninit.py: Archivo necesario para que un directorio sea reconocido como un paquete.\nGestión de dependencias.\n\nEjemplo\n# Importación absoluta\nimport mi_modulo\n\n# Importación relativa\nfrom . import mi_modulo\n\n\nEjemplo Práctico\nObjetivo:\nAprender a organizar el código en módulos y paquetes para proyectos más grandes.\nDescripción:\nCrea un proyecto con múltiples archivos Python y organiza el código en módulos. Simula un programa de gestión de tareas.\nInstrucciones:\n\nCrea una carpeta llamada tareas.\nDentro de esa carpeta, crea tres archivos:\ninit.py: Para inicializar el paquete.\ngestor.py: Para gestionar tareas.\nprincipal.py: Para ejecutar el programa.\n\n\n\nPosibles soluciones\n\nCódigo:\ngestor.py:\ndef agregar_tarea(tarea):\n    tareas.append(tarea)\n    print(f\"Tarea '{tarea}' agregada.\")\n    \ndef listar_tareas():\n    for tarea in tareas:\n        print(f\"- {tarea}\")\n\ntareas = []\nprincipal.py:\nfrom tareas.gestor import agregar_tarea, listar_tareas\n\nagregar_tarea(\"Estudiar Python\")\nagregar_tarea(\"Leer libro de programación\")\nlistar_tareas()",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Módulos y Paquetes Avanzados</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/6_decoradores_y_context_managers.html",
    "href": "unidades/unidad5/6_decoradores_y_context_managers.html",
    "title": "Decoradores y Context Managers",
    "section": "",
    "text": "Decoradores\n\n\n\nLos decoradores permiten modificar el comportamiento de una función, mientras que los context managers gestionan recursos como archivos o conexiones a bases de datos.\n\nConceptos clave\n\n(decorator?): Sintaxis para aplicar un decorador.\nwith y enter, exit: Para crear context managers.\n\nEjemplo\n# Decorador\ndef mi_decorador(func):\n    def wrapper():\n        print(\"Antes de la función\")\n        func()\n        print(\"Después de la función\")\n    return wrapper\n\n@mi_decorador\ndef saludo():\n    print(\"Hola\")\n\nsaludo()\n\n# Context manager\nclass MiContexto:\n    def __enter__(self):\n        print(\"Entrando al contexto\")\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print(\"Saliendo del contexto\")\n\nwith MiContexto():\n    print(\"Dentro del contexto\")\n\n\nEjemplo Práctico\nObjetivo:\nAprender a crear decoradores y context managers en Python.\nDescripción: Crea un decorador que registre la ejecución de una función y un context manager que gestione un archivo de log.\nInstrucciones:\n\nCrea un decorador que imprima la fecha y hora de la ejecución de una función.\nCrea un context manager que gestione la apertura y cierre de un archivo de log.\n\n\n\nPosibles soluciones\n\nCódigo:\nimport time\n\n# Decorador que registra la ejecución de una función\ndef registrar(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Ejecutando {func.__name__} a las {time.strftime('%H:%M:%S')}\")\n        return func(*args, **kwargs)\n    return wrapper\n\n@registrar\ndef saludo():\n    print(\"¡Hola, Mundo!\")\n\nsaludo()\n\n# Context manager para log\nclass LogManager:\n    def __enter__(self):\n        self.archivo = open('log.txt', 'a')\n        return self.archivo\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.archivo.close()\n\nwith LogManager() as log:\n    log.write(f\"Acción registrada a las {time.strftime('%H:%M:%S')}\\n\")",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Decoradores y Context Managers</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/7_colecciones_de_datos_y_estructuras_especializadas.html",
    "href": "unidades/unidad5/7_colecciones_de_datos_y_estructuras_especializadas.html",
    "title": "Colecciones de Datos y Estructuras Especializadas",
    "section": "",
    "text": "Colecciones\n\n\n\nLa librería collections ofrece estructuras de datos útiles para optimizar el código.\n\nConceptos clave\n\nCounter: Cuenta elementos.\ndeque: Cola de doble extremo.\ndefaultdict: Diccionario con valores predeterminados.\nnamedtuple: Tupla con nombre.\n\nEjemplo\nfrom collections import Counter, deque, defaultdict, namedtuple\n\n# Counter\nc = Counter([1, 2, 2, 3])\nprint(c)\n\n# deque\nd = deque([1, 2, 3])\nd.append(4)\nprint(d)\n\n# defaultdict\ndd = defaultdict(int)\ndd['a'] += 1\nprint(dd)\n\n# namedtuple\nPersona = namedtuple('Persona', 'nombre edad')\npersona = Persona(nombre='Juan', edad=30)\nprint(persona.nombre)\n\n\nEjemplo Práctico\nObjetivo:\nAprender a utilizar estructuras de datos avanzadas como Counter, deque y defaultdict.\nDescripción:\nCrea un programa que utilice Counter para contar elementos, deque para manipular una cola y defaultdict para un diccionario con valores predeterminados.\nInstrucciones:\n\nUsa Counter para contar las palabras en una frase.\nUsa deque para simular una cola.\nUsa defaultdict para contar ocurrencias de letras en un texto.\n\n\n\nPosibles soluciones\n\nCódigo:\nfrom collections import Counter, deque, defaultdict\n\n# Usando Counter\nfrase = \"python python flask flask flask\"\ncontador = Counter(frase.split())\nprint(contador)\n\n# Usando deque\ncola = deque([1, 2, 3])\ncola.append(4)\ncola.popleft()\nprint(cola)\n\n# Usando defaultdict\ntexto = \"hola mundo\"\nletras = defaultdict(int)\nfor letra in texto:\n    letras[letra] += 1\nprint(letras)",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Colecciones de Datos y Estructuras Especializadas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/8_manipulacion_de_fechas_y_tiempos.html",
    "href": "unidades/unidad5/8_manipulacion_de_fechas_y_tiempos.html",
    "title": "Manipulación de Fechas y Tiempos",
    "section": "",
    "text": "Fechas\n\n\n\nTrabajar con fechas y horas es una parte fundamental en muchas aplicaciones.\n\nConceptos clave\n\ndatetime: Para trabajar con fechas y horas.\ntime: Para trabajar con tiempos.\npytz: Para manejar zonas horarias.\n\nEjemplo\nfrom datetime import datetime\n\n# Fecha y hora actuales\nahora = datetime.now()\nprint(ahora)\n\n# Formateo de fecha\nfecha_formateada = ahora.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(fecha_formateada)\n\n\nEjemplo Práctico\nObjetivo:\nAprender a trabajar con fechas y horas utilizando el módulo datetime.\nDescripción: Crea un programa que calcule el tiempo restante hasta un evento futuro.\nInstrucciones:\n\nUsa datetime para calcular la fecha y hora actuales.\nCalcula el tiempo restante hasta un evento programado (por ejemplo, fin de año).\n\n\n\nPosibles soluciones\n\nCódigo:\nfrom datetime import datetime\n\n# Fecha actual\nfecha_actual = datetime.now()\nprint(f\"Fecha y hora actuales: {fecha_actual}\")\n\n# Fecha de un evento\nevento = datetime(2024, 12, 31, 23, 59, 59)\n\n# Tiempo restante\ntiempo_restante = evento - fecha_actual\nprint(f\"Tiempo restante hasta el evento: {tiempo_restante}\")",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Manipulación de Fechas y Tiempos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/9_concurrencia_y_paralelismo.html",
    "href": "unidades/unidad5/9_concurrencia_y_paralelismo.html",
    "title": "Concurrencia y Paralelismo",
    "section": "",
    "text": "En aplicaciones que requieren ejecutar múltiples tareas simultáneamente, la concurrencia y el paralelismo permiten mejorar el rendimiento.\n\nConceptos clave\n\nthreading: Hilos de ejecución.\nmultiprocessing: Procesos independientes.\nasyncio y async/await: Manejo de tareas asincrónicas.\n\nEjemplo\nimport threading\n\ndef tarea():\n    print(\"Tarea ejecutada por hilo\")\n\n# Crear un hilo\nhilo = threading.Thread(target=tarea)\nhilo.start()\nhilo.join()\n\n\nEjemplo Práctico\nObjetivo:\nAprender a utilizar técnicas de concurrencia y paralelismo para ejecutar tareas de manera simultánea y mejorar el rendimiento de las aplicaciones.\nDescripción:\nEn este ejemplo se utilizan tres enfoques diferentes de concurrencia: threading, multiprocessing y asyncio. Cada uno es útil en diferentes escenarios según la naturaleza de la tarea que se quiere realizar.\nInstrucciones:\n\nCrea una función simple que imprima un mensaje.\nImplementa la ejecución concurrente de esa función utilizando threading, multiprocessing y asyncio.\n\nEjemplos prácticos:\n\n1. Uso de threading:\nEl módulo threading permite ejecutar funciones de forma concurrente en múltiples hilos dentro de un solo proceso.\nimport threading\n\ndef tarea():\n    print(\"Tarea ejecutada por hilo\")\n\n# Crear un hilo\nhilo = threading.Thread(target=tarea)\nhilo.start()\nhilo.join()  # Esperar a que termine la ejecución del hilo\nprint(\"Hilo terminado\")\n\n\n2. Uso de multiprocessing:\nEl módulo multiprocessing permite ejecutar funciones en múltiples procesos independientes, lo que es útil para tareas que consumen mucho CPU.\nimport multiprocessing\n\ndef tarea():\n    print(\"Tarea ejecutada por proceso\")\n\n# Crear un proceso\nproceso = multiprocessing.Process(target=tarea)\nproceso.start()\nproceso.join()  # Esperar a que termine la ejecución del proceso\nprint(\"Proceso terminado\")\n\n\n3. Uso de asyncio y async/await:\nEl módulo asyncio permite manejar operaciones de entrada/salida asincrónicas de manera eficiente, sin bloquear el hilo principal.\nimport asyncio\n\nasync def tarea():\n    print(\"Tarea asincrónica ejecutada\")\n    await asyncio.sleep(2)  # Simula una tarea asincrónica con espera\n    print(\"Tarea asincrónica terminada\")\n\n# Ejecutar tareas asincrónicas\nasync def main():\n    await asyncio.gather(tarea(), tarea())\n\nasyncio.run(main())  # Ejecuta el bucle de eventos",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Concurrencia y Paralelismo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/10_pruebas_y_debugging.html",
    "href": "unidades/unidad5/10_pruebas_y_debugging.html",
    "title": "Pruebas y Debugging",
    "section": "",
    "text": "Pruebas y Debugging\n\n\n\nEscribir pruebas y depurar el código son prácticas esenciales para garantizar la calidad y facilitar el mantenimiento.\n\nConceptos clave\n\nunittest y pytest: Frameworks para pruebas.\nassert: Para comprobar condiciones.\npdb: Para depuración interactiva.\n\nEjemplo\n# Prueba simple con unittest\nimport unittest\n\ndef suma(a, b):\n    return a + b\n\nclass TestSuma(unittest.TestCase):\n    def test_suma(self):\n        self.assertEqual(suma(1, 2), 3)\n\nif __name__ == '__main__':\n    unittest.main()\n\n\nEjemplo Práctico\nObjetivo:\nAprender a escribir pruebas unitarias y utilizar herramientas de depuración para asegurar la calidad del código.\nDescripción:\nEn este tema se cubren pruebas unitarias con unittest, depuración con pdb y el uso de pytest para realizar pruebas automatizadas.\nInstrucciones:\n\nEscribe pruebas unitarias para una función que realiza una operación matemática (suma).\nAprende a utilizar el depurador pdb para inspeccionar el flujo de ejecución.\n\nEjemplos prácticos:\n\n1. Pruebas con unittest:\nEl módulo unittest permite crear casos de prueba, asegurando que el código funcione correctamente.\n\n\nPosibles soluciones\n\nimport unittest\n\n# Función simple que vamos a probar\ndef suma(a, b):\n    return a + b\n\n# Clase de prueba\nclass TestSuma(unittest.TestCase):\n    def test_suma(self):\n        self.assertEqual(suma(1, 2), 3)  # Verifica que la suma de 1 y 2 sea 3\n\nif __name__ == '__main__':\n    unittest.main()  # Ejecuta las pruebas\n\n\n\n2. Pruebas con pytest:\npytest es una alternativa moderna y más sencilla para realizar pruebas. Aquí utilizamos el mismo ejemplo de la función suma.\n\n\nPosibles soluciones\n\n# Guarda esto en un archivo llamado test_funciones.py\n\ndef suma(a, b):\n    return a + b\n\ndef test_suma():\n    assert suma(1, 2) == 3  # Verifica que la suma de 1 y 2 sea 3\nEjecuta las pruebas con el comando:\npytest test_funciones.py\n\n\n\n3. Depuración con pdb:\nEl depurador pdb permite interactuar con el código paso a paso, inspectando variables y el flujo de ejecución.\n\n\nPosibles soluciones\n\nimport pdb\n\ndef suma(a, b):\n    pdb.set_trace()  # Aquí se activa el depurador\n    return a + b\n\nresultado = suma(1, 2)\nprint(f\"Resultado: {resultado}\")\nCuando ejecutes el programa, el depurador se activará en pdb.set_trace(). Desde ahí, podrás usar comandos como n para avanzar a la siguiente línea o p para imprimir el valor de una variable.\nComandos útiles de pdb:\n\nn: Ejecuta la siguiente línea de código.\np variable: Muestra el valor de una variable.\nq: Sale del depurador",
    "crumbs": [
      "Unidad 5: Python Avanzado",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Pruebas y Debugging</span>"
    ]
  }
]