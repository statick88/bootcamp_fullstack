:::{.justify}

# Fase 2: Diseño de la Arquitectura

## 1. Arquitectura General del Sistema

La arquitectura del sistema se basará en un enfoque cliente-servidor, donde el cliente (frontend) interactúa con el servidor (backend) a través de una API RESTful. El backend se encargará de gestionar la lógica de negocio, la autenticación, el almacenamiento de datos y la comunicación con servicios externos como PayPal.

## Detalles importantes:

- **API RESTful**: El backend proporcionará endpoints RESTful para interactuar con recursos como usuarios, productos, pedidos y pagos. Se detallará la estructura de las rutas y la respuesta esperada de cada uno de los endpoints (por ejemplo, GET /api/products/ para obtener la lista de productos).

- **Servicios Externos (PayPal)**: La integración con PayPal será a través de su API RESTful. Las credenciales y detalles del procesamiento de pagos se manejarán con variables de entorno y secretos seguros.

## 2. Backend (Django con Django REST Framework)

### A. Estructura del Proyecto:

La estructura del proyecto se organizará de la siguiente manera:

```plaintext
backend/
├── auth/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   ├── tests/
├── products/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   ├── tests/
├── orders/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   ├── tests/
├── settings.py
├── urls.py
├── wsgi.py
├── requirements.txt
└── .env
```
### B. Tecnologías:

- **Django**: Framework principal para la gestión del backend.
- **Django REST Framework (DRF)**: Para la creación de APIs RESTful que interactúan con el frontend.
- **JWT (JSON Web Tokens)**: Para la autenticación de usuarios basada en tokens. Implementaremos una política de Refresh Tokens para permitir la renovación de tokens sin que el usuario tenga que iniciar sesión constantemente.
- **PostgreSQL**: Base de datos relacional para almacenar la información de los usuarios, productos y pedidos.
- **Redis**: Para la gestión de caché, sesiones y optimización de consultas.
- **PayPal API**: Para la integración de pagos. Los detalles de las credenciales de la API se almacenarán en archivos .env utilizando herramientas de seguridad como Vault para la gestión de secretos.
- **Validaciones**: Implementaremos validaciones tanto en el frontend como en el backend para asegurar la integridad de los datos. El backend usará serializers en Django para validar los datos recibidos.
- **Cifrado de Contraseñas**: Usaremos bcrypt para el cifrado de contraseñas y asegurarnos de que la seguridad de los usuarios esté garantizada.

## 3. Frontend (React con Vite)

### A. Estructura del Proyecto:

La estructura del frontend se organizará de la siguiente manera:

```plaintext
frontend/
├── src/
│   ├── components/
│   ├── pages/
│   ├── services/
│   ├── App.js
│   ├── index.js
│   ├── store/
├── public/
├── tailwind.config.js
├── vite.config.js
└── .env
```
### B. Tecnologías:

- **React**: Librería para la construcción de la interfaz de usuario.
- **Vite**: Herramienta para la configuración rápida y eficiente de aplicaciones React.
- **TailwindCSS**: Framework CSS para un diseño limpio y moderno.
- **Axios**: Para hacer peticiones HTTP a la API del backend. Se incluirán mecanismos para manejar errores globalmente (por ejemplo, mostrando alertas de error si una petición falla).
- **React Router**: Para la gestión de rutas en la aplicación de una sola página.
- **React Context / Redux**: Usaremos React Context o Redux para la gestión de estado a nivel global, especialmente para manejar la autenticación de usuarios, productos y pedidos.
- **Optimización de Carga**: Implementaremos Lazy Loading para componentes pesados y Code Splitting para mejorar el rendimiento y tiempo de carga del frontend.
- **Manejo de Errores**: Se implementará un sistema global de manejo de errores, tanto en las peticiones HTTP (con Axios) como en la interfaz de usuario (con Toast Notifications o alertas).

## 4. Integración del Backend y Frontend

### Comunicación:

- El frontend se comunicará con el backend a través de peticiones HTTP utilizando Axios para obtener datos y realizar acciones (CRUD) sobre los productos, pedidos, etc. Se asegurará de que todas las peticiones que requieren autenticación incluyan el JWT en las cabeceras.

### Autenticación:

- La autenticación de los usuarios se manejará mediante JWT. El token de acceso se incluirá en las cabeceras de las peticiones HTTP que requieran autenticación. También se implementará un sistema de Refresh Tokens para renovar el token de acceso sin necesidad de que el usuario vuelva a iniciar sesión.

### Manejo de Errores:

- Se implementarán manejadores de errores tanto en el backend como en el frontend. En el backend, usaremos excepciones personalizadas para manejar errores en los endpoints de la API, mientras que en el frontend se mostrarán mensajes adecuados de error usando un sistema de notificaciones.

## 5. Base de Datos (PostgreSQL)

- **Modelo de Datos**: Los modelos de datos se organizarán en tablas de usuarios, productos y pedidos.

    - **Usuarios**: Almacenará información sobre clientes y administradores. Incluye un campo de rol para diferenciarlos.
    - **Productos**: Almacenará la información de los productos (nombre, precio, inventario, imágenes, descripción, etc.).
    - **Pedidos**: Almacenará los detalles de los pedidos realizados por los clientes (productos, cantidades, fecha de compra, total, estado de pago).

### Relacionando los Modelos:

- Se establecerán relaciones adecuadas entre los modelos, como Foreign Keys entre pedidos y productos, y Many-to-Many entre productos y categorías, si es necesario.

## 6. Infraestructura (Docker y Contenedores)

- **Docker Compose**: Para orquestar los contenedores del backend, frontend y base de datos.

    - **Contenedor Backend**: Contendrá la aplicación Django, configurada para interactuar con PostgreSQL y Redis.
    - **Contenedor Frontend**: Contendrá la aplicación React, configurada para comunicarse con la API Django.
    - **Contenedor Base de Datos**: Contendrá PostgreSQL.
    - **Contenedor de Cache**: Contendrá Redis.

- **Variables de Entorno**: Los detalles de configuración (como credenciales de base de datos, claves de API) se almacenarán en archivos .env para mantener la seguridad y facilitar la configuración.

- Implementaremos un archivo .env.example para que los desarrolladores puedan copiarlo y configurar sus entornos locales.

## 7. Despliegue (Railway para Backend, Vercel para Frontend)

- **Backend en Railway**: El backend se desplegará en Railway, donde se gestionarán las bases de datos y la API.
- **Frontend en Vercel**: El frontend se desplegará en Vercel para un acceso rápido y escalabilidad automática.

### Escalabilidad:

- A medida que el proyecto crezca, podremos escalar el backend en Railway o cambiar a un servicio como AWS o Heroku si es necesario.
- Vercel ofrece escalabilidad automática, pero también es importante evaluar el uso de un CDN para optimizar la entrega de contenido estático en el frontend.

## 8. Seguridad y Buenas Prácticas

- **Autenticación de Usuarios**: Implementación de JWT para la autenticación de usuarios, con roles de cliente y administrador. La política de renovación de tokens mediante Refresh Tokens será implementada.
- **Seguridad en los Pagos**: Integración con PayPal para procesar pagos de manera segura. Las credenciales y claves de la API de PayPal se mantendrán seguras mediante variables de entorno.
- **Validación de Datos**: Uso de validaciones tanto en el frontend como en el backend para garantizar la integridad de los datos.
- **Cifrado**: Cifrado de contraseñas en el backend utilizando bcrypt.
- **Manejo de Errores y Logs**: Se configurarán registros (logs) detallados para facilitar la detección de errores y auditoría.
:::
