:::{.justify}
# Vistas en Django

En el captitulo anterior se crearon los modelos **Medicamento** y **Venta** para la aplicación **farmacia**. En este capítulo se crearán las vistas necesarias para la aplicación.

## Creación de vistas

Las vistas en Django son funciones o clases que reciben una petición HTTP y devuelven una respuesta HTTP. Las vistas se definen en el archivo **views.py** de cada aplicación.

Para crear una vista en Django, debemos seguir los siguientes pasos:

1. Importar los modelos y módulos necesarios.
2. Definir la lógica de la vista.
3. Devolver una respuesta HTTP.

:::{.callout-info}
Recordemos los modelos creados en la sección anterior:

```python
from django.db import models

class Medicamento(models.Model):
    nombre = models.CharField(max_length=100)
    precio = models.DecimalField(max_digits=10, decimal_places=2)
    existencias = models.IntegerField()

    def __str__(self):
        return self.nombre

class Venta(models.Model):
    medicamento = models.ForeignKey(Medicamento, on_delete=models.CASCADE)
    cantidad = models.IntegerField()
    fecha = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'{self.medicamento} - {self.cantidad}'
```
:::

En el archivo **views.py** de la aplicación **farmacia**, podemos definir las siguientes vistas:

```python
from django.shortcuts import render
from .models import Medicamento, Venta

# Vista para mostrar la lista de medicamentos
def lista_medicamentos(request):
    medicamentos = Medicamento.objects.all()
    return render(request, 'farmacia/lista_medicamentos.html', {'medicamentos': medicamentos})

# Vista para mostrar el detalle de un medicamento
def detalle_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    return render(request, 'farmacia/detalle_medicamento.html', {'medicamento': medicamento})

# Vista para realizar una venta
def realizar_venta(request):
    if request.method == 'POST':
        form = VentaForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('lista_medicamentos')
    else:
        form = VentaForm()
        return render(request, 'farmacia/realizar_venta.html', {'form': form})

# Vista para mostrar el historial de ventas
def historial_ventas(request):
    ventas = Venta.objects.all()
    return render(request, 'farmacia/historial_ventas.html', {'ventas': ventas})
```

En este ejemplo, se han definido cuatro vistas:

1. **lista_medicamentos**: Muestra la lista de medicamentos disponibles.
2. **detalle_medicamento**: Muestra el detalle de un medicamento en particular.
3. **realizar_venta**: Permite realizar una venta de un medicamento.
4. **historial_ventas**: Muestra el historial de ventas realizadas.

Estas vistas utilizan los modelos **Medicamento** y **Venta** para interactuar con la base de datos y renderizar las plantillas correspondientes.

Tambien podemos crear vistas para procesar formularios, como se muestra en el siguiente ejemplo:

```python
from django.shortcuts import render, redirect
from .forms import MedicamentoForm, VentaForm

# Vista para crear un nuevo medicamento
def crear_medicamento(request):
    if request.method == 'POST':
        form = MedicamentoForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('lista_medicamentos')
    else:
        form = MedicamentoForm()
        return render(request, 'farmacia/crear_medicamento.html', {'form': form})
```

En este caso, se ha definido una vista para crear un nuevo medicamento. La vista procesa el formulario enviado por el usuario y guarda el nuevo medicamento en la base de datos.

Otras vistas comunes en Django son las siguientes:

- **Vista de detalle**: Muestra los detalles de un objeto en particular.
- **Vista de edición**: Permite editar un objeto existente.
- **Vista de eliminación**: Permite eliminar un objeto existente.
- **Vista de búsqueda**: Permite buscar objetos en la base de datos.

```python
# Vista de detalle de un medicamento

def detalle_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    return render(request, 'farmacia/detalle_medicamento.html', {'medicamento': medicamento})

# Vista de edición de un medicamento
def editar_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    if request.method == 'POST':
        form = MedicamentoForm(request.POST, instance=medicamento)
        if form.is_valid():
            form.save()
            return redirect('lista_medicamentos')
    else:
        form = MedicamentoForm(instance=medicamento)
        return render(request, 'farmacia/editar_medicamento.html', {'form': form})

# Vista de eliminación de un medicamento
def eliminar_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    medicamento.delete()
    return redirect('lista_medicamentos')

# Vista de búsqueda de medicamentos
def buscar_medicamentos(request):
    query = request.GET.get('q')
    medicamentos = Medicamento.objects.filter(nombre__icontains=query)
    return render(request, 'farmacia/buscar_medicamentos.html', {'medicamentos': medicamentos, 'query': query})
```

Con estas vistas, podemos realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) sobre los objetos de la base de datos y proporcionar una interfaz de usuario interactiva para los usuarios de la aplicación.

En el próximo capítulo, veremos cómo integrar las vistas con las plantillas para crear páginas web dinámicas.

## Actividades

1. Crear las vistas necesarias para la aplicación **farmacia**.
2. Probar las vistas en un navegador web.
3. Crear una vista para editar un medicamento existente.
4. Crear una vista para eliminar un medicamento existente.
5. Crear una vista para buscar medicamentos por nombre.

<details>
  <summary>Posible solución</summary>

1. Crear las vistas necesarias para la aplicación **farmacia**.

```python
from django.shortcuts import render, redirect
from .models import Medicamento, Venta
from .forms import MedicamentoForm, VentaForm

# Vista para mostrar la lista de medicamentos
def lista_medicamentos(request):
    medicamentos = Medicamento.objects.all()
    return render(request, 'farmacia/lista_medicamentos.html', {'medicamentos': medicamentos})

# Vista para mostrar el detalle de un medicamento
def detalle_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    return render(request, 'farmacia/detalle_medicamento.html', {'medicamento': medicamento})

# Vista para realizar una venta
def realizar_venta(request):
    if request.method == 'POST':
        form = VentaForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('lista_medicamentos')
    else:
        form = VentaForm()
        return render(request, 'farmacia/realizar_venta.html', {'form': form})

# Vista para mostrar el historial de ventas
def historial_ventas(request):
    ventas = Venta.objects.all()
    return render(request, 'farmacia/historial_ventas.html', {'ventas': ventas})

# Vista para crear un nuevo medicamento
def crear_medicamento(request):
    if request.method == 'POST':
        form = MedicamentoForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('lista_medicamentos')
    else:
        form = MedicamentoForm()
        return render(request, 'farmacia/crear_medicamento.html', {'form': form})

# Vista para editar un medicamento existente
def editar_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    if request.method == 'POST':
        form = MedicamentoForm(request.POST, instance=medicamento)
        if form.is_valid():
            form.save()
            return redirect('lista_medicamentos')
    else:
        form = MedicamentoForm(instance=medicamento)
        return render(request, 'farmacia/editar_medicamento.html', {'form': form})

# Vista para eliminar un medicamento existente
def eliminar_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    medicamento.delete()
    return redirect('lista_medicamentos')

# Vista para buscar medicamentos por nombre
def buscar_medicamentos(request):
    query = request.GET.get('q')
    medicamentos = Medicamento.objects.filter(nombre__icontains=query)
    return render(request, 'farmacia/buscar_medicamentos.html', {'medicamentos': medicamentos, 'query': query})
```

2. Probar las vistas en un navegador web.

Para probar las vistas en un navegador web, podemos acceder a las siguientes URLs:

- Lista de medicamentos: **http://localhost:8000/medicamentos/**

- Detalle de un medicamento: **http://localhost:8000/medicamentos/1/**

- Realizar una venta: **http://localhost:8000/ventas/nueva/**

- Historial de ventas: **http://localhost:8000/ventas/**

3. Crear una vista para editar un medicamento existente.

```python
# Vista para editar un medicamento existente

def editar_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    if request.method == 'POST':
        form = MedicamentoForm(request.POST, instance=medicamento)
        if form.is_valid():
            form.save()
            return redirect('lista_medicamentos')
    else:
        form = MedicamentoForm(instance=medicamento)
        return render(request, 'farmacia/editar_medicamento.html', {'form': form})
```

4. Crear una vista para eliminar un medicamento existente.

```python
# Vista para eliminar un medicamento existente

def eliminar_medicamento(request, id):
    medicamento = Medicamento.objects.get(id=id)
    medicamento.delete()
    return redirect('lista_medicamentos')
```

5. Crear una vista para buscar medicamentos por nombre.

```python
# Vista para buscar medicamentos por nombre

def buscar_medicamentos(request):
    query = request.GET.get('q')
    medicamentos = Medicamento.objects.filter(nombre__icontains=query)
    return render(request, 'farmacia/buscar_medicamentos.html', {'medicamentos': medicamentos, 'query': query})
```

</details>

# Conclusiones

En este capítulo se han creado las vistas necesarias para la aplicación **farmacia**. Las vistas permiten interactuar con los modelos de la base de datos y renderizar las plantillas correspondientes. En el próximo capítulo, se verá cómo integrar las vistas con las plantillas para crear páginas web dinámicas.

:::

